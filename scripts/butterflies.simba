program butterflies;
{$I WaspLib/osr.simba}

type
  EState = (PRINT_PROGRESS, RESET_TIMER, CLOSE_INTERFACE, HANDLE_LOGIN,
            TERMINATE_SCRIPT, DO_ANTIBAN, TO_ZONE, CATCH);

  TGUI = record (TScriptForm)
    BreakForInput, BreakAfterInput: TLabeledEdit;
    BlockInputCheckbox: TLabeledCheckBox;
  end;

var
  BreakFor, BreakAfter, StartXP, CurrentXP, GainedXP: Int32;
  InactivityTimer, ReportTimer: TStopwatch;
  Zone, Aldarin, Savannah, Battlefront: TBox;
  Lepidoptera: TCTS2Color;
  BlockInput: Boolean;
  GUI: TGUI;

procedure TGUI.StartScript(Sender: TObject); override;
begin
  BreakFor := Self.BreakForInput.GetText().ExtractInteger();
  BlockInput := Self.BlockInputCheckbox.IsChecked();
  BreakAfter := Self.BreakAfterInput.GetText().ExtractInteger();
  inherited;
end;

procedure TGUI.Run(); override;
var
  Tab: TTabSheet;
  F: TFont;
begin
  Self.Setup('Butterflies', Point(800, 500), False);
  Self.Start.SetOnClick(@Self.StartScript);
  Self.AddTab('Settings');

  F.Init();
  F.setName('Verdana');
  F.SetQuality(fqCleartype);
  Self.Form.setFont(F);
  Self.PageControl.SetFont(F);
  F.Free();

  Tab := Self.GetTab('Settings');
  Tab.SetTooltip('');

  with Self.BreakAfterInput do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(160));
    SetCaption('Break after:');
    SetText('60');
  end;

  with Self.BlockInputCheckbox do
  begin
    Create(Tab);
    SetCaption('Block Real Input?');
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(280));
  end;

  with Self.BreakForInput do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(220));
    SetCaption('Break for:');
    SetText('10');
  end;

  Self.CreateAccountManager(Tab);
  inherited;
end;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

procedure PauseTimer(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Pause();
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Resume();
  T := Task;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(450, 2750));
end;

procedure SetupAntiban();
begin
  Antiban.AddTask(ONE_MINUTE * 3, @Antiban.RandomMouse, 1);
  Antiban.AddTask(ONE_MINUTE * 5, @Antiban.RandomRightClick, 1);
  Antiban.AddTask(ONE_MINUTE * 5, @Antiban.DoLoseFocus, 1);
  Antiban.AddTask(ONE_MINUTE * 7, @Antiban.RandomRotate, 1);

  Antiban.AddBreak(BreakAfter * ONE_MINUTE, BreakFor * ONE_MINUTE, 0.3, 1);

  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

function HasGainedXP(): Boolean;
var
  TempValue: Int32;
begin
  CurrentXP := XPBar.Read();

  if CurrentXP < 1024 then
    Exit(False);

  TempValue := CurrentXP - StartXP;

  if TempValue <= 0 then
    Exit(False);

  Result := Tempvalue > GainedXP;

  if Result then
    GainedXP := TempValue;
end;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  Hours := GetTimeRunning() / 3600000;
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');

  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);

  ReportTimer.Reset();
end;

procedure SetupScript();
begin
  if Map.Position().InBox(Aldarin) then
  begin
    WriteDebug('Setting up kourend Aldarin and Ruby harvests');
    Zone := [1244, 38622, 1298, 38718];
    Lepidoptera := CTS2(1912231, 3, 0.04, 0.33);
  end else
  if Map.Position().InBox(Savannah) then
  begin
    WriteDebug('Setting up kourend Aldarin and Sunlight moths');
    Zone := [2152, 38314, 2256, 38390];
    Lepidoptera := CTS2(5076130, 1, 2.33, 5.03);
  end else
    if Map.Position().InBox(Battlefront) then
  begin
    WriteDebug('Setting up kourend Battlefront and Warlocks');
    Zone := [752, 35322, 880, 35494];
    Lepidoptera := CTS2(1450888, 1, 0.01, 0.01);
  end else
    TerminateScript('Unknown location, please start in Savannah or Aldarin hunter spot');
end;

procedure Init();
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if WaitUntil(RSClient.IsLoggedIn(), 250, 12000)  then
    StartXP := XPBar.Read();

  if StartXP < 1024 then
    TerminateScript('Failed to read XP, make sure XPBar is set up');

  if Options.GetNPCAttackOption() <> ERSAttackOption.HIDDEN then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN);

  if not InRange(Options.GetZoomLevel(), 12, 18) then
    Options.SetZoomLevel(Random(12, 18));

  Mouse.Speed := SRL.NormalRange(28, 38);

  Aldarin := [1200, 38622, 1340, 38762];
  Savannah := [1996, 28102, 2500, 38506];
  Battlefront := [580, 35270, 1012, 35566];

  Map.SetupChunks([[[19, 47, 24, 44], [0]], [[23, 48, 26, 45], [0]],
                   [[17, 59, 21, 56], [0]]]);

  MM2MS.SetupZoom();
  SetupAntiban();

  if BlockInput then
  begin
    WriteDebug('Script started with real input disabled');
    WLSettings.RemoteInput.BlockInput := True;
    RSClient.RemoteInput.DisableRealInput();
  end else
  begin
    WriteDebug('Script started with real input enabled');
    WLSettings.RemoteInput.BlockInput := False;
    RSClient.RemoteInput.EnableRealInput();
  end;

  SetupScript();

  if not Inventory.IsOpen() then
    Inventory.Open();

  InactivityTimer.Start();
  ReportTimer.Start();
end;

function FindButterflies(): TPointArray;
var
  ATPA: T2DPointArray;
begin
  if SRL.FindColors(Result, Lepidoptera, Mainscreen.Bounds()) = 0 then
    Exit();

  ATPA := Result.Cluster(50);
  Result := ATPA.Means();
  Result.Sort(Mainscreen.Center());
end;

procedure Click();
var
  TPA: TPointArray;
  Pt: TPoint;
  Exp: Int64;
begin
  TPA := FindButterflies();

  if Length(TPA) = 0 then
  begin
    Sleep(500);
    Exit();
  end;

  Exp := XPBar.Read();

  for Pt in TPA do
    RSClient.Image.DrawCrosshairs(Pt, 5, clBlue);

  Mouse.Click(TPA[0], MOUSE_LEFT);

  RSClient.Image.Clear();

  if Mainscreen.DidRedClick() then
    WaitUntil(Exp < XPBar.Read(), 500, SRL.NormalRange(4500, 9000));
end;

function TAntiban.HasTaskWaiting(): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Self.Tasks) do
    if Self.Tasks[i].Countdown.IsFinished() then
      Exit(True);
end;

function GetState(): EState;
begin
  if InactivityTimer.ElapsedTime() > 300000 then
    Exit(TERMINATE_SCRIPT);

  if not RSClient.IsLoggedIn() then
    Exit(HANDLE_LOGIN);

  if RSInterface.IsOpen() then
    Exit(CLOSE_INTERFACE);

  if HasGainedXP() then
    Exit(RESET_TIMER);

  if ReportTimer.ElapsedTime() > 120000 then
    Exit(PRINT_PROGRESS);

  if Antiban.HasTaskWaiting() then
    Exit(DO_ANTIBAN);

  if not Map.Position().InBox(Zone) then
    Exit(TO_ZONE);

  Exit(CATCH);
end;

procedure Loop();
var
  State: EState;
begin
  State := GetState();
  WriteDebug(ToStr(State));

  case State of
    TERMINATE_SCRIPT: TerminateScript();
    CLOSE_INTERFACE: RSInterface.Close(50);
    PRINT_PROGRESS: PrintProgress();
    RESET_TIMER: InactivityTimer.Reset();
    DO_ANTIBAN: Antiban.DoAntiban();
    HANDLE_LOGIN: Login.LoginPlayer();
    CATCH: Click();
    TO_ZONE: Map.Walker.WalkBlind(Zone.Center());
  end;

  WaitEx(200, 195);
end;

begin
  GUI.Run();
  Init();

  repeat
    Loop();
  until False;
end.
