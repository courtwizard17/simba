program butterflies;
{$I WaspLib/osr.simba}

type
  EState = (PRINT_PROGRESS, RESET_TIMER, CLOSE_INTERFACE, HANDLE_LOGIN, TERMINATE_SCRIPT, DO_ANTIBAN);

var
  BreakFor, BreakAfter, StartXP, CurrentXP, GainedXP: Int32;
  InactivityTimer, ReportTimer: TStopwatch;
  BlockInput: Boolean;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

procedure PauseTimer(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Pause();
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Resume();
  T := Task;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(450, 2750));
end;

procedure SetupAntiban();
begin
  Antiban.AddTask(ONE_MINUTE * 3, @Antiban.RandomMouse, 1);
  Antiban.AddTask(ONE_MINUTE * 5, @Antiban.RandomRightClick, 1);
  Antiban.AddTask(ONE_MINUTE * 5, @Antiban.DoLoseFocus, 1);
  Antiban.AddTask(ONE_MINUTE * 7, @Antiban.RandomRotate, 1);

  Antiban.AddBreak(BreakAfter * ONE_MINUTE, BreakFor * ONE_MINUTE, 0.3, 1);

  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

function HasGainedXP(): Boolean;
var
  TempValue: Int32;
begin
  CurrentXP := XPBar.Read();

  if CurrentXP < 1024 then
    Exit(False);

  TempValue := CurrentXP - StartXP;

  if TempValue <= 0 then
    Exit(False);

  Result := Tempvalue > GainedXP;

  if Result then
    GainedXP := TempValue;
end;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  Hours := GetTimeRunning() / 3600000;
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');

  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);

  ReportTimer.Reset();
end;

procedure Init();
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if WaitUntil(RSClient.IsLoggedIn(), 250, 12000)  then
    StartXP := XPBar.Read();

  if StartXP < 1024 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  if Options.GetNPCAttackOption() <> ERSAttackOption.HIDDEN then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN);

  if not InRange(Options.GetZoomLevel(), 12, 18) then
    Options.SetZoomLevel(Random(12, 18));

  Mouse.Speed := SRL.NormalRange(25, 35);

  MM2MS.SetupZoom();
  SetupAntiban();

  if BlockInput then
  begin
    WriteDebug('Script started with real input disabled.');
    WLSettings.RemoteInput.BlockInput := True;
    RSClient.RemoteInput.DisableRealInput();
  end else
  begin
    WriteDebug('Script started with real input enabled.');
    WLSettings.RemoteInput.BlockInput := False;
    RSClient.RemoteInput.EnableRealInput();
  end;

  InactivityTimer.Start();
  ReportTimer.Start();
end;

function TAntiban.HasTaskWaiting(): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Self.Tasks) do
    if Self.Tasks[i].Countdown.IsFinished() then
      Exit(True);
end;

function GetState(): EState;
begin
  if InactivityTimer.ElapsedTime() > 300000 then
    Exit(TERMINATE_SCRIPT);

  if not RSClient.IsLoggedIn() then
    Exit(HANDLE_LOGIN);

  if RSInterface.IsOpen() then
    Exit(CLOSE_INTERFACE);

  if HasGainedXP() then
    Exit(RESET_TIMER);

  if ReportTimer.ElapsedTime() > 120000 then
    Exit(PRINT_PROGRESS);

  if Antiban.HasTaskWaiting() then
    Exit(DO_ANTIBAN);
end;

procedure Loop();
var
  State: EState;
begin
  State := GetState();

  WriteDebug(ToStr(State));

  case State of
    TERMINATE_SCRIPT: TerminateScript();
    CLOSE_INTERFACE: RSInterface.Close(50);
    PRINT_PROGRESS: PrintProgress();
    RESET_TIMER: InactivityTimer.Reset();
    DO_ANTIBAN: Antiban.DoAntiban();
    HANDLE_LOGIN: Login.LoginPlayer();
  end;

  WaitEx(200, 195);
end;

begin
  Init();

  repeat
    Loop();
  until False;
end.
