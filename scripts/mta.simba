program mta;
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0;
end;

type
  EMode = (TELEKINETIC, ALCHEMY, ENCHANT, GRAVEYARD);
  EState = (EXIT_TELEKINETIC, EXIT_ALCHEMY, EXIT_ENCHANT, EXIT_GRAVEYARD,
            PLAY_TELEKINETIC, PLAY_ALCHEMY, PLAY_ENCHANT, PLAY_GRAVEYARD,
            JOIN_TELEKINETIC, JOIN_ALCHEMY, JOIN_ENCHANT, JOIN_GRAVEYARD);

  TTheatre = record
    Index: Int32;
    Area: TBox;
    Maze: TBox;
    Steps: TStringArray;
  end;

const
  Mode = EMode.ALCHEMY;

var
  State: EState;
  RSW: TRSWalker;
  Fruit: TRSItem;
  Items: TRSItemArray;
  Timer, ReportTimer: TStopwatch;
  StartXP, CurrentXP, GainedXP: Int32;
  AlchemyArea, LobbyArea, GraveyardArea, EnchantArea: TBox;
  AlchemyStatue, TelekineticStatue, GraveyardStatue, EnchantStatue,
  AlchemyExit, GraveyardExit, EnchantExit, DepositHole,
  AlchemyDeposit, ShapePile: TRSObject;
  BoneSpell, EnchantSpell: ERSSpell;
  Theatres: Array [0..9] of TTheatre;

procedure DownloadMap(const URL, Filename: String);
var
  Client: Int32;
begin
  Client := InitializeHTTPClient(False);
  try
    GetHTTPPageEx(Client, URL, Filename);
  finally
    FreeHTTPClient(Client);
  end;
end;

function TRectangle.RandomMean(): TPoint;
var
  centerX, centerY, randX, randY: Double;
begin
  centerX := Self.Mean().X;
  centerY := Self.Mean().Y;

  randX := Self.Left.X + Random * (Self.Right.X - Self.Left.X);
  randY := Self.Top.Y + Random * (Self.Btm.Y - Self.Top.Y);

  Result.X := Trunc((centerX + randX) / 2);
  Result.Y := Trunc((centerY + randY) / 2);
end;

procedure PrintProgress();
var
  hrs: Double;
  s1, s3: String;
begin
  if ReportTimer.ElapsedTime < 60000 then
    Exit();

  hrs := (GetTimeRunning()/3600000);
  s1 := ToStr(Round((GainedXP/1000), 0), ' k ');
  s3 := ToStr('(', Round((GainedXP/(hrs*1000)), 1), ' k / hr)');
  WriteLn(SRL.TimeStamp(), ':[Experience]: ', s1, s3);
  ReportTimer.Reset();
end;

procedure CalculateXP();
var
  t: Int32;
begin
  CurrentXP := XPBar.Read();
  t         := GainedXP;
  GainedXP  := (CurrentXP - StartXP);

  if GainedXP > t then
    Timer.Reset();

  if Timer.ElapsedTime > 300000 then
    TerminateScript('No Gained XP in 5 minutes!');
end;

procedure KeyboardRotate();
var
  a: Integer;
begin
  if SRL.Dice(50) then
    a := $25
  else
    a := $27;

  Keyboard.KeyDown(a);
  Sleep(SRL.NormalRange(250, 1750));
  Keyboard.KeyUp(a);
end;

procedure PauseTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  Timer.Pause;
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  Timer.Resume;
  T := Task;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(450, 2750));
end;

procedure SetupAntiban();
begin
  Antiban.Skills := [ERSSKILL.MAGIC, ERSSKILL.TOTAL];
  Antiban.AddTask(ONE_MINUTE*2, @Mouse.RandomMovement, 1);
  Antiban.AddTask(ONE_MINUTE*6, @Antiban.HoverMSPlayers, 1);
  Antiban.AddTask(ONE_MINUTE*3, @Antiban.DoLoseFocus, 1);
  Antiban.AddTask(ONE_MINUTE*7, @Antiban.RandomRotate, 1);
  Antiban.AddTask(ONE_MINUTE*7, @KeyboardRotate, 1);
  Antiban.AddTask(ONE_MINUTE*8, @Antiban.HoverMSNPCs, 1);
  Antiban.AddTask(ONE_MINUTE*25, @Antiban.HoverSkills, 1);
  Antiban.AddBreak(40 * ONE_MINUTE, 6 * ONE_MINUTE, 0.3, 1);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

procedure SetupWalker();
var
  MapURL: String := 'https://i.imgur.com/6Q49VlM.png';
begin
  if not FileExists(AppPath+'\Includes\WaspLib\osr\walker\maps\mta.png') then
    DownloadMap(MapURL, AppPath+'\Includes\WaspLib\osr\walker\maps\mta.png');

  RSW.Setup('mta', 4);
end;

function GetTheatre(): Int32;
var
  Pos: TPoint := RSW.GetMyPos();
  i: Int32;
begin
  for i := 0 to High(Theatres) do
    if Theatres[i].Area.Contains(Pos) then
      Exit(i);

  Exit(-1);
end;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

procedure SetupTheatres();
begin
  with Theatres[0] do
  begin
    Index := 0;
    Maze := [103, 111, 139, 149];
    Steps := ['N', 'W', 'N', 'E', 'N', 'W', 'S', 'W', 'N', 'E'];
    Area := [30, 30, 215, 193];
  end;

  with Theatres[1] do
  begin
    Index := 1;
    Maze := [343, 101, 379, 137];
    Steps := ['E', 'S', 'W', 'N', 'W', 'N', 'E'];
    Area := [297, 41, 448, 174];
  end;

  with Theatres[2] do
  begin
    Index := 2;
    Maze := [553, 93 , 587, 129];
    Steps := ['S', 'W', 'S', 'E', 'S', 'E', 'N', 'W', 'N'];
    Area := [471, 39, 707, 202];
  end;

  with Theatres[3] do
  begin
    Index := 3;
    Maze := [817, 115, 853, 151];
    Steps := ['N', 'W', 'S', 'E', 'N', 'W', 'S', 'E'];
    Area := [732, 50, 914, 226];
  end;

  with Theatres[4] do
  begin
    Index := 4;
    Maze := [1047, 137, 1083, 173];
    Steps := ['N', 'E', 'S', 'E', 'N', 'E', 'S'];
    Area := [1011, 110, 1128, 224];
  end;

  with Theatres[5] do
  begin
    Index := 5;
    Maze := [105, 413, 141, 449];
    Steps := ['S', 'W', 'N', 'W', 'S', 'W', 'S', 'W'];
    Area := [42, 359, 231, 471];
  end;

  with Theatres[6] do
  begin
    Index := 6;
    Maze := [327, 421, 361, 459];
    Steps := ['N', 'E', 'S', 'E', 'S', 'W', 'N', 'E', 'N', 'W'];
    Area := [275, 323, 425, 506];
  end;

  with Theatres[7] do
  begin
    Index := 7;
    Maze := [533, 405, 569, 441];
    Steps := ['N', 'E', 'N', 'W', 'N', 'E', 'N', 'W'];
    Area := [492, 364, 644, 491];
  end;

  with Theatres[8] do
  begin
    Index := 8;
    Maze := [753, 403, 789, 439];
    Steps := ['N', 'W', 'S', 'W', 'N', 'W', 'S', 'W', 'N'];
    Area := [699, 338, 920, 499];
  end;

  with Theatres[9] do
  begin
    Index := 9;
    Maze := [1057, 401, 1093, 437];
    Steps := ['S', 'E', 'N', 'W', 'S', 'E', 'N'];
    Area := [1000, 322, 1128, 501];
  end;
end;

procedure SetupAreas();
begin
  GraveyardArea := [30, 524, 257, 768];
  EnchantArea := [311, 548, 543, 767];
  AlchemyArea := [608, 580, 800, 770];
  LobbyArea := [967, 591, 1048, 718];
end;

procedure SetupObjects();
begin
  with EnchantStatue do
  begin
    Finder.Colors += CTS2(8490379, 16, 0.25, 0.13);
    Setup(2, [[990, 616]]);
    SetupUpText(['Enchant']);
  end;

  with TelekineticStatue do
  begin
    Finder.Colors += CTS2(8490379, 16, 0.25, 0.13);
    Setup(2, [[1012, 628]]);
    SetupUpText(['Telekinetic']);
  end;

  with AlchemyStatue do
  begin
    Finder.Colors += CTS2(8490379, 16, 0.25, 0.13);
    Setup(2, [[1012, 604]]);
    SetupUpText(['Alchemy']);
  end;

  with GraveyardStatue do
  begin
    Finder.Colors += CTS2(8490379, 16, 0.25, 0.13);
    Setup(2, [[1024, 616]]);
    SetupUpText(['Graveyard']);
  end;

  with GraveyardExit do
  begin
    Finder.Colors += CTS2(8490379, 16, 0.25, 0.13);
    Setup(2, [[140, 634]]);
    SetupUpText(['Exit']);
  end;

  with AlchemyExit do
  begin
    Finder.Colors += CTS2(8490379, 16, 0.25, 0.13);
    Setup(2, [[690, 720]]);
    SetupUpText(['Exit']);
  end;

  with EnchantExit do
  begin
    Finder.Colors += CTS2(8490379, 16, 0.25, 0.13);
    Setup(2, [[380, 654]]);
    SetupUpText(['Exit']);
  end;

  with ShapePile do
  begin
    Finder.Colors += CTS2(2992063, 4, 0.26, 3.03);
    Setup(2, [[376, 598]]);
    SetupUpText(['Cube']);
  end;

  with DepositHole do
  begin
    Finder.Colors += CTS2(5724769, 25, 0.21, 0.13);
    Setup(4, [[420, 654]]);
    SetupUpText(['Deposit']);
  end;

  with AlchemyDeposit do
  begin
    Finder.Colors += CTS2(10463656, 7, 0.50, 0.30);
    Setup(2, [[700, 628]]);
    SetupUpText(['Deposit']);
  end;
end;

function InLobby(): Boolean;
begin
  Result := RSW.GetMyPos.InBox(LobbyArea);
end;

function GetState(): EState;
var
  Pos: TPoint := RSW.GetMyPos();
begin
  case Mode of
    EMode.ALCHEMY:
    begin
      if Pos.InBox(LobbyArea) then
        Exit(JOIN_ALCHEMY);

      if GetTheatre > -1 then
        Exit(EXIT_TELEKINETIC);

      if Pos.InBox(GraveyardArea) then
        Exit(EXIT_GRAVEYARD);

      if Pos.InBox(AlchemyArea) then
        Exit(PLAY_ALCHEMY);

      if Pos.InBox(EnchantArea) then
        Exit(EXIT_ENCHANT);
    end;

    EMode.TELEKINETIC:
    begin
      if Pos.InBox(LobbyArea) then
        Exit(JOIN_TELEKINETIC);

      if GetTheatre > -1 then
        Exit(PLAY_TELEKINETIC);

      if Pos.InBox(GraveyardArea) then
        Exit(EXIT_GRAVEYARD);

      if Pos.InBox(AlchemyArea) then
        Exit(EXIT_ALCHEMY);

      if Pos.InBox(EnchantArea) then
        Exit(EXIT_ENCHANT);
    end;

    EMode.GRAVEYARD:
    begin
      if Pos.InBox(LobbyArea) then
        Exit(JOIN_GRAVEYARD);

      if GetTheatre > -1 then
        Exit(EXIT_TELEKINETIC);

      if Pos.InBox(GraveyardArea) then
        Exit(PLAY_GRAVEYARD);

      if Pos.InBox(AlchemyArea) then
        Exit(EXIT_ALCHEMY);

      if Pos.InBox(EnchantArea) then
        Exit(EXIT_ENCHANT);
    end;

    EMode.ENCHANT:
    begin
      if Pos.InBox(LobbyArea) then
        Exit(JOIN_ENCHANT);

      if Pos.InBox(EnchantArea) then
        Exit(PLAY_ENCHANT);

      if Pos.InBox(GraveyardArea) then
        Exit(EXIT_GRAVEYARD);

      if Pos.InBox(AlchemyArea) then
        Exit(EXIT_ALCHEMY);

      if GetTheatre() > -1 then
        Exit(EXIT_TELEKINETIC);
    end;
  end;
end;

procedure StepMazeTile(Maze: TBox; Step: String);
var
  Pos: TPoint := RSW.GetMyPos();
  Dest: TPointArray;
  Rect: TRectangle;
  i: Int32;
begin
  case Step of
    'W': Dest := [[Maze.X1, Round((Maze.Y1+Maze.Y2)/2)], [Maze.X1-4, Round((Maze.Y1+Maze.Y2)/2)]];
    'E': Dest := [[Maze.X2, Round((Maze.Y1+Maze.Y2)/2)], [Maze.X2+4, Round((Maze.Y1+Maze.Y2)/2)]];
    'S': Dest := [[Round((Maze.X1+Maze.X2)/2), Maze.Y2], [Round((Maze.X1+Maze.X2)/2), Maze.Y2+4]];
    'N': Dest := [[Round((Maze.X1+Maze.X2)/2), Maze.Y1], [Round((Maze.X1+Maze.X2)/2), Maze.Y1-4]];
  end;

  if Magic.IsSelected(ERSSpell.TELEKINETIC_GRAB) then
    Magic.DeSelect();

  if Pos.DistanceTo(Dest[1]) > 52 then
    RSW.WalkBlind(Dest[1]);

  if ((Minimap.GetRunEnergy() > 70) and (not Minimap.IsRunEnabled())) then
    Minimap.EnableRun();

  if RSW.AtTile(Dest[1]) then
    Exit();

  for i := 0 to 5 do
  begin
    Rect := RSW.GetTileMS(Dest[0]);

    if Mainscreen.Bounds.Contains(Rect) then
    begin
      Mouse.HumanMove(Rect.Mean());

      if not Mainscreen.IsUpText('Walk', 195) then
      begin
        Mouse.Click(MOUSE_RIGHT);
        ChooseOption.Select('Walk here');
      end else
        Mouse.Click(MOUSE_LEFT);

      WaitUntil(RSW.AtTile(Dest[1]), 250, 10750);

      if RSW.AtTile(Dest[1]) then
        Exit();
    end;
    KeyboardRotate();
  end;
end;

procedure InitiateScript();
begin
  WriteDebug(ToStr('Starting script in ', Mode, ' Mode.'));

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  WaitUntil(RSClient.IsLoggedIn(), 250, 12000);
  StartXP := XPBar.Read();

  if StartXP < 69 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  Options.SetNPCAttackOption(ERSAttackOption.HIDDEN);
  Options.SetZoomLevel(Random(0, 1));

  if Mode = EMode.GRAVEYARD then
  begin
    Magic.Open();
    if Magic.CanActivate(ERSSpell.BONES_TO_PEACHES) then
    begin
      WriteDebug('We are able to cast B2P, setting the spell.');
      BoneSpell := ERSSpell.BONES_TO_PEACHES;
      Fruit := 'Peach';
    end else
    begin
      WriteDebug('We are NOT able to cast B2P, setting the spell.');
      BoneSpell := ERSSpell.BONES_TO_BANANAS;
      Fruit := 'Banana';
    end;
  end;

  EnchantSpell := ERSSpell.LVL5_ENCHANT;
  Items := ['Leather boots', 'Adamant kiteshield', 'Adamant med helm', 'Emerald', 'Rune longsword'];

  Mouse.Speed := Random(19, 24);
  Mouse.Wind := Random(1, 3);
  RSW.AdaptiveWalk := True;

  SetupWalker();
  SetupAreas();
  SetupTheatres();
  SetupAntiban();
  SetupObjects();

  Timer.Start();
  ReportTimer.Start();
end;

function FindMazePoint(out Location: TPoint): Boolean;
var
  Pos: TPoint := RSW.GetMyPos();
  MazeRect: TRectangle;
  Theatre, i: Int32;
  Dots: TPointArray;
  Angle: Double;
  Area: TBox;
begin
  Dots := Minimap.GetDots(ERSMinimapDot.NPC);
  Angle := Minimap.GetCompassAngle(False);
  Theatre := GetTheatre();
  Area := Theatres[Theatre].Maze;

  if (Theatre = -1) or (Dots.Len() = 0) then
    Exit(False);

  MazeRect := [RSW.WorldToMM(Pos, [Area.X1, Area.Y1], Angle),
               RSW.WorldToMM(Pos, [Area.X2, Area.Y1], Angle),
               RSW.WorldToMM(Pos, [Area.X2, Area.Y2], Angle),
               RSW.WorldToMM(Pos, [Area.X1, Area.Y2], Angle)];

  MazeRect := MazeRect.Expand(6);

  for i := 0 to Dots.Len()-1 do
    if MazeRect.Contains(Dots[i]) then
    begin
      Location := RSW.MMToWorld(Dots[i]);
      Exit(True);
    end;

  Exit(False);
end;

procedure WaitGuardian();
var f: TPoint;
begin
  WaitUntil(FindMazePoint(f), 250, 2775);
end;

function FindGuardian(FinalStep: Boolean = False): Boolean;
var
  GuardianWorldPoint: TPoint;
  ATPA: T2DPointArray;
  F: TRSObjectFinder;
  Rect: TRectangle;
  TPA: TPointArray;
  Bds: TBox;
begin
  F.Grow := 4;
  F.ClusterDistance := 100;
  F.ColorClusters += [CTS2(8682362, 7, 0.26, 0.12), CTS2(10724270, 6, 6.54, 0.26), 10];

  if FindMazePoint(GuardianWorldPoint) then
  begin
    Rect := RSW.GetTileMS(GuardianWorldPoint).Expand(4);
    Bds := Rect.Bounds();
    Bds.LimitTo(Mainscreen.Bounds());
    ATPA := Mainscreen.FindObject(F, Bds);
  end;

  if ATPA.Len() = 0 then
  begin
    WriteDebug('Force searching Guardian.');
    Bds := Mainscreen.Bounds();
    Bds.X2 := Bds.X2 - 65;
    ATPA := Mainscreen.FindObject(F, Bds);
  end;

  if ATPA.Len() = 0 then
    Exit(False)
  else
    ATPA.SortByMiddle(Mainscreen.Center());

  for TPA in ATPA do
  begin
    Mouse.HumanMove(TPA.Mean());
    if FinalStep then
      if Mainscreen.IsUpText('New', 195) then
        Exit(True);

    if Mainscreen.IsUpText('Maze G', 195) and Mainscreen.IsUpText('Teleki', 195) then
      Exit(True);
  end;
end;

procedure GrabGuardian();
begin
  if not Magic.IsSelected(ERSSpell.TELEKINETIC_GRAB) then
    Magic.CastSpell(ERSSpell.TELEKINETIC_GRAB);

  WaitGuardian();

  for 0 to 7 do
  begin
    if FindGuardian() then
    begin
      Mouse.Click(MOUSE_LEFT);
      XPBar.WaitXP();
      Exit();
    end;
    KeyboardRotate();
  end;
  WriteDebug('Failed to grab Guardian!');
end;

function FinishTheatre(): Boolean;
var
  SolvedTheatre: Int32;
begin
  if Magic.IsSelected(ERSSpell.TELEKINETIC_GRAB) then
    Magic.DeSelect();

  SolvedTheatre := GetTheatre();

  for 0 to 4 do
    if FindGuardian(True) then
      begin
        Mouse.Click(MOUSE_LEFT);
        WaitUntil(SolvedTheatre <> GetTheatre(), 250, 8750);
        Exit(True);
      end;

  WriteDebug(ToStr('Failed to Finish Theatre!'));
  Exit(False);
end;

procedure PlayTelekinetic();
var
  Theatre, i, xp: Int32;
begin
  Theatre := GetTheatre();

  if Theatre < 0 then
    Exit();

  WriteDebug(ToStr('Starting to solve Theatre: ', Theatre));

  for i := 0 to High(Theatres[Theatre].Steps) do
  begin
    if i = High(Theatres[Theatre].Steps) then
	    xp := XPBar.Read();

    Antiban.DoAntiban(False, False);
    StepMazeTile(Theatres[Theatre].Maze, Theatres[Theatre].Steps[i]);
    GrabGuardian();

    if i = High(Theatres[Theatre].Steps) then
      WaitUntil(XPBar.Read() > (xp + 200), 250, 7757);
  end;

  if FinishTheatre() then
    WriteDebug(ToStr('Successfully solved Theatre: ', Theatre))
  else
    Logout.ClickLogout();
end;

procedure DepositFruit();
var
  Pos: TPoint := RSW.GetMyPos();
  DepositChuteLocation: TPoint := [104, 638];
  ChuteRect: TRectangle;
begin
  if Pos.DistanceTo(DepositChuteLocation) > 18 then
    RSW.WalkBlind(DepositChuteLocation);

  ChuteRect := RSW.GetTileMs(DepositChuteLocation, 2);

  if not Mainscreen.Bounds.Contains(ChuteRect) then
    Exit();

  Mouse.HumanMove(ChuteRect.RandomMean());

  if Mainscreen.IsUpText('Deposit') then
  begin
    Mouse.Click(MOUSE_LEFT);
    WaitUntil(not Inventory.ContainsAny(['Banana', 'Peach']), 250, 4567);
  end else
    KeyboardRotate();
end;

function CountBones(): Int32;
begin
  Result := Inventory.CountItem('Animals' + #39 + ' Bones');
end;

procedure GrabBones();
var
  Pos: TPoint := RSW.GetMyPos();
  Bones: Int32 := CountBones();
  BonePileLocation: TPoint := [96, 646];
  BonePileRect: TRectangle;
begin
  if Mainscreen.IsUpText('Grab Bone') then
  begin
    Mouse.Click(MOUSE_LEFT);
    WaitUntil(Bones < CountBones(), 250, 4567);
    Exit();
  end;

  if Pos.DistanceTo(BonePileLocation) > 18 then
    RSW.WalkBlind(BonePileLocation);

  BonePileRect := RSW.GetTileMs(BonePileLocation);

  if not Mainscreen.Bounds.Contains(BonePileRect) then
    Exit();

  Mouse.HumanMove(BonePileRect.RandomMean());

  if Mainscreen.IsUpText(['Grab', 'ab B'], 195) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WaitUntil(Bones < CountBones(), 250, 4567);
  end else
    KeyboardRotate();
end;

function CountEmpties(): Int32;
begin
  Result := Inventory.CountEmptySlots();
end;

procedure TransferBones();
begin
  Magic.CastSpell(BoneSpell);

  if Minimap.GetHPPercent() < Random (40, 60) then
    if Inventory.ContainsItem(Fruit) then
      Inventory.ClickItem(Fruit);
end;

procedure PlayGraveyard();
begin
  if Inventory.ContainsAny(['Banana', 'Peach']) then
    DepositFruit()
  else if (CountBones() > Random(6, 9)) then
    TransferBones()
  else
    GrabBones();
end;

function ShouldDepositCoins(): Boolean;
var
  Coins: Int32 := Inventory.CountItemStack('Coins');
begin
  if (Coins > 10000) then
    Exit(True);

  if (Coins > 6000) and SRL.Dice(5) then
    Exit(True);

  Exit(False);
end;

procedure DepositOrbs();
begin
  RSW.WalkBlind([DepositHole.Coordinates[0].X, DepositHole.Coordinates[0].Y+4]);
  DepositHole.Click();
  WaitUntil(not Inventory.ContainsItem('Orb'), 250, 35250);
end;

function WaitEnchant(Dragonstones: Boolean = False): Boolean;
begin
  Antiban.DoAntiban(False, False);
  if Dragonstones then
    Result := Inventory.ContainsItem('Dragonstone')
  else
    Result := Inventory.ContainsItem('Cube');
end;

function CountCubes(): Int32;
begin
  Result := Inventory.CountItem('Cube');
end;

procedure EnchantItems(Dragonstones: Boolean = False);
begin
  Magic.CastSpell(EnchantSpell);
  WaitEx(250, 225);

  if Dragonstones then
  begin
    Inventory.ClickItem('Dragonstone', '>');
    WaitUntil(not WaitEnchant(True), 250, 6975);
  end else
  begin
    Inventory.ClickItem('Cube', '>');
    WaitUntil(not WaitEnchant(False), 250, 139420);
  end;
end;

(* Credit: Slacky ~ https://pastebin.com/Ut2NkjRT *)
function GetItemPrices(): TIntegerArray;
var
  ValueBox: TBox := [490, 98, 517, 211];
  Filter: TOCRColorFilter;
  ATPA: T2DPointArray;
  TPA: TPointArray;
  Scanned: String;
  SearchBox: TBox;
  i, n: Int32;
begin
    Filter := TOCRColorFilter.Create([45620], [30]);
    SRL.FindColors(TPA, CTS2(45620, 6, 0.14, 0.01), ValueBox);
    ATPA := TPA.Cluster(20, 2);

    if ATPA.Len() = 0 then
      Exit();

    ATPA.SortByX(True);
    ATPA.SortByY(True);

    for i :=0 to High(ATPA) do
    begin
      SearchBox := ATPA[i].Bounds().Expand(2);
      Scanned := OCR.Recognize(SearchBox, Filter, RS_FONT_PLAIN_11);
      try
        n := StrToInt(Scanned);
      except
        n := 0;
      end;
      Result += n;
    end;
end;

function GetHighestValueSlot(): Int32;
var
  SortedValues: TIntegerArray := [30, 15, 8, 5, 1];
  CurrentValues, Order, Slots: TIntegerArray;
  i, j, f: Int32;
begin
  CurrentValues := GetItemPrices();

  for i := 0 to High(SortedValues) do
    for j := 0 to High(CurrentValues) do
      if SortedValues[i] = CurrentValues[j] then
        if Inventory.FindItem(Items[j], f) then
          Exit(f);
end;

procedure GatherItems();
var
  EmptySlots: Int32 := CountEmpties();
  Pos: TPoint := RSW.GetMyPos();
begin
  if Mainscreen.IsUpText('Take') and not Inventory.IsFull() then
  begin
    Mouse.Click(MOUSE_LEFT);
    WaitUntil(EmptySlots > CountEmpties(), 250, 4567);
    Exit();
  end;

  if Pos.DistanceTo(ShapePile.Coordinates[0]) > 18 then
    RSW.WalkBlind([380, 610]);

  ShapePile.Click();
  WaitUntil(EmptySlots > CountEmpties(), 250, 4567);
end;

function ShouldEnchant(Dragonstones: Boolean = False): Boolean;
begin
  if Dragonstones then
    Result := Inventory.CountItem('Dragonstone') > Random(6, 9)
  else
    Result := Inventory.ContainsItem('Cube') and Inventory.IsFull();
end;

procedure PlayEnchant();
begin
  if ShouldEnchant(True) then
    EnchantItems(True)
  else if ShouldEnchant(False) then
    EnchantItems(False)
  else if Inventory.IsFull() then
    DepositOrbs()
  else
    GatherItems();
end;

procedure ExitRoom(Room: EMode);
begin
  case Room of
    EMode.ALCHEMY: AlchemyExit.WalkClick();
    EMode.ENCHANT: EnchantExit.WalkClick();
    EMode.GRAVEYARD: GraveyardExit.WalkClick();
  end;

  WaitUntil(InLobby(), 250, 10000);
end;

procedure EnterRoom();
begin
  if not InLobby() then
    Exit();

  case Mode of
	  EMode.TELEKINETIC: TelekineticStatue.WalkClick();
	  EMode.GRAVEYARD: GraveyardStatue.WalkClick();
    EMode.ALCHEMY: AlchemyStatue.WalkClick();
    EMode.ENCHANT: EnchantStatue.WalkClick();
  end;

  WaitUntil(not InLobby(), 250, 8775);
end;

procedure DepositCoins();
begin
  RSW.WalkBlind([AlchemyDeposit.Coordinates[0].X, AlchemyDeposit.Coordinates[0].Y+6]);
  AlchemyDeposit.Click();
  WaitUntil(not Inventory.ContainsItem('Coins'), 250, 35250);
end;

procedure AlchItems();
var
  Slots: TIntegerArray;
  Slot, i: Int32;
begin
  if Inventory.FindItems(Items, Slots) then
    for i := 0 to SRL.NormalRange(1, Slots.Len()) do
    begin
      Antiban.DoAntiban();

      if not Magic.CastSpell(ERSSpell.HIGH_LEVEL_ALCHEMY) then
        Continue();

      WaitEx(650, 325);
      Slot := GetHighestValueSlot();
      Inventory.ClickSlot(Slot, '>');
      WaitEx(2150, 525);
    end;
end;

function TakeFromCupboard(CupboardTile: TPoint): Boolean;
var
  EmptySlots: Int32 := CountEmpties();
  Rect: TRectangle;
  TPA: TPointArray;
  Bds: TBox;
begin
    Rect := RSW.GetTileMS(CupboardTile, 4);
    Bds := Rect.Bounds().Expand(4);
    Bds.LimitTo(Mainscreen.Bounds());
    SRL.FindColors(TPA, CTS2(8029828, 20, 0.25, 0.13), Bds);

    if TPA.Len() = 0 then
      Exit(False);

    Mouse.HumanMove(TPA.Mean());

    if not Mainscreen.IsUpText('Cupb', 205) then
      Exit(False);

    Mouse.Click(MOUSE_RIGHT);
    ChooseOption.Select('Take-5');

    Result := WaitUntil(EmptySlots > CountEmpties(), 250, 3250);
end;

procedure GatherAlches();
var
  Cupboards: TPointArray := [[718, 652], [718, 668], [718, 684]];
  Pos: TPoint := RSW.GetMyPos();
  First: Boolean;
  i: Int32;
begin
  Cupboards.Sort(Pos);

  for i := 0 to High(Cupboards) do
  begin
    if Inventory.IsFull() then
      Exit();

    First := TakeFromCupboard(Cupboards[i]);

    if SRL.Dice(50) and First then
      TakeFromCupboard(Cupboards[i]);
  end;
end;

procedure PlayAlchemy();
begin
  if ShouldDepositCoins() then
    DepositCoins()
  else if CountEmpties() < 10 then
    AlchItems()
  else
    GatherAlches();
end;

procedure MTA();
begin
  Antiban.DoAntiban();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  CalculateXP();
  PrintProgress();
  State := GetState();

  case State of
    Estate.JOIN_TELEKINETIC: EnterRoom();
    EState.PLAY_TELEKINETIC: PlayTelekinetic();
    Estate.EXIT_TELEKINETIC: Logout.ClickLogout();

    Estate.JOIN_GRAVEYARD: EnterRoom();
    EState.PLAY_GRAVEYARD: PlayGraveyard();
    EState.EXIT_GRAVEYARD: ExitRoom(EMode.GRAVEYARD);

    Estate.JOIN_ALCHEMY: EnterRoom();
    EState.PLAY_ALCHEMY: PlayAlchemy();
    EState.EXIT_ALCHEMY: ExitRoom(EMode.ALCHEMY);

    Estate.JOIN_ENCHANT: EnterRoom();
    EState.PLAY_ENCHANT: PlayEnchant();
    EState.EXIT_ENCHANT: ExitRoom(EMode.ENCHANT);
  end;
end;

begin
  InitiateScript();
  repeat
    begin
      MTA();
      WaitEx(225, 195);
    end;
  until false;
end.