program tithe;
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 1;
end;

type
  EState = (REFILL, WATER, HARVEST, PLANT, WAIT_STATE);

const
  BREAKAFTER = 60;
  BREAKFOR   = 6;

var
  State: EState;
  Active: TPoint;
  RSW: TRSWalker;
  Barrel: TRSObject;
  F: TRSObjectFinder;
  Plants: TPointArray;
  PlantColor: TCTS2Color;
  StartXP, CurrentXP, GainedXP,
  WaterLimit, UsedWater: Int32;
  Timer, ReportTimer: TStopwatch;
  WateringCan, Seed, Fruit: TRSItem;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  if ReportTimer.ElapsedTime() < 60000 then
    Exit();

  Hours := (GetTimeRunning()/3600000);
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');
  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);

  ReportTimer.Reset();
end;

procedure CalculateXP();
var
  TempValue: Int32;
begin
  CurrentXP := XPBar.Read();
  TempValue := GainedXP;
  GainedXP  := (CurrentXP - StartXP);

  if GainedXP > TempValue then
    Timer.Reset();

  if Timer.ElapsedTime() > 300000 then
    TerminateScript('No Gained XP in 5 mins, stopping!');
end;

procedure KeyboardRotate();
var
  a: Integer;
begin
  if SRL.Dice(50) then
    a := $25
  else
    a := $27;

  Keyboard.KeyDown(a);
  Sleep(SRL.NormalRange(250, 1550));
  Keyboard.KeyUp(a);
end;

procedure PauseTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  Timer.Pause();
  t := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  Timer.Resume();
  t := Task;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(450, 2750));
end;

procedure SetupAntiban();
begin
  Antiban.Skills := [ERSSKILL.FARMING, ERSSKILL.TOTAL];
  Antiban.AddTask(ONE_MINUTE * 2,  @Mouse.RandomMovement, 1);
  Antiban.AddTask(ONE_MINUTE * 10, @Antiban.HoverMSPlayers, 1);
  Antiban.AddTask(ONE_MINUTE * 10, @Antiban.DoLoseFocus, 1);
  Antiban.AddTask(ONE_MINUTE * 6,  @Antiban.RandomRotate, 1);
  Antiban.AddTask(ONE_MINUTE * 10, @KeyboardRotate, 1);
  Antiban.AddTask(ONE_MINUTE * 8,  @Antiban.HoverMSNPCs, 1);
  Antiban.AddTask(ONE_MINUTE * 25, @Antiban.HoverSkills, 1);
  Antiban.AddBreak(BREAKAFTER * ONE_MINUTE, BREAKFOR * ONE_MINUTE, 0.3, 1);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

procedure GeneratePlantArray();
var
  x, y: Int32;
  p: TPoint;
begin
  x := 2637;
  for 1 to 2 do
  begin
    y := 2467;
    for 1 to 4 do
    begin
      Plants += Point(x, y);
      y += 12;
    end;
    x += 20;
  end;
end;

function GetTileBounds(Tile: TPoint; Height, Expansion: Int32): TBox;
var
  Rect: TRectangle;
  Bds: TBox;
begin
  Rect := RSW.GetTileMs(Tile, Height);
  Bds := Rect.Bounds().Expand(Expansion);
  Bds.LimitTo(Mainscreen.Bounds());
  Result := Bds;
end;

function IsGrown(Tile: TPoint): Boolean;
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  Bounds: TBox;
begin
  Bounds := GetTileBounds(Tile, 6, 6);
  ATPA := Mainscreen.FindObject(F, Bounds);

  if ATPA.Len < 1 then
    Exit(False);

  TPA := ATPA.Merge();
  Result := (TPA.Len() > 90);
end;

function IsDead(Tile: TPoint): Boolean;
var
  BlightedColor: TCTS2Color := CTS2(6186585, 12, 0.28, 0.27);
  Bounds: TBox;
  Amount: Int32;
begin
  Bounds := GetTileBounds(Tile, 0, 2);
  Amount := SRL.CountColor(BlightedColor, Bounds);
  Result := (Amount > 2);
end;

function ShouldRefill(): Boolean;
begin
  Result := (UsedWater > WaterLimit);
end;

function IsFree(Tile: TPoint): Boolean;
var
  Bounds: TBox;
  Amount: Int32;
begin
  Bounds := GetTileBounds(Tile, 0, 1);
  Amount := SRL.CountColor(PlantColor, Bounds);
  Result := (Amount = 0);
end;

function IsWatered(Tile: TPoint): Boolean;
var
  WaterColor: TCTS2Color := CTS2(5797500, 1, 0.01, 0.01);
  Amount: Int32;
  Bounds: TBox;
begin
  Bounds := GetTileBounds(Tile, 0, 5);
  Amount := SRL.CountColor(WaterColor, Bounds);
  Result := (Amount > 3);
end;

function NeedsWatering(Tile: TPoint): Boolean;
begin
  if IsFree(Tile) then
    Exit(False);

  if IsGrown(Tile) then
    Exit(False);

  if IsDead(Tile) then
    Exit(False);

  Result := not IsWatered(Tile);
end;

function AnyNeedsWatering(): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Plants) do
  begin
    Active := Plants[i];
    if NeedsWatering(Active) then
      Exit(True)
  end;

  Exit(False);
end;

function AnyIsGrown(): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Plants) do
  begin
    Active := Plants[i];
    if IsGrown(Active) then
      Exit(True)
  end;

  Exit(False);
end;

procedure SetupGolovanova();
begin
  WriteDebug('Setting up Golovanova. (Level 34 seed.)');
  Fruit := 'Golovanova fruit';
  PlantColor := CTS2(4479878, 18, 0.17, 0.53);
  F.Grow := 4;
  F.ClusterDistance := 20;
  F.ColorClusters += [CTS2(10426776, 3, 0.07, 1.00),
                      CTS2(6069633, 7, 0.14, 0.49), 4];
end;

procedure SetupBologano();
begin
  WriteDebug('Setting up Bologano. (Level 54 seed.)');
  Fruit := 'Bologano fruit';
  PlantColor := CTS2(11513163, 32, 0.14, 0.86);
  F.Grow := 4;
  F.ClusterDistance := 20;
  F.ColorClusters += [CTS2(10426776, 3, 0.07, 1.00),
                      CTS2(6069633, 7, 0.14, 0.49), 4];
end;

procedure SetupLogavano();
begin
  WriteDebug('Setting up Logavano. (Level 74 seed.)');
  Fruit := 'Logavano fruit';
  PlantColor := CTS2(8792460, 28, 0.09, 1.66);
  F.Grow := 4;
  F.ClusterDistance := 20;
  F.ColorClusters += [CTS2(5737591, 3, 0.12, 0.24),
                      CTS2(10558363, 2, 0.11, 0.75), 4];
end;

procedure InitiateScript();
var
  Seeds: TRSItemArray := ['Golovanova seed', 'Bologano seed', 'Logavano seed'];
  CurSeed: TRSItem;
begin
  RSW.Setup([[2500, 2300, 2800, 2600]], 2);
  GeneratePlantArray();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  WaitUntil(RSClient.IsLoggedIn(), 250, 12000);
  StartXP := XPBar.Read();

  if StartXP < 69 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  Options.SetZoomLevel(Random(18, 22));

  for CurSeed in Seeds do
    if Inventory.ContainsItem(CurSeed) then
      Seed := CurSeed;

  case Seed of
    'Golovanova seed': SetupGolovanova();
    'Bologano seed': SetupBologano();
    'Logavano seed': SetupLogavano();
  end;

  WaterLimit := Random(75, 100);

  if Inventory.ContainsItem('Gricoller' + #39 + 's can') then
  begin
    WateringCan := 'Gricoller' + #39 + 's can';
    WaterLimit := 3 * WaterLimit;
  end else
    WateringCan := 'Watering can';

  Barrel.SetupUpText(['Barrel']);
  Barrel.Setup(2, [[2629, 2459]]);
  Barrel.Finder.Colors += CTS2(7290488, 13, 2.05, 1.73);

  Mouse.Speed := SRL.NormalRange(14, 18);
  SetupAntiban();

  Timer.Start();
  ReportTimer.Start();
end;

function GetClosestFreeSpot(): TPoint;
var
  i: Int32;
begin
  for i := 0 to High(Plants) do
    if IsFree(Plants[i]) then
      Exit(Plants[i]);
end;

procedure WaterPlant();
var
  Bounds: TBox;
begin
  if Mainscreen.IsUpText('>') then
  begin
    WriteDebug('Uptext > detected, trying to close.');
    ChooseOption.Select('Cancel');
  end;

  Bounds := GetTileBounds(Active, 2, 0);
  Mouse.HumanMove(Bounds.Center());

  if not Mainscreen.IsUpText('Water', 375) then
  begin
    WriteDebug('Failed to Water!');
    Antiban.RandomRotate();
    Exit();
  end;

  Mouse.Click(MOUSE_LEFT);

  if not WaitUntil(IsWatered(Active), 250, 4575) then
    Exit();

  Inc(UsedWater);
end;

procedure HarvestPlant();
var
  Pos: TPoint := RSW.GetMyPos();
  SortedPlants: TPointArray;
  Bounds: TBox;
  Fruits: Int32;
begin
  if Mainscreen.IsUpText('>') then
  begin
    WriteDebug('Uptext > detected, trying to close.');
    ChooseOption.Select('Cancel');
  end;

  Fruits := Inventory.CountItemStack(Fruit);
  Bounds := GetTileBounds(Active, 2, 0);
  Mouse.HumanMove(Bounds.Center());

  if not Mainscreen.IsUpText(['vest', 'Harv'], 375) then
  begin
    WriteDebug('Failed to Harvest!');
    Antiban.RandomRotate();
    Exit();
  end;

  Mouse.Click(MOUSE_LEFT);

  if not WaitUntil(Fruits < Inventory.CountItemStack(Fruit), 250, 4575) then
    WriteDebug('Failed to harvest!');
end;

procedure Fertilise(Tile: TPoint);
var
  Bucket: TRSItem := 'Gricoller' + #39 + 's fertiliser';
  Fruits: Int32;
  Bounds: TBox;
begin
  if Mainscreen.IsUpText('>') then
  begin
    WriteDebug('Uptext > detected, trying to close.');
    ChooseOption.Select('Cancel');
  end;

  if not Inventory.ClickItem(Bucket) then
    Exit();

  WaitEx(225, 200);
  Bounds := GetTileBounds(Tile, 0, 1);
  Mouse.HumanMove(Bounds.Center());

  if not Mainscreen.IsUpText('seedling', 225) then
  begin
    WriteDebug('Failed to Fertilise!');
    Exit();
  end;

  Mouse.Click(MOUSE_LEFT);
  WaitEx(1375, 325);
end;

function AllSpotsCleared(): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Plants) do
    if not IsFree(Plants[i]) then
      Exit(False);

  Exit(True);
end;

procedure PlantSeed();
var
  Area: TBox := [2636, 2462, 2658, 2509];
  Pos: TPoint := RSW.GetMyPos();
  Bounds: TBox;
  Seeds: Int32;
begin
  if Mainscreen.IsUpText('>') then
  begin
    WriteDebug('Uptext > detected, trying to close.');
    ChooseOption.Select('Cancel');
  end;

  if not Pos.InBox(Area) then
    RSW.WalkBlind(Area.Center());

  Active := GetClosestFreeSpot();
  Seeds := Inventory.CountItemStack(Seed);

  if not Inventory.ClickItem(Seed) then
    Exit();

  Bounds := GetTileBounds(Active, 0, 0);
  Mouse.HumanMove(Bounds.Center());

  if not Mainscreen.IsUpText('> Tit', 225) then
  begin
    WriteDebug('Failed to Plant!');
    Exit();
  end;

  Mouse.Click(MOUSE_LEFT);

  if WaitUntil(Seeds > Inventory.CountItemStack(Seed), 250, 4575) then
    Fertilise(Active);
end;

procedure RefillCans();
var
  Pos: TPoint := RSW.GetMyPos();
  Bounds: TBox;
begin
  WriteDebug('Starting to fill watering can(s).');

  if Pos.DistanceTo(Barrel.Coordinates[0]) > 24 then
    RSW.WalkBlind(Barrel.Coordinates[0]);

  if not Barrel.IsVisible() then
    Exit();

  if not Inventory.SetSelectedItem(WateringCan) then
    Exit();

  Bounds := GetTileBounds(Barrel.Coordinates[0], 2, 0);
  Mouse.HumanMove(Bounds.Center());

  if not Mainscreen.IsUpText('Barr') then
    Exit();

  Mouse.Click(MOUSE_LEFT);

  if WateringCan = 'Watering can' then
    WaitUntil(not Inventory.ContainsItem(WateringCan), 250, 180000)
  else
    WaitEx(5575, 2275);

  UsedWater := 0;
  Antiban.DoAntiban();
end;

function GetState(): EState;
var
  Pos: TPoint := RSW.GetMyPos();
begin
  Plants.Sort(Pos);

  if ShouldRefill() then
    if AllSpotsCleared() then
      Exit(REFILL)
    else
      Exit(WAIT_STATE);

  if AnyNeedsWatering() then
    Exit(WATER);

  if AnyIsGrown() then
    Exit(HARVEST);

  if not ShouldRefill() then
    Exit(PLANT);
end;

procedure Farm();
begin
  State := GetState();
  case State of
    WAIT_STATE: Wait(999);
    HARVEST: HarvestPlant();
    REFILL: RefillCans();
    PLANT: PlantSeed();
    WATER: WaterPlant();
  end;
end;

procedure Tithe();
begin
  Antiban.DoAntiban(False, False);

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  CalculateXP();
  PrintProgress();
  Farm();
  WaitEx(100, 95);
end;

begin
  InitiateScript();
  repeat
    Tithe();
  until false;
end.