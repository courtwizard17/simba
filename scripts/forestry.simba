program forestry;
{$I WaspLib/osr.simba}
{$I ../Includes/BirdhouseInclude.simba}

begin
  Login.PlayerIndex := 0;
end;

type
  EWOODTYPES = (NORMAL, OAK, WILLOW, MAPLE, YEW, MAGE);

const
  WOOD: EWOODTYPES = WILLOW;

  BREAKAFTER  = 60;
  BREAKFOR    = 6;

  BIRDHOUSES  = False;
  INTERVAL    = 50 * ONE_MINUTE;
  SEED        = 'Hammerstone seed';

var
  Timer, ReportTimer: TStopwatch;
  StartXP, CurrentXP, GainedXP,
  LogsChopped, WaitTime: Int32;
  Finder: TRSObjectFinder;
  BankObject: TRSObject;
  LogItem: TRSBankItem;
  UpText: TStringArray;
  BHLogs: ERSLogType;
  ChoppingArea: TBox;
  WalkTile: TPoint;
  RSW: TRSWalker;
  Log: TRSItem;

function Fantiban(): Boolean;
begin
  Antiban.DoAntiban(False, False);
  Result := False;
end;

procedure TakeScreenshot();
var
  i: Int32;
begin
  CreateDirectory('Forestry/');
  i := Length(GetFiles('Forestry', 'png'));
  SaveScreenshot('Forestry/Info' + IntToStr(i) + '.png');
end;

procedure CalculateXP();
var
  TempValue: Int32;
begin
  CurrentXP := XPBar.Read();
  TempValue := GainedXP;
  GainedXP  := (CurrentXP - StartXP);

  if GainedXP > TempValue then
    Timer.Reset();

  if Timer.ElapsedTime > 300000 then
  begin
    TakeScreenshot();
    TerminateScript('No Gained XP in 5 mins, stopping!');
  end;
end;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  if ReportTimer.ElapsedTime < 60000 then
    Exit();

  Hours := (GetTimeRunning()/3600000);
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');
  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);

  ReportTimer.Reset();
end;

procedure KeyboardRotate();
var
  a: Integer;
begin
  if SRL.Dice(50) then
    a := $25
  else
    a := $27;

  Keyboard.KeyDown(a);
  Sleep(SRL.NormalRange(250, 1750));
  Keyboard.KeyUp(a);
end;

procedure PauseTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  Timer.Pause;
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  Timer.Resume;
  T := Task;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(450, 2750));
end;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

procedure SetupTrees();
begin
  WalkTile := [6278, 2673];
  ChoppingArea := [6222, 2636, 6318, 2705];
  UpText := ['wn Tr', 'Tree'];
  Finder.ColorClusters += [CTS2(1794645, 6, 0.13, 1.49),
                           CTS2(2904399, 17, 0.06, 0.90), 4];
  Finder.Grow := 8;
  Finder.ClusterDistance := 1;
  Log := 'Logs';
end;

procedure SetupMaples();
begin
  WalkTile := [6308, 2448];
  ChoppingArea := [6267, 2433, 6336, 2460];
  UpText := ['wn Map', 'Maple'];

  Finder.ColorClusters += [CTS2(13908, 7, 0.37, 0.01),
                           CTS2(23438, 3, 0.74, 0.01), 4];
  Finder.Grow := 8;
  Finder.ClusterDistance := 1;

  Log := 'Maple logs';
  WaitTime := 55000;
end;

procedure SetupWillows();
begin
  WalkTile := [6248, 2404];
  ChoppingArea := [6202, 2386, 6255, 2422];
  UpText := ['wn Wi', 'Willow'];

  Finder.ColorClusters += [CTS2(3630179, 5, 0.79, 1.37),
                           CTS2(2970449, 2, 1.72, 4.01), 2];
  Finder.Grow := 6;
  Finder.ClusterDistance := 1;
  Log := 'Willow logs';
  WaitTime := 40000;
end;

procedure SetupYews();
begin
  WalkTile := [6445, 2728];
  ChoppingArea := [6400, 2708, 6468, 2748];
  UpText := ['wn Yew', 'Yew'];

  Finder.ColorClusters += [CTS2(1919809, 4, 0.52, 1.79),
                           CTS2(1730145, 15, 0.08, 2.88), 3];
  Finder.Grow := 6;
  Finder.ClusterDistance := 1;
  Log := 'Yew logs';
  WaitTime := 93000;

  BankObject.Setup(6, [[6629, 2679]]);
  BankObject.Finder.Colors += CTS2(3234414, 8, 0.18, 5.08);
end;

procedure SetupOaks();
begin
  WalkTile := [6268, 2528];
  ChoppingArea := [6264, 2513, 6295, 2540];
  UpText := ['wn Oa', 'Oak'];

  Finder.ColorClusters += [CTS2(1794645, 6, 0.13, 1.49),
                           CTS2(2904399, 17, 0.06, 0.90), 4];
  Finder.Grow := 8;
  Finder.ClusterDistance := 1;
  Log := 'Oak logs';
  WaitTime := 15000;
end;

procedure SetupMagics();
begin
  WalkTile := [6168, 2748];
  ChoppingArea := [6136, 2720, 6193, 2760];
  UpText := ['wn Magic', 'Magic'];

  Finder.ColorClusters += [CTS2(3695708, 4, 0.27, 2.85),
                           CTS2(8639705, 22, 0.01, 1.73), 4];
  Finder.Grow := 8;
  Finder.ClusterDistance := 1;
  Log := 'Magic logs';
  WaitTime := 98750;

  BankObject.Setup(6, [[6629, 2679]]);
  BankObject.Finder.Colors += CTS2(3234414, 8, 0.18, 5.08);
end;

procedure SetupAntiban();
begin
  Antiban.Skills := [ERSSKILL.WOODCUTTING, ERSSKILL.TOTAL];
  Antiban.AddTask(ONE_MINUTE*2,   @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE*6,   @Antiban.HoverMSPlayers);
  Antiban.AddTask(ONE_MINUTE*3,   @Antiban.DoLoseFocus);
  Antiban.AddTask(ONE_MINUTE*7,   @Antiban.RandomRotate);
  Antiban.AddTask(ONE_MINUTE*7,   @KeyboardRotate);
  Antiban.AddTask(ONE_MINUTE*8,   @Antiban.HoverMSNPCs);
  Antiban.AddTask(ONE_MINUTE*25,  @Antiban.HoverSkills);
  Antiban.AddBreak(BREAKAFTER * ONE_MINUTE, BREAKFOR * ONE_MINUTE, 0.3, 1);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

function FindTree(ATPA: T2DPointArray): Boolean;
var
  TPA: TPointArray;
begin
  ATPA.SortByMiddle(Mainscreen.GetPlayerBox.Center());

  for TPA in ATPA do
  begin
    Mouse.HumanMove(TPA.Mean());
    if Mainscreen.IsUpText(UpText, 175) then
      Exit(True);
  end;

  Exit(False);
end;

function IsAnimating(): Boolean;
var
  t: TCountdown;
begin
  t.Init(SRL.NormalRange(1850, 2550));
  while not t.IsFinished() do
    if SRL.PercentShift(MainScreen.GetPlayerBox(), 325) > 8 then
      Exit(True);

  WriteDebug('Stopped animating.');
  Exit(False);
end;

procedure WaitChopping();
var
  RandomizedWaitTime: Int32;
begin
  RandomizedWaitTime := Floor(SRL.SkewedRand(WaitTime, WaitTime*0.7, WaitTime*1.3));
  WaitUntil(Fantiban() or not IsAnimating() or Inventory.IsFull(), 250, RandomizedWaitTime);
end;

procedure GatherLogs();
var
  Pos: TPoint := RSW.GetMyPos();
  ATPA: T2DPointArray;
  Found: Boolean;
begin
  if not ChoppingArea.Contains(Pos) then
    RSW.WalkBlind(Walktile);

  ATPA := Mainscreen.FindObject(Finder);

  if ATPA.Len < 1 then
    Exit();

  ATPA.FilterSize(300, 7525);
  RSClient.Image.DrawATPA(ATPA);
  Found := FindTree(ATPA);
  RSClient.Image.Clear();

  if Found then
  begin
    Mouse.Click(MOUSE_LEFT);
    if Wood = EWOODTYPES.NORMAL then
      XPBar.WaitXp(15750)
    else
    begin
       if XPBar.WaitXP(32575) then
        WaitChopping();
    end;
  end else
    KeyboardRotate();
end;

(*
  Events:

  Anima-infused greenish color: CTS2(6790477, 21, 0.03, 0.57)
  Anima-infused root brown color: CTS2(4149848, 3, 0.13, 0.43)

  Unfinished beehive light brown log: CTS2(5864334, 2, 0.09, 0.58)
  Unfinished beehive dark brown log: CTS2(5133675, 2, 0.29, 0.25)

  Rainbow Purple: CTS2(9654401, 3, 0.96, 3.63)
  Rainbow Blue: CTS2(11245898, 2, 0.95, 2.78)
  Green guy's hat: CTS2(2782783, 5, 0.13, 1.46)
*)

procedure DepositLogs();
var
  t: Int32;
begin
  BankObject.WalkClick();
  WaitUntil(Bank.IsOpen(), 250, 8000);

  if not Bank.IsOpen() then
    Exit();

  if Bank.IsOpen() then
  begin
    t := Inventory.CountItem(Log);
    Bank.DepositAll();
    WaitEx(575, 225);
    Bank.Close(50);
    WaitEx(575, 225);

    LogsChopped += t;

    WriteDebug(ToStr('Logs banked: ', LogsChopped));
  end;
end;

function ShouldDeposit(): Boolean;
begin
  if Inventory.ContainsAny(['Bird nest', 'Feather']) then
    Exit(True);

  if Inventory.IsFull() then
    Exit(True);

  Exit(False);
end;

procedure InitiateScript();
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  WaitUntil(RSClient.IsLoggedIn(), 250, 12000);

  if BIRDHOUSES then
  begin
    BHLogs := BirdHouseRunner.GetLogForHunterLevel(Stats.GetLevel(ERSSkill.HUNTER, False));
    WriteDebug(ToStr('Logtype for birdhouses based on level: ', ToStr(BHLogs)));
    BirdHouseRunner.Setup(BHLogs, SEED, False, INTERVAL, False);
    BirdHouseRunner.Init();
  end;

  StartXP := XPBar.Read();

  if StartXP < 1 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  Options.SetNPCAttackOption(ERSAttackOption.HIDDEN);
  Options.SetZoomLevel(Random(10, 16));

  RSW.SetupRegion([6000, 2200, 8000, 5000], 5);
  SetupAntiban();
  BankObject.SetupUpText(['nk boo','Bank booth']);
  BankObject.Setup(6, [[6288, 2471]]);
  BankObject.Finder.Colors += CTS2(6980239, 12, 0.03, 0.78);

  case WOOD of
    NORMAL: SetupTrees();
    OAK: SetupOaks();
    WILLOW: SetupWillows();
    MAPLE: SetupMaples();
    YEW: SetupYews();
    MAGE: SetupMagics();
  end;

  LogItem := TRSBankItem.Setup(Log, Bank.QUANTITY_ALL, False);
  Mouse.Speed := SRL.NormalRange(12, 18);

  Timer.Start();
  ReportTimer.Start();
end;

procedure Cut();
begin
  Antiban.DoAntiban();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if Mainscreen.HasInterface() then
    Mainscreen.CloseInterface();

  CalculateXP();

  if ReportTimer.ElapsedTime > 60000 then
    PrintProgress();

  if BIRDHOUSES then
    if BirdhouseRunner.CanDoBirdHouseRun() then
      BirdhouseRunner.DoBirdHouseRun();

  if ShouldDeposit() then
    DepositLogs()
  else
    GatherLogs();
end;

function TBirdHouseInclude.OnStart() : Boolean; override;
var
  i, j: Int32;
  bankTimeout : TCountdown;
  RuneBankItem: TRSBankItem;
  RuneArray: TRSItemArray := ['Law rune', 'Air rune'];
begin
  WriteLn("Starting a birdhouse run.");

  for i := 0 to High(Antiban.Tasks) do
    Antiban.Tasks[i].Countdown.Pause();

  bankTimeout.Init(60000);

  while not bankTimeOut.IsFinished() and not Bank.IsOpen() do
  begin
    BankObject.WalkClick();
    WaitUntil(Bank.IsOpen(), 250, 4000);
  end;

  if not Bank.IsOpen() then
  begin
    Self.DebugLn("Failed to get to bank");
    Exit(False);
  end;

  if Inventory.CountEmptySlots() < 28 then
  begin
    Bank.DepositAll();
    WaitUntil(Inventory.CountEmptySlots() > 25, 150, 2000);

    if not Self.WithdrawNextRun() then
    begin
      Self.DebugLn("Failed to get bank items");
      Bank.DepositAll();
      Bank.Close();
      BirdhouseRunner.IsDisabled := True;
      Exit(False);
    end;

    for j := 0 to High(RuneArray) do
    begin
      RuneBankItem := TRSBankItem.Setup(RuneArray[j], 10, False);
      Bank.WithdrawItem(RuneBankItem, False);
      WaitEx(500, 450);
    end;

    WaitEx(325, 250);

    Bank.Close(60);
  end;

  Result := True;
end;

procedure TBirdHouseInclude.OnComplete(); override;
var
  i: Int32;
begin
  Self.DebugLn("Completed a birdhouse run.");

  Magic.CastSpell(ERSSpell.CAMELOT_TELEPORT);
  WaitEx(5250, 445);

  for i := 0 to High(Antiban.Tasks) do
    Antiban.Tasks[i].Countdown.Resume();
end;

begin
  InitiateScript();
  repeat
    begin
      Cut();
      WaitEx(295, 275);
    end;
  until false;
end.