program crabs;
{$I WaspLib/osr.simba}

type
  TCrabGUI = record (TScriptForm)
    BreakForInput, BreakAfterInput: TLabeledEdit;
    FoodInput, PotionInput: TLabeledCombobox;
    SingleCheckbox, DoubleCheckbox, TripleCheckbox,
    QuadCheckbox: TLabeledCheckbox;
  end;

  TSpot = record
    Tile, WalkTile: TPoint;
  end;

  EState = ( RESTOCK, RESET, IDLE, HEAL, BOOST, RETURN, TERMINATE );

var
  InactivityTimer, PotionTimer, CombatTimer, ReportTimer: TStopwatch;
  BreakFor, BreakAfter, StartXP, CurrentXP, GainedXP: Int32;
  SingleSpawn, DoubleSpawn, TripleSpawn,
  QuadSpawn, UsePotions: Boolean;
  Potion, Pot, Food: TRSItem;
  Spots: Array of TSpot;
  BankChest: TRSObject;
  RSW: TRSWalker;
  GUI: TCrabGUI;

procedure TCrabGUI.StartScript(Sender: TObject); override;
begin
  SingleSpawn := Self.SingleCheckbox.IsChecked();
  DoubleSpawn := Self.DoubleCheckbox.IsChecked();
  TripleSpawn := Self.TripleCheckbox.IsChecked();
  QuadSpawn := Self.QuadCheckbox.IsChecked();
  BreakFor := Self.BreakForInput.GetText().ExtractInteger();
  BreakAfter := Self.BreakAfterInput.GetText().ExtractInteger();
  Food := Self.FoodInput.GetText();
  Potion := Self.PotionInput.GetText() + "(4)";
  Pot := Self.PotionInput.GetText();
  inherited;
end;

procedure PauseTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  InactivityTimer.Pause;
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  InactivityTimer.Resume;
  T := Task;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(450, 2750));
end;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

procedure SetupAntiban();
begin
  Antiban.Skills := [ERSSKILL.HITPOINTS, ERSSKILL.TOTAL];
  Antiban.AddTask(ONE_MINUTE*2, @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE*6, @Antiban.HoverMSPlayers);
  Antiban.AddTask(ONE_MINUTE*3, @Antiban.DoLoseFocus);
  Antiban.AddTask(ONE_MINUTE*7, @Antiban.RandomRotate);
  Antiban.AddTask(ONE_MINUTE*8, @Antiban.HoverMSNPCs);
  Antiban.AddTask(ONE_MINUTE*25, @Antiban.HoverSkills);
  Antiban.AddBreak(BreakAfter * ONE_MINUTE, BreakFor * ONE_MINUTE, 0.3, 1);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

function HasGainedXP(): Boolean;
var
  TempValue: Int32;
begin
  CurrentXP := XPBar.Read();
  TempValue := GainedXP;
  GainedXP  := (CurrentXP - StartXP);
  Result := (GainedXP > TempValue);
end;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  Hours := (GetTimeRunning()/3600000);
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');
  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);
  ReportTimer.Reset();
end;

function ShouldTerminate(): Boolean;
begin
  if InactivityTimer.ElapsedTime() > 300000 then
  begin
    WriteDebug('We have not gained XP in 5 minutes, terminating.');
    Exit(True);
  end;

  if Chat.FindMessage('is no ammo left') then
  begin
    WriteDebug('Out of ammo, terminating.');
    Exit(True);
  end;

  if Chat.FindMessage('to cast this spell') then
  begin
    WriteDebug('Out of runes, terminating.');
    Exit(True);
  end;

  Exit(False);
end;

function InCombat(WaitTime: Int32 = 1000): Boolean;
begin
  Result := WaitUntil((Length(Mainscreen.FindHitsplats()) > 0), 250, WaitTime);
end;

procedure AddSpot(ATile, AWalkTile: TPoint);
var
  NewIndex: Int32;
begin
  NewIndex := Length(Spots);
  SetLength(Spots, NewIndex + 1);
  Spots[NewIndex].Tile := ATile;
  Spots[NewIndex].WalkTile := AWalkTile;
end;

procedure SetupSpots();
begin
  if QuadSpawn then
  begin
    WriteDebug('Adding spots with 4 spawns.');
    AddSpot([567, 933], [575, 909]);
  end;

  if TripleSpawn then
  begin
    WriteDebug('Adding spots with 3 spawns.');
    AddSpot([505, 731], [527, 729]);
    AddSpot([515, 793], [539, 781]);
    AddSpot([527, 837], [519, 861]);
    AddSpot([491, 881], [519, 861]);
  end;

  if DoubleSpawn then
  begin
    WriteDebug('Adding spots with 2 spawns.');
    AddSpot([509, 727], [519, 713]);
  end;

  if SingleSpawn then
  begin
    WriteDebug('Adding spots with 1 spawn.');
    AddSpot([519, 817], [543, 809]);
  end;

  WriteDebug(ToStr('Starting with: ', Length(Spots), ' spots.'));
end;

procedure DownloadMap(const URL, Filename: String);
var
  Client: Int32;
begin
  Client := InitializeHTTPClient(False);
  try
    GetHTTPPageEx(Client, URL, Filename);
  finally
    FreeHTTPClient(Client);
  end;
end;

procedure SetupWalker();
var
  MapURL: String := 'https://i.imgur.com/GIfgIaU.png';
begin
  if not FileExists(AppPath+'\Includes\WaspLib\osr\walker\maps\crabmap.png') then
    DownloadMap(MapURL, AppPath+'\Includes\WaspLib\osr\walker\maps\crabmap.png');

  RSW.Setup('crabmap', 2);
end;

procedure Init();
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  WaitUntil(RSClient.IsLoggedIn(), 250, 12000);

  StartXP := XPBar.Read();

  if StartXP < 1 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  Options.SetZoomLevel(Random(4, 10));
  Mouse.Speed := SRL.NormalRange(11, 18);

  SetupWalker();
  SetupAntiban();
  SetupSpots();

  if Potion = '(4)' then
  begin
    WriteDebug('Starting without potions.');
    UsePotions := False;
    PotionTimer.Pause();
  end else
  begin
    WriteDebug(ToStr('Potion: ' + Potion));
    UsePotions := True;
    PotionTimer.Start();
  end;

  with BankChest do
  begin
    Finder.Colors += CTS2(3227206, 7, 0.15, 0.39);
    Setup(2, [[285, 339]]);
    SetupUpText(['Bank chest']);
  end;

  InactivityTimer.Start();
  ReportTimer.Start();
end;

function AtValidSpot(): Boolean;
var
  S: TSpot;
begin
  for S in Spots do
    if RSW.AtTile(S.Tile, 6) then
      Exit(True);

  Exit(False);
end;

procedure WalkToSafeTile();
var
  Pos: TPoint := RSW.GetMyPos();
  SafeTile: TPoint := [(511 + Random(-8, 8)), (Pos.Y + Random(-150, -140))];
begin
  WriteDebug('Resetting aggro and taking a break if needed.');

  if RSW.WalkBlind(SafeTile) then
    Antiban.DoAntiban()
  else
    WriteDebug('Failed to walk to Safe tile!');
end;

function GetState(): EState;
var
  Pos: TPoint;
begin
  if not RSClient.IsLoggedIn() then
    Exit(IDLE);

  if Minimap.GetHPPercent() < SRL.NormalRange(40, 60) then
    if Inventory.ContainsItem(Food) then
      Exit(HEAL)
    else
      Exit(RESTOCK);

  if ShouldTerminate() then
    Exit(TERMINATE);

  if not AtValidSpot() then
    Exit(RETURN);

  if UsePotions then
    if PotionTimer.ElapsedTime() > Random(225000, 290000) then
      Exit(BOOST);

  if InCombat(14000) then
    Exit(IDLE);

  Exit(RESET);
end;

procedure EatFood();
begin
  if Inventory.ClickItem(Food) then
    WaitEx(1750, 525)
  else
    WriteDebug('Failed to eat food!');
end;

function TileStepMM(Tile: TPoint): Boolean;
var
  MMPt: TPoint := RSW.WorldToMM(Tile);
begin
  Mouse.Move(MMPt);
  Mouse.Click(MOUSE_LEFT);

  Result := WaitUntil(RSW.AtTile(Tile, 1), 250, 3350);
end;

function TileStepMS(Tile: TPoint): Boolean;
var
  Rect: TRectangle := RSW.GetTileMs(Tile);
  Bounds: TBox := Rect.Bounds();
begin
  Bounds.LimitTo(Mainscreen.Bounds());

  if Bounds.Area() = 0 then
    Exit()
  else
   Mouse.HumanMove(Bounds.Center());

  if not Mainscreen.IsUpText('Walk', 275) then
  begin
    Mouse.Click(MOUSE_RIGHT);
    WaitEx(200, 75);
    ChooseOption.Select('Walk here');
  end else
    Mouse.Click(MOUSE_LEFT);

  Result := WaitUntil(RSW.AtTile(Tile, 1), 250, 3350);
end;

function WalkToTile(Tile: TPoint): Boolean;
begin
  for 0 to 5 do
  begin
    if SRL.Dice(60) then
      Result := TileStepMS(Tile)
    else
      Result := TileStepMM(Tile);

    WaitEx(250, 125);

    if Result and RSW.AtTile(Tile, 1) then
      Exit(True)
    else
      Antiban.RandomRotate();
  end;

  WriteDebug('Failed to step on tile!');
end;

function WithdrawPotions(): Boolean;
var
  P: TRSBankItem := TRSBankItem.Setup(Potion, Random(2, 5), False);
begin
  WriteDebug('Trying to withdraw potions.');

  if not Bank.IsOpen() then
    Exit(False);

  Result := Bank.WithdrawItem(P, False);

  if Result then
    WriteDebug('Successfully withdrew potions.')
  else
    WriteDebug('Failed to withdraw potions.');
end;

function WithdrawFood(): Boolean;
var
  F: TRSBankItem := TRSBankItem.Setup(Food, Bank.QUANTITY_ALL, False);
begin
  WriteDebug('Trying to withdraw food.');

  if not Bank.IsOpen() then
    Exit(False);

  Result := Bank.WithdrawItem(F, False);

  if Result then
    WriteDebug('Successfully withdrew food.')
  else
    WriteDebug('Failed to withdraw food.');
end;

procedure DrinkPotion();
var
  i: Int32;
begin
  for i := 1 to 4 do
    if Inventory.ClickItem(Pot + '(' + ToStr(i) + ')') then
      Break();

  PotionTimer.Reset();
end;

procedure RestockSupplies();
var
  BankWalkTile: TPoint := [297, 331];
  Pos: TPoint := RSW.GetMyPos();
begin
  (* Box is the Hunter Guild Area, Point is a tile at the Gate *)
  if not Pos.InBox([263, 245, 424, 392]) then
    if not RSW.WalkBlind([459, 309]) then
      Exit();

  if not RSW.WalkBlind(BankWalkTile) then
    Exit();

  if BankChest.Click() then
    WaitUntil(Bank.IsOpen(), 250, 6250);

  if not Bank.IsOpen() then
    Exit();

  if Inventory.CountEmptySlots() < 25 then
    Bank.DepositAll();

  if UsePotions then
    for 0 to 5 do
      if WithdrawPotions() then
        Break();

  for 0 to 5 do
    if WithdrawFood() then
      Break();

  WaitEx(275, 222);

  if Bank.IsOpen() then
    Bank.Close(50);
end;

function IsOccupied(Tile: TPoint): Boolean;
var
  Pos: TPoint := RSW.GetMyPos();
  Dots: TPointArray;
  Rect: TRectangle;
  Angle: Double;
  Area: TBox;
  i: Int32;
begin
  Dots := Minimap.GetDots(ERSMinimapDot.PLAYER);

  if Dots.Len() > 0 then
    Exit(True);

  Angle := Minimap.GetCompassAngle(False);
  Area := Box(RSW.WorldToMM(Tile), 18, 18);

  Rect := [RSW.WorldToMM(Pos, [Area.X1, Area.Y1], Angle),
           RSW.WorldToMM(Pos, [Area.X2, Area.Y1], Angle),
           RSW.WorldToMM(Pos, [Area.X2, Area.Y2], Angle),
           RSW.WorldToMM(Pos, [Area.X1, Area.Y2], Angle)];

  for i := 0 to Dots.Len() - 1 do
    if Rect.Contains(Dots[i]) then
      Result := True;

  if Result then
    WriteDebug('We got crashed, moving to next spot.')
  else
    WriteDebug('No players detected around this spot.');
end;

procedure ReturnToSpots();
var
  Pos: TPoint := RSW.GetMyPos();
  Spot: TSpot;
begin
  (* Box is the Hunter Guild Area, Point is a tile at the Gate *)
  if Pos.InBox([263, 245, 424, 392]) then
    RSW.WalkBlind([459, 309]);

  for Spot in Spots do
  begin
    if RSW.WalkBlind(Spot.WalkTile) then
      WaitEx(1250, 250)
    else
      Exit();

    if IsOccupied(Spot.Tile) then
      Continue();

    if WalkToTile(Spot.Tile) then
      Exit();
  end;
end;

procedure TerminateCrabber();
begin
  if not RSClient.IsLoggedIn() then
    TerminateScript('We were not logged in, terminating instantly.');

  if InCombat(10000) then
    WalkToSafeTile()
  else if not Logout.ClickLogout() then
    Exit();

  if not WaitUntil(not InCombat(), 250, 12000) then
    Exit();

  if Logout.ClickLogout() then
    TerminateScript('Logged out successfully, terminating.');
end;


procedure Loop();
var
  State: EState;
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if RSInterface.IsOpen() then
    RSInterface.Close();

  if HasGainedXP() then
    InactivityTimer.Reset();

  if ReportTimer.ElapsedTime() > 120000 then
    PrintProgress();

  State := GetState();

  case State of
    TERMINATE: TerminateCrabber();
    RESTOCK: RestockSupplies();
    RETURN: ReturnToSpots();
    RESET: WalkToSafeTile();
    BOOST: DrinkPotion();
    IDLE: Antiban.BioWait(1750);
    HEAL: EatFood();
  end;

  Antiban.DoAntiban(False, False);
  Antiban.BioWait(65);
end;

procedure TCrabGUI.Run(); override;
var
  Tab: TTabSheet;
begin
  Self.Setup('Sand Crabs', Point(800, 500), False);
  Self.Start.SetOnClick(@Self.StartScript);
  Self.AddTab('Settings');
  Tab := Self.GetTab('Settings');

  with Self.BreakAfterInput do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(160));
    SetCaption('Break After:');
    SetText('60');
  end;

  with Self.BreakForInput do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(200));
    SetCaption('Break For:');
    SetText('20');
  end;

  with Self.SingleCheckbox do
  begin
    Create(Tab);
    SetCaption('Use spots with one crab spawn');
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(160));
  end;

  with Self.DoubleCheckbox do
  begin
    Create(Tab);
    SetCaption('Use spots with two crab spawns');
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(190));
  end;

  with Self.TripleCheckbox do
  begin
    Create(Tab);
    SetCaption('Use spots with three crab spawns');
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(220));
  end;

  with Self.QuadCheckbox do
  begin
    Create(Tab);
    SetCaption('Use spots with four crab spawns');
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(250));
  end;

  with Self.FoodInput do
  begin
    Create(Tab);
    SetCaption('Food');
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(250));
    AddItemArray(["Salmon", "Tuna", "Lobster", "Shark", "Manta ray", "Bass"]);
    SetItemIndex(0);
  end;

  with Self.PotionInput do
  begin
    Create(Tab);
    SetCaption('Potion');
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(300));
    AddItemArray(["Super combat potion", "Super attack", "Super strength", "Attack potion",
                  "Ranging potion", "Strength potion"]);
  end;

  Self.CreateAccountManager(Tab);
  inherited;
end;

begin
  GUI.Run();
  Init();

  repeat
    Loop();
  until False;
end.