program bstander;
{$I WaspLib/osr.simba}
{$I ../Includes/BHI.simba}

begin
  Login.PlayerIndex := 0;
end;

const
  BREAKAFTER  = 60;
  BREAKFOR    = 6;

  BIRDHOUSES  = True;
  INTERVAL    = 60 * ONE_MINUTE;
  SEED        = 'Potato seed';

var
  Material: TRSItem := 'Maple logs';
  Product: TRSItem := 'Maple longbow (u)';
  Tool: TRSItem := 'Knife';
  MenuSelection: Int32 := 2;

  StartXP, CurrentXP, GainedXP: Int32;
  Timer, ReportTimer: TStopwatch;
  BankObject: TRSObject;
  BHLogs: ERSLogType;
  RSW: TRSWalker;

function WaitProcessing(): Boolean;
begin
  Antiban.DoAntiban(False, False);
  Result := (not Inventory.ContainsItem(Material));
end;

procedure CalculateXP();
var
  TempValue: Int32;
begin
  CurrentXP := XPBar.Read();
  TempValue := GainedXP;
  GainedXP  := (CurrentXP - StartXP);

  if GainedXP > TempValue then
    Timer.Reset();

  if Timer.ElapsedTime > 300000 then
    TerminateScript('No Gained XP in 5 mins, stopping!');
end;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  if ReportTimer.ElapsedTime < 60000 then
    Exit();

  Hours := (GetTimeRunning()/3600000);
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');
  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);

  ReportTimer.Reset();
end;

procedure KeyboardRotate();
var
  a: Integer;
begin
  if SRL.Dice(50) then
    a := $25
  else
    a := $27;

  Keyboard.KeyDown(a);
  Sleep(SRL.NormalRange(250, 1750));
  Keyboard.KeyUp(a);
end;

procedure PauseTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  Timer.Pause;
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  Timer.Resume;
  T := Task;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(450, 2750));
end;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

procedure SetupAntiban();
begin
  Antiban.Skills := [ERSSKILL.FLETCHING, ERSSKILL.TOTAL];
  Antiban.AddTask(ONE_MINUTE*2, @Mouse.RandomMovement, 1);
  Antiban.AddTask(ONE_MINUTE*5, @Antiban.RandomRightClick, 1);
  Antiban.AddTask(ONE_MINUTE*6, @Antiban.HoverMSPlayers, 1);
  Antiban.AddTask(ONE_MINUTE*3, @Antiban.DoLoseFocus, 1);
  Antiban.AddTask(ONE_MINUTE*7, @Antiban.RandomRotate, 1);
  Antiban.AddTask(ONE_MINUTE*7, @KeyboardRotate, 1);
  Antiban.AddTask(ONE_MINUTE*8, @Antiban.HoverMSNPCs, 1);
  Antiban.AddTask(ONE_MINUTE*25, @Antiban.HoverSkills, 1);
  Antiban.AddBreak(BREAKAFTER * ONE_MINUTE, BREAKFOR * ONE_MINUTE, 0.3, 1);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

procedure InitiateScript();
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  WaitUntil(RSClient.IsLoggedIn(), 250, 12000);

  if BIRDHOUSES then
  begin
    BHLogs := BirdHouseRunner.GetLogForHunterLevel(Stats.GetLevel(ERSSkill.HUNTER, False));
    WriteDebug(ToStr('Logtype for birdhouses based on level: ', ToStr(BHLogs)));
    BirdHouseRunner.Setup(BHLogs, SEED, False, INTERVAL, False);
    BirdHouseRunner.Init();
  end;

  StartXP := XPBar.Read();

  if StartXP < 1 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  Options.SetNPCAttackOption(ERSAttackOption.HIDDEN);
  Options.SetZoomLevel(Random(10, 16));

  RSW.Setup();
  SetupAntiban();
  BankObject.SetupUpText(['chest','Bank']);
  BankObject.Setup(2, [[9366, 1076]]);
  BankObject.Finder.Colors += CTS2(464215, 5, 0.34, 3.18);

  Mouse.Speed := SRL.NormalRange(12, 18);

  Timer.Start();
  ReportTimer.Start();
end;

procedure Process();
begin
  Inventory.Use(Tool, Material);

  if not WaitUntil(Make.IsOpen(), 250, 2000) then
    Exit();

  WaitEx(555, 545);

  if Make.IsOpen() then
    Make.Select(MenuSelection, Make.QUANTITY_ALL);

  WaitUntil(WaitProcessing(), 250, 169420);
end;

procedure Restock();
var
  Pos: TPoint := RSW.GetMyPos();
  WMaterial: TRSBankWithdrawItem := [Material, 27, False];
  WTool: TRSBankWithdrawItem := [Tool, 1, False];
begin
  if Pos.DistanceTo(BankObject.Coordinates[0]) > 24 then
    RSW.WebWalk(BankObject.Coordinates[0]);

  if not Bank.IsOpen() then
    if BankObject.Click() then
      WaitUntil(Bank.IsOpen(), 250, 5000);

  WaitEx(250, 200);

  if Bank.IsOpen() then
  begin
    if not Inventory.ContainsItem(Tool) then
    begin
      Bank.DepositAll();
      Bank.WithdrawItem(WTool, False);
    end else
      Bank.DepositAllBut(0, [Tool]);

    Bank.WithdrawItem(WMaterial, False);
    WaitEx(250, 225);
    Bank.Close(60);
  end;
end;

procedure ScriptLoop();
begin
  Antiban.DoAntiban();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if Mainscreen.HasInterface() then
    Mainscreen.CloseInterface();

  CalculateXP();
  PrintProgress();

  if BIRDHOUSES then
    if BirdhouseRunner.CanDoBirdHouseRun() then
      BirdhouseRunner.DoBirdHouseRun();

  if Inventory.ContainsItem(Material) then
    Process()
  else
    Restock();

  WaitEx(295, 275);
end;

function TBirdHouseInclude.OnStart() : Boolean; override;
var
  i: Int32;
  BankTimeout: TCountdown;
begin
  WriteLn("Starting a birdhouse run.");

  for i := 0 to High(Antiban.Tasks) do
    Antiban.Tasks[i].Countdown.Pause();

  BankTimeout.Init(60000);

  while not BankTimeOut.IsFinished() and not Bank.IsOpen() do
  begin
    BankObject.WalkClick();
    WaitUntil(Bank.IsOpen(), 250, 4000);
  end;

  if not Bank.IsOpen() then
  begin
    Self.DebugLn("Failed to get to bank");
    Exit(False);
  end;

  if Inventory.CountEmptySlots() < 28 then
  begin
    Bank.DepositAll();
    WaitUntil(Inventory.CountEmptySlots() > 25, 150, 2000);

    if not Self.WithdrawNextRun() then
    begin
      Self.DebugLn("Failed to get bank items");
      Bank.DepositAll();
      Bank.Close();
      BirdhouseRunner.IsDisabled := True;
      Exit(False);
    end;

    WaitEx(325, 250);
    Bank.Close(60);
  end;

  Result := True;
end;

procedure TBirdHouseInclude.OnComplete(); override;
var
  i: Int32;
begin
  Self.DebugLn("Completed a birdhouse run.");

  for i := 0 to High(Antiban.Tasks) do
    Antiban.Tasks[i].Countdown.Resume();
end;

begin
  InitiateScript();
  repeat
    ScriptLoop();
  until false;
end.