program agility;
{$I WaspLib/osr.simba}
{$I ../Includes/BHI.simba}

begin
  Login.PlayerIndex := 0;
end;

type
  ECourse = (SEERS, FALLY, DRAYNOR, VARRO, POLLNIV, ARDY);

const
  COURSE     = ARDY;
  BREAKAFTER = 40;
  BREAKFOR   = 8;

  BHRUNS     = True;
  INTERVAL   = 40* ONE_MINUTE;
  SEED       = 'Hammerstone seed';

  EXTRA_ANTIBAN = True; (* Adds longer wait times and short breaks, "non-focused player" *)

type
  TObstacle = record
    Index: Int32;
    Tile, WalkTile: TPoint;
    UpText: TStringArray;
    Area: TBox;
    Color: TCTS2Color;
    Height, Wait: Int32;
  end;

var
  StartXP, CurrentXP, GainedXP, Marks,
  WaitRand, Step, WaitTime: Int32;
  Timer, ReportTimer: TStopwatch;
  Obstacles: Array of TObstacle;
  RuneArray: TRSItemArray;
  AgilityRSW: TRSWalker;
  BankObject: TRSObject;
  ReturnSpell: ERSSpell;
  Birdhouses: Boolean;
  Logs: ERSLogType;
  Food: TRSItem;

procedure PauseTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  Timer.Pause();
  t := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  Timer.Resume();
  t := Task;
end;

procedure CalculateXP();
var
  TempValue: Int32;
begin
  CurrentXP := XPBar.Read();
  TempValue := GainedXP;
  GainedXP  := (CurrentXP - StartXP);

  if GainedXP > TempValue then
    Timer.Reset();

  if Timer.ElapsedTime() > 300000 then
    TerminateScript('No Gained XP in 5 mins, stopping!');
end;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  if ReportTimer.ElapsedTime() < 60000 then
    Exit();

  Hours := (GetTimeRunning()/3600000);
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');
  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);

  ReportTimer.Reset();
end;

procedure KeyboardRotate();
var
  a: Integer;
begin
  if SRL.Dice(50) then
    a := $25
  else
    a := $27;

  Keyboard.KeyDown(a);
  Sleep(SRL.NormalRange(250, 1550));
  Keyboard.KeyUp(a);
end;

procedure HealthManagement();
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  if Minimap.GetHPPercent() > 40 then
    Exit();

  if Inventory.ContainsItem(Food) then
    Inventory.ClickItem(Food)
  else
    TerminateScript('Could not eat food, possible out of it?');
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(250, 1900));
end;

function TRectangle.RandomMean(): TPoint;
var
  centerX, centerY, randX, randY: Double;
begin
  centerX := Self.Mean().X;
  centerY := Self.Mean().Y;

  randX := Self.Left.X + Random * (Self.Right.X - Self.Left.X);
  randY := Self.Top.Y + Random * (Self.Btm.Y - Self.Top.Y);

  Result.X := Trunc((centerX + randX) / 2);
  Result.Y := Trunc((centerY + randY) / 2);
end;

procedure SetupAntiban();
begin
  Antiban.Skills := [ERSSKILL.AGILITY, ERSSKILL.TOTAL];
  Antiban.AddTask(ONE_MINUTE * 2, @Mouse.RandomMovement, 1);
  Antiban.AddTask(ONE_MINUTE * 9, @Antiban.HoverMSPlayers, 1);
  Antiban.AddTask(ONE_MINUTE * 5, @Antiban.DoLoseFocus, 1);
  Antiban.AddTask(ONE_MINUTE * 9, @Antiban.RandomRotate, 1);
  Antiban.AddTask(ONE_MINUTE * 9, @KeyboardRotate, 1);
  Antiban.AddTask(ONE_MINUTE * 9, @Antiban.HoverMSNPCs, 1);
  Antiban.AddTask(ONE_MINUTE * 25, @Antiban.HoverSkills, 1);

  if EXTRA_ANTIBAN then
    Antiban.AddBreak(ONE_SECOND * 100, ONE_SECOND * 15, 1, 0);

  Antiban.AddBreak(BREAKAFTER * ONE_MINUTE, BREAKFOR * ONE_MINUTE, 0.3, 1);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

procedure SetupDraynor();
var
  DraynorCityBox: TBox := [7500, 3200, 8564, 3721];
  CourseAreaBox: TBox := [175, 4265, 400, 4500];
begin
  SetLength(Obstacles, 7);

  with Obstacles[0] do
  begin
    Index := 0;
    Tile := [7804, 3332];
    WalkTile := [7808, 3336];
    UpText := ['Rough', 'wall'];
    Area := DraynorCityBox;
    Height := 2;
  end;
  with Obstacles[1] do
  begin
    Index := 1;
    Tile := [276, 4322];
    UpText := ['Cross', 'ight'];
    Area := [270, 4302, 300, 4326];
    Wait := 720;
  end;
  with Obstacles[2] do
  begin
    Index := 2;
    Tile := [252, 4326];
    UpText := ['Cross', 'ight'];
    Area := [222, 4309, 270, 4346];
    Wait := 720;
  end;
  with Obstacles[3] do
  begin
    Index := 3;
    Tile := [240, 4374];
    UpText := ['Balance'];
    Color := CTS2(15685, 1, 0.01, 0.01);
    Area := [236, 4354, 267, 4375];
    Height := -2;
  end;
  with Obstacles[4] do
  begin
    Index := 4;
    Tile := [236, 4408];
    UpText := ['ump'];
    Area := [228, 4382, 241, 4408];
    Height := 2;
  end;
  with Obstacles[5] do
  begin
    Index := 5;
    Tile := [264, 4410];
    UpText := ['Jump'];
    Area := [229, 4406, 265, 4413];
  end;
  with Obstacles[6] do
  begin
    Index := 6;
    Tile := [292, 4386];
    UpText := ['down'];
    Area := [264, 4381, 300, 4415];
  end;

  AgilityRSW.SetupRegions([DraynorCityBox, CourseAreaBox]);

  BankObject.SetupUpText(['Bank','Bank booth']);
  BankObject.Setup(6, [[7756, 3468]]);
  BankObject.Finder.Colors += CTS2(3822977, 15, 0.45, 2.38);
  RuneArray := ['Law rune', 'Earth rune', 'Air rune'];
  ReturnSpell := ERSSpell.LUMBRIDGE_TELEPORT;
end;

procedure SetupPollniv();
var
  PollnivCityBox: TBox := [8643, 4375, 9066, 4744];
  CourseAreaBox: TBox := [60, 4500, 1400, 5400];
begin
  SetLength(Obstacles, 9);

  with Obstacles[0] do
  begin
    Index := 0;
    Tile := [8796, 4600];
    WalkTile := [8816, 4596];
    UpText := ['Basket'];
    Area := PollnivCityBox;
  end;
  with Obstacles[1] do
  begin
    Index := 1;
    Tile := [1028, 4742];
    UpText := ['Jump'];
    Area := [1007, 4745, 1048, 4782];
    Height := -2;
  end;
  with Obstacles[2] do
  begin
    Index := 2;
    Tile := [1054, 4714];
    UpText := ['Banner'];
    Area := [1032, 4714, 1060, 4741];
  end;
  with Obstacles[3] do
  begin
    Index := 3;
    Tile := [1082, 4716];
    UpText := ['Leap'];
    Area := [1065, 4704, 1087, 4721];
  end;
  with Obstacles[4] do
  begin
    Index := 4;
    Tile := [1098, 4716];
    UpText := ['ump'];
    Area := [1090, 4716, 1114, 4733];
    Height := 2;
  end;
  with Obstacles[5] do
  begin
    Index := 5;
    Tile := [1090, 4694];
    UpText := ['Climb'];
    Area := [1080, 4677, 1115, 4703];
    Height := 2;
  end;
  with Obstacles[6] do
  begin
    Index := 6;
    Tile := [906, 4948];
    UpText := ['Monkey'];
    Area := [877, 4940, 948, 4977];
    Height := 2;
  end;
  with Obstacles[7] do
  begin
    Index := 7;
    Tile := [914, 4900];
    UpText := ['ump'];
    Area := [887, 4900, 966, 4937];
    Height := -2;
  end;
  with Obstacles[8] do
  begin
    Index := 8;
    Tile := [926, 4884];
    UpText := ['Drying'];
    Area := [888, 4866, 931, 4899];
    Height := -2;
  end;

  AgilityRSW.SetupRegions([PollnivCityBox, CourseAreaBox]);
end;

procedure SetupArdy();
var
  ArdougneCityBox: TBox := [5600, 3000, 6500, 3500];
  CourseAreaBox: TBox := [500, 5000, 800, 5200];
begin
  SetLength(Obstacles, 7);

  with Obstacles[0] do
  begin
    Index := 0;
    Tile := [6084, 3256];
    WalkTile := [6080, 3260];
    UpText := ['p Wo', 'den Be', 'Wooden', 'Beams'];
    Area := [5892, 3114, 6162, 3382];
  end;
  with Obstacles[1] do
  begin
    Index := 1;
    Tile := [718, 5118];
    UpText := ['ump', 'Gap'];
    Area := [715, 5113, 734, 5170];
  end;
  with Obstacles[2] do
  begin
    Index := 2;
    Tile := [682, 5086];
    Color := CTS2(6058880, 8, 0.07, 0.05);
    UpText := ['lk-on', 'Plan'];
    Area := [677, 5080, 709, 5097];
  end;
  with Obstacles[3] do
  begin
    Index := 3;
    Tile := [648, 5088];
    UpText := ['ump', 'Gap'];
    Area := [648, 5080, 675, 5096];
  end;
  with Obstacles[4] do
  begin
    Index := 4;
    Tile := [648, 5122];
    UpText := ['ump', 'Gap'];
    Area := [643, 5100, 656, 5123];
  end;
  with Obstacles[5] do
  begin
    Index := 5;
    Tile := [652, 5159];
    UpText := ['Balance', 'ce-ac', 'Steep', 'eep ro'];
    Area := [636, 5120, 664, 5164];
  end;
  with Obstacles[6] do
  begin
    Index := 6;
    Tile := [662, 5174];
    UpText := ['ump', 'Gap'];
    Area := [647, 5168, 673, 5181];
  end;

  AgilityRSW.SetupRegions([ArdougneCityBox, CourseAreaBox]);

  BankObject.SetupUpText(['Bank','Bank booth']);
  BankObject.Setup(6, [[6016, 3304]]);
  BankObject.Finder.Colors += CTS2(6251367, 1, 1.67, 1.48);
  RuneArray := ['Law rune', 'Water rune'];
  ReturnSpell := ERSSpell.ARDOUGNE_TELEPORT;
end;


procedure SetupVarrock();
var
  VarrockCityBox: TBox := [7900, 2300, 9000, 3000];
  CourseAreaBox: TBox := [50, 4000, 1410, 5700];
begin
  SetLength(Obstacles, 9);

  with Obstacles[0] do
  begin
    Index := 0;
    Tile := [8276, 2792];
    WalkTile := [8276, 2792];
    UpText := ['Climb R', 'ough'];
    Height := 2;
    Area := VarrockCityBox;
  end;
  with Obstacles[1] do
  begin
    Index := 1;
    Tile := [306, 4908];
    UpText := ['Cross', 'othe'];
    Height := 0;
    Area := [302, 4882, 346, 4931];
  end;
  with Obstacles[2] do
  begin
    Index := 2;
    Tile := [254, 4900];
    Height := 0;
    UpText := ['Leap', 'eap G'];
    Area := [253, 4877, 291, 4913];
  end;
  with Obstacles[3] do
  begin
    Index := 3;
    Height := 0;
    Tile := [582, 4906];
    UpText := ['Balance W', 'ce W'];
    Area := [578, 4894, 620, 4924];
  end;
  with Obstacles[4] do
  begin
    Index := 4;
    Height := 0;
    Tile := [238, 4960];
    UpText := ['Leap', 'Gap'];
    Area := [212, 4932, 254, 4961];
  end;
  with Obstacles[5] do
  begin
    Index := 5;
    Height := 0;
    Tile := [290, 4964];
    UpText := ['Leap', 'Gap'];
    Area := [165, 4951, 300, 5069];
  end;
  with Obstacles[6] do
  begin
    Index := 6;
    Height := 0;
    Tile := [386, 4956];
    UpText := ['eap', 'Gap'];
    Area := [301, 4935, 395, 5020];
  end;
  with Obstacles[7] do
  begin
    Index := 7;
    Height := 2;
    Tile := [406, 4928];
    UpText := ['Hurdle', 'edge'];
    Area := [390, 4932, 426, 5000];
  end;
  with Obstacles[8] do
  begin
    Index := 8;
    Tile := [402, 4900];
    Height := 0;
    UpText := ['ump-', 'Edge'];
    Area := [386, 4891, 435, 4929];
  end;

  AgilityRSW.SetupRegions([VarrockCityBox, CourseAreaBox]);

  BankObject.SetupUpText(['Bank','Bank booth']);
  BankObject.Setup(6, [[8136, 2704]]);
  BankObject.Finder.Colors += CTS2(4880003, 11, 0.03, 1.38);
  RuneArray := ['Law rune', 'Fire rune', 'Air rune'];
  ReturnSpell := ERSSpell.VARROCK_TELEPORT;
end;

procedure SetupFalador();
var
  FaladorCityBox: TBox := [7000, 2800, 7700, 3300];
  CourseAreaBox: TBox := [500, 4500, 1000, 5200];
begin
  SetLength(Obstacles, 13);

  with Obstacles[0] do
  begin
    Index := 0;
    Tile := [7536, 3082];
    WalkTile := [7536, 3082];
    UpText := ['Rough', 'wall'];
    Area := FaladorCityBox;
    Height := 2;
  end;
  with Obstacles[1] do
  begin
    Index := 1;
    Tile := [860, 4779];
    UpText := ['Cross', 'ight'];
    Area := [832, 4769, 866, 4792];
    Height := 0;
    Wait := 720;
  end;
  with Obstacles[2] do
  begin
    Index := 2;
    Tile := [900, 4747];
    UpText := ['Cross', 'Hand'];
    Area := [871, 4747, 920, 4799];
    Height := 2;
  end;
  with Obstacles[3] do
  begin
    Index := 3;
    Tile := [892, 4715];
    UpText := ['ump', 'Gap'];
    Area := [886, 4714, 908, 4734];
  end;
  with Obstacles[4] do
  begin
    Index := 4;
    Tile := [876, 4703];
    UpText := ['ump', 'Gap'];
    Area := [873, 4676, 901, 4713];
  end;
  with Obstacles[5] do
  begin
    Index := 5;
    Tile := [836, 4705];
    UpText := ['Cross', 'ight'];
    Area := [831, 4690, 869, 4713];
    Wait := 720;
  end;
  with Obstacles[6] do
  begin
    Index := 6;
    Tile := [804, 4739];
    UpText := ['Cross', 'ight'];
    Area := [799, 4725, 823, 4749];
    Wait := 720;
  end;
  with Obstacles[7] do
  begin
    Index := 7;
    Tile := [772, 4743];
    UpText := ['Jump', 'Gap'];
    Area := [730, 4713, 791, 4739];
  end;
  with Obstacles[8] do
  begin
    Index := 8;
    Tile := [760, 4771];
    UpText := ['ump', 'Ledge'];
    Area := [762, 4753, 797, 4785];
  end;
  with Obstacles[9] do
  begin
    Index := 9;
    Tile := [752, 4779];
    UpText := ['ump', 'Ledge'];
    Area := [737, 4759, 760, 4776];
    Height := 2;
  end;
  with Obstacles[10] do
  begin
    Index := 10;
    Tile := [748, 4815];
    UpText := ['ump', 'Ledge'];
    Area := [735, 4782, 760, 4812];
  end;
  with Obstacles[11] do
  begin
    Index := 11;
    Tile := [772, 4819];
    UpText := ['ump', 'Ledge'];
    Area := [729, 4806, 769, 4837];
  end;
  with Obstacles[12] do
  begin
    Index := 12;
    Tile := [796, 4819];
    UpText := ['Jump', 'Edge'];
    Area := [769, 4803, 850, 4848];
  end;

  AgilityRSW.SetupRegions([FaladorCityBox, CourseAreaBox]);

  BankObject.SetupUpText(['Bank','Bank booth']);
  BankObject.Setup(6, [[7444, 3032]]);
  BankObject.Finder.Colors += CTS2(5929360, 10, 0.03, 0.93);
  RuneArray := ['Law rune', 'Water rune', 'Air rune'];
  ReturnSpell := ERSSpell.FALADOR_TELEPORT;
end;

procedure SetupSeers();
var
  SeersCityBox: TBox := [6000, 2300, 6900, 2800];
  CourseAreaBox: TBox := [200, 5000, 1000, 5800];
begin
  SetLength(Obstacles, 7);

  with Obstacles[0] do
  begin
    Index := 0;
    Tile := [6308, 2490];
    WalkTile := [6308, 2510];
    UpText := ['Wall'];
    Area := SeersCityBox;
    Height := 2;
  end;
  with Obstacles[1] do
  begin
    Index := 1;
    Tile := [534, 5346];
    UpText := ['Jump', 'Gap'];
    Area := [531, 5325, 590, 5373];
  end;
  with Obstacles[2] do
  begin
    Index := 2;
    Tile := [762, 5368];
    UpText := ['Cross', 'Tight'];
    Area := [720, 5329, 800, 5382];
    Height := 2;
    Wait := 750;
  end;
  with Obstacles[3] do
  begin
    Index := 3;
    Tile := [766, 5420];
    UpText := ['ump', 'Gap'];
    Area := [750, 5388, 800, 5433];
  end;
  with Obstacles[4] do
  begin
    Index := 4;
    Tile := [876, 4703];
    UpText := ['ump', 'Gap'];
    Area := [873, 4676, 901, 4713];
  end;
  with Obstacles[5] do
  begin
    Index := 5;
    Tile := [466, 5446];
    UpText := ['ump', 'Gap'];
    Area := [440, 5400, 555, 5467];
  end;
  with Obstacles[6] do
  begin
    Index := 6;
    Tile := [734, 5468];
    UpText := ['ump', 'Edge'];
    Area := [666, 5452, 760, 5511];
  end;

  AgilityRSW.SetupRegions([SeersCityBox, CourseAreaBox]);

  BankObject.SetupUpText(['nk boo','Bank booth']);
  BankObject.Setup(6, [[6288, 2471]]);
  BankObject.Finder.Colors += CTS2(6980239, 12, 0.03, 0.78);
  RuneArray := ['Law rune', 'Air rune'];
  ReturnSpell := ERSSpell.CAMELOT_TELEPORT;
end;

procedure SetupFood();
var
  Foods: TRSItemArray := ['Trout', 'Salmon', 'Tuna', 'Lobster', 'Bass', 'Cake', 'Jug of wine'];
  LFood: TRSItem;
begin
  for LFood in Foods do
    if not Inventory.ContainsItem(LFood) then
      Continue()
    else
      Food := LFood;
end;

procedure InitiateScript();
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  WaitUntil(RSClient.IsLoggedIn(), 250, 12000);
  StartXP := XPBar.Read();

  if StartXP < 1 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  Options.SetNPCAttackOption(ERSAttackOption.HIDDEN);
  Options.SetZoomLevel(Random(0, 6));

  Birdhouses := False;

  if BHRUNS then
    if Course = POLLNIV then
      WriteDebug('Birdhouse runs are not supported for Pollnivneach.')
    else
      Birdhouses := True;

  if Birdhouses then
  begin
    Logs := BirdHouseRunner.GetLogForHunterLevel(Stats.GetLevel(ERSSkill.HUNTER, False));
    WriteLn('Logtype for birdhouses based on level: ', ToStr(Logs));
    BirdHouseRunner.Setup(Logs, SEED, False, INTERVAL, False);
    BirdHouseRunner.Init();
  end;

  case Course of
    ARDY: SetupArdy();
    FALLY: SetupFalador();
    SEERS: SetupSeers();
    VARRO: SetupVarrock();
    DRAYNOR: SetupDraynor();
    POLLNIV: SetupPollniv();
  end;

  if EXTRA_ANTIBAN then
    WaitTime := 500
  else
    WaitTime := 100;

  WaitRand := (WaitTime - 50);

  AgilityRSW.AdaptiveWalk := True;

  if EXTRA_ANTIBAN then
    Mouse.Speed := Random(11, 15)
  else
    Mouse.Speed := Random(20, 26);

  SetupAntiban();
  SetupFood();
  Timer.Start();
  ReportTimer.Start();
end;

procedure DrawNeonRectangle(Rect: TRectangle);
var
  RR,RG,RB,
  R,G,B,i: Integer;
  Pts: TPointArray;
  Cols: TIntegerArray;
  Color: Integer := 9442932;
begin
  ColorToRGB(Color, RR, RG, RB);
  try
    Pts := TPAFromPolygon(Rect.ToTPA);
    Cols := GetColors(Pts);

    for i:=0 to high(Cols) do
    begin
      ColorToRGB(Cols[i], R, G, B);
      R := Round(0.01 * (70 * R + 30 * RR));
      G := Round(0.01 * (70 * G + 30 * RG));
      B := Round(0.01 * (70 * B + 30 * RB));
      RSClient.Image.DrawTPA([Pts[i]], RGBtoColor(R,G,B));
    end;
  except
  end;
end;

function GetStep(): Int32;
var
  Pos: TPoint := AgilityRSW.GetMyPos();
  i: Int32;
begin
  for i := 0 to High(Obstacles) do
    if Obstacles[i].Area.Contains(Pos) then
      Exit(i);

  Exit(-1);
end;

function FindObstacle(Obs: TObstacle): Boolean;
var
  Pt: TPoint;
  MSRect: TRectangle;
  TPA: TPointArray;
  Bds: TBox;
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  MSRect := AgilityRSW.GetTileMS(Obs.Tile, Obs.Height);
  Bds := MSRect.Bounds().Expand(2);

  if not Mainscreen.Bounds.Contains(Bds) then
    Exit(False);

  DrawNeonRectangle(MSRect);

  if Obs.Color.Color <> 0 then
  begin
    SRL.FindColors(TPA, Obs.Color, Bds);

    if TPA.Len() < 1 then
      Exit(False);

    for 1 to SRL.NormalRange(2, 4) do
    begin
      Pt := TPA.RandomValue();
      Mouse.HumanMove(Pt);
      if Mainscreen.IsUpText(Obs.UpText, 175) then
        Exit(True);
    end;

  end else
  begin
    for 1 to SRL.NormalRange(2, 4) do
    begin
      Pt := MSRect.RandomMean();
      Mouse.HumanMove(Pt);
      if Mainscreen.IsUpText(Obs.UpText, 175) then
        Exit(True);
    end;
  end;

  Result := Mainscreen.IsUpText(Obs.UpText, 175);
end;

procedure GroundStep();
var
  Pos, StartTile: TPoint;
  Found: Boolean;
  xp: Int32;
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  if Birdhouses then
    if BirdHouseRunner.CanDoBirdHouseRun() then
      BirdHouseRunner.DoBirdHouseRun();

  Found := FindObstacle(Obstacles[0]);
  RSClient.Image.Clear();

  if Found then
  begin
    xp := XPBar.Read();
    Mouse.Click(MOUSE_LEFT);
    WaitUntil(xp < XPBar.Read(), 250, 12775);
  end else
  begin
    Pos := AgilityRSW.GetMyPos();
    StartTile := Obstacles[0].WalkTile;

    if not Pos.InBox(Obstacles[0].Area) then
      Exit();

    if Pos.DistanceTo(StartTile) > 128 then
      AgilityRSW.WebWalk(StartTile)
    else if Pos.DistanceTo(StartTile) > 32 then
      AgilityRSW.WalkBlind(StartTile)
    else if SRL.Dice(50) then
      KeyboardRotate()
    else
      Antiban.RandomRotate();
  end;
end;

procedure PickMarks(Step: Int32);
var
  MoGColor: TCTS2Color := CTS2(2141119, 1, 0.01, 0.01);
  MTPA, Dots: TPointArray;
  MRect: TRectangle;
  Dot: TPoint;
  MBds: TBox;
  MoG: Int32;
begin
  Minimap.WaitFlag();
  Dots := Minimap.GetDots(ERSMinimapdot.ITEM);

  if Dots.Len() = 0 then
    Exit();

  Dot := AgilityRSW.MMToWorld(Dots[0]);

  if Obstacles[Step].Area.Contains(Dot) then
  begin
    MRect := AgilityRSW.GetTileMS(Dot).Expand(4);
    MBds := MRect.Bounds();
    MBds.LimitTo(Mainscreen.Bounds());
    SRL.FindColors(MTPA, MoGColor, MBds);

    if MTPA.Len() = 0 then
      Exit();

    MoG := Inventory.CountItemStack('Mark of grace');
    Mouse.HumanMove(MTPA.Mean());

    if not Mainscreen.IsUpText(['Take M', 'ark of g'], 195) then
      Exit();

    Mouse.Click(MOUSE_LEFT);

    if WaitUntil(MoG < Inventory.CountItemStack('Mark of grace'), 250, 7500) then
      Marks += 1;
  end;
end;

procedure NormalStep(Step: Int32);
var
  Found: Boolean;
  hp, xp: Int32;
  Pos: TPoint;
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  hp := Minimap.GetHPLevel();
  xp := XPBar.Read();

  PickMarks(Step);

  Found := FindObstacle(Obstacles[Step]);
  RSClient.Image.Clear();

  if Found then
  begin
    Mouse.Click(MOUSE_LEFT);
    WaitUntil((xp < XPBar.Read()) or (hp > Minimap.GetHPLevel()), 250, 12775);
    Wait(Obstacles[Step].Wait);
  end else
  begin
    Pos := AgilityRSW.GetMyPos();

    if not Pos.InBox(Obstacles[Step].Area) then
      Exit();

    if Timer.ElapsedTime() > 12000 then
      AgilityRSW.WalkBlind(Obstacles[Step].Tile)
    else
      Antiban.RandomRotate();
  end;
end;  

procedure RecoverFromLost();
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  WriteDebug('Lost!');

  if Timer.ElapsedTime() < 30000 then
    Exit();

  if Course = POLLNIV then
  begin
    Magic.CastSpell(ERSSpell.TELEPORT_TO_HOUSE);
    WaitEx(5775, 555);
    Logout.ClickLogout();
  end else
    Magic.CastSpell(ReturnSpell);

  WaitEx(5775, 555);
end;

procedure Agility();
begin
  Antiban.DoAntiban();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if RSInterface.IsOpen() then
    RSInterface.Close(50);

  HealthManagement();
  CalculateXP();
  Step := GetStep();
  PrintProgress();

  case Step of
    -1: RecoverFromLost();
     0: GroundStep();
  else
    NormalStep(Step);
  end;
end;

function TBirdHouseInclude.OnStart() : Boolean; override;
var
  i, j: Int32;
  bankTimeout : TCountdown;
  FoodBankItem, RuneBankItem: TRSBankItem;
begin
  Writeln("Birdhouse Include OnStart");

  for i := 0 to High(Antiban.Tasks) do
    Antiban.Tasks[i].Countdown.Pause();

  bankTimeout.Init(65000);

  while not bankTimeOut.IsFinished() and not Bank.IsOpen() do
  begin
    BankObject.WalkClick();
    WaitUntil(Bank.IsOpen(), 250, 2000);
  end;

  if not Bank.IsOpen() then
  begin
    Self.DebugLn("Failed to get to bank");
    Exit(false);
  end;

  if Inventory.CountEmptySlots() < 28 then
  begin
    Bank.DepositAll();
    WaitUntil(Inventory.CountEmptySlots() > 25, 150, 2000);

    if not Self.WithdrawNextRun() then
    begin
      Self.DebugLn("Failed to get bank items");
      Bank.DepositAll();
      Bank.Close();
      BirdhouseRunner.IsDisabled := true;
      Exit(False);
    end;

    for j := 0 to High(RuneArray) do
    begin
      RuneBankItem := TRSBankItem.Setup(RuneArray[j], 10, False);
      Bank.WithdrawItem(RuneBankItem, False);
      WaitEx(500, 450);
    end;

    FoodBankItem := TRSBankItem.Setup(Food, 2, False);

    if Bank.ContainsItem(Food) then
      Bank.WithDrawItem(FoodBankItem, False);

    WaitEx(325, 250);
    Bank.Close(60);
  end;

  Result := True;
end;

procedure TBirdHouseInclude.OnComplete(); override;
var
  i: Int32;
begin
  Self.DebugLn("Birdhouse Include OnComplete");
  ScriptWalker := @AgilityRSW;
  Magic.CastSpell(ReturnSpell);
  WaitEx(6969, 420);

  for i := 0 to High(Antiban.Tasks) do
    Antiban.Tasks[i].Countdown.Resume();
end;

begin
  InitiateScript();
  repeat
    begin
      Agility();
      WaitEx(WaitTime, (WaitTime - 50));
    end;
  until false;
end.