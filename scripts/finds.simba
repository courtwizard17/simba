program findz;
{$I WaspLib/osr.simba}

type
  TFindsGUI = record (TScriptForm)
    CraftCheckbox, BoneCheckbox, BlockInputCheckbox: TLabeledCheckbox;
    BreakForInput, BreakAfterInput: TLabeledEdit;
    LampSkillInput: TLabeledCombobox;
  end;

  EState = (USE_LAMP, DEPOSIT, DROP_JUNK, CLEAN_FINDS, GET_FINDS, BURY_BONES, CRAFT_TIPS, CUT_GEMS);

var
  BreakFor, BreakAfter, StartXP, CurrentXP, GainedXP: Int32;
  TrainPrayer, TrainCrafting, BlockInPut: Boolean;
  FindsPile, FindsTable, MuseumBox: TRSObject;
  InactivityTimer, ReportTimer: TStopwatch;
  Junk, Depositables: TRSItemArray;
  Skill: ERSLampSkill;
  SafetyLimit: Int64;
  GUI: TFindsGUI;
  RSW: TRSWalker;

procedure TFindsGUI.StartScript(Sender: TObject); override;
begin
  BreakAfter := Self.BreakAfterInput.GetText().ExtractInteger();
  BreakFor := Self.BreakForInput.GetText().ExtractInteger();
  BlockInput := Self.BlockInputCheckbox.IsChecked();

  TrainPrayer := Self.BoneCheckbox.IsChecked();
  TrainCrafting := Self.CraftCheckbox.IsChecked();
  Skill := ERSLampSkill(Self.LampSkillInput.GetItemIndex());
  inherited;
end;

procedure TFindsGUI.Run(); override;
var
  Tab: TTabSheet;
begin
  Self.Setup('Finds', Point(800, 500), False);
  Self.Start.SetOnClick(@Self.StartScript);
  Self.AddTab(' ');

  Tab := Self.GetTab(' ');

  with Self.BreakAfterInput do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(160));
    SetCaption('Break after:');
    SetText(ToStr(Random(40, 120)));
  end;

  with Self.BreakForInput do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(220));
    SetCaption('Break for:');
    SetText(ToStr(Random(10, 20)));
  end;

  with Self.BlockInputCheckbox do
  begin
    Create(Tab);
    SetCaption('Block Real Input');
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(350));
    SetChecked(True);
  end;

  with Self.CraftCheckbox do
  begin
    Create(Tab);
    SetCaption('Cut gems into arrowtips (Needs Chisel!)');
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(240));
  end;

  with Self.BoneCheckbox do
  begin
    Create(Tab);
    SetCaption('Bury bones');
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(220));
  end;

  with Self.LampSkillInput do
  begin
    Create(Tab);
    SetCaption('Lamp Skill:');
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(160));
    AddItemArray(['ATTACK', 'STRENGTH', 'RANGE', 'MAGIC', 'DEFENCE',
                  'HITPOINTS', 'PRAYER', 'AGILITY', 'HERBLORE', 'THIEVING',
                  'CRAFTING', 'RUNECRAFTING', 'SLAYER', 'FARMING', 'MINING',
                  'SMITHING', 'FISHING', 'COOKING', 'FIREMAKING', 'WOODCUTTING',
                  'FLETCHING', 'CONSTRUCTION', 'HUNTER']);
    SetItemIndex(Ord(ERSLampSkill.SLAYER));
  end;

  Self.CreateAccountManager(Tab);
  inherited;
end;

procedure PauseTimer(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Pause();
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Resume();
  T := Task;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(450, 2750));
end;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

function HasGainedXP(): Boolean;
var
  TempValue: Int32;
begin
  CurrentXP := XPBar.Read();
  TempValue := GainedXP;
  GainedXP  := CurrentXP - StartXP;

  Result := GainedXP > TempValue;
end;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  Hours := GetTimeRunning() / 3600000;
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');
  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);
  WriteDebug(ToStr('Currently lamping: ', LampHandler.Skill));
  ReportTimer.Reset();
end;

function IsDepositing(): Boolean;
begin
  Antiban.DoAntiban(False, False);
  Result := Inventory.ContainsAny(Depositables);
end;

function IsCleaning(): Boolean;
begin
  Antiban.DoAntiban(False, False);
  Result := Inventory.ContainsItem('Uncleaned find');
end;

function IsGathering(): Boolean;
begin
  Antiban.DoAntiban(False, False);
  Result := not Inventory.IsFull();
end;

procedure GatherFinds();
begin
  if FindsPile.Click() then
    WaitUntil(not IsGathering(), 250, 62350)
  else
    Antiban.SmallCameraRotation();
end;

function IsDepositMsgOpen(): Boolean;
var
  ChatString: String := Chat.GetChatTitle();
begin
  Result := ChatString.Contains('Finds placed');
end;

procedure CleanFinds();
begin
  if FindsTable.Click() then
    WaitUntil(not IsCleaning(), 250, 82450)
  else
    Antiban.SmallCameraRotation();
end;

procedure ConfirmDeposit();
begin
  if Chat.ClickOption('Yes, place all my finds in the crate.') then
    WaitUntil(not IsDepositing(), 250, 22000);
end;

procedure DepositItems();
begin
  if IsDepositMsgOpen() then
    ConfirmDeposit()
  else if MuseumBox.Click() then
    WaitUntil(IsDepositMsgOpen(), 250, 5000)
  else
    Antiban.SmallCameraRotation();
end;

function ShouldDeposit(): Boolean;
var
  i, ItemCount: Int32;
begin
  for i := Low(Depositables) to High(Depositables) do
    ItemCount += Inventory.CountItem(Depositables[i]);

  Result := ItemCount > 8;
end;

procedure ProcessGems(Items: TRSItemArray);
var
  Item: TRSItem;
begin
  for Item in Items do
  begin
    if not Inventory.Use('Chisel', Item) then
      Continue();

    if WaitUntil(Make.IsOpen(), 250, 2750)  then
      Make.Select(0, Make.QUANTITY_ALL, True);

    WaitUntil(not Inventory.ContainsItem(Item), 250, 9250);
  end;
end;

procedure BuryBones();
var
  Bones: TRSItemArray := ['Bones', 'Big bones'];
  Item: TRSItem;
begin
  for Item in Bones do
    if Inventory.ClickItem(Item) then
      WaitEx(1750, 555);
end;

procedure SetupAntiban();
begin
  Antiban.AddTask(ONE_MINUTE * 2, @Mouse.RandomMovement, 1);
  Antiban.AddTask(ONE_MINUTE * 6, @Antiban.HoverMSPlayers, 1);
  Antiban.AddTask(ONE_MINUTE * 3, @Antiban.DoLoseFocus, 1);
  Antiban.AddTask(ONE_MINUTE * 7, @Antiban.RandomRotate, 1);
  Antiban.AddTask(ONE_MINUTE * 8, @Antiban.HoverMSNPCs, 1);
  Antiban.AddTask(ONE_MINUTE * 10, @Antiban.RandomRightClick, 1);
  Antiban.AddBreak(BreakAfter * ONE_MINUTE, BreakFor * ONE_MINUTE, 0.5, 1);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

procedure Init();
begin
  RSW.Setup('world', 4);
  SetupAntiban();
  LampHandler.Setup(Skill);
  WriteDebug(ToStr('STARTING TO LAMP: ', LampHandler.Skill));
  WriteDebug(ToStr('STARTING TO LAMP: ', Skill));
  SafetyLimit := 600000;

  if not RSClient.IsLoggedIn then
    Login.LoginPlayer();

  WaitUntil(RSClient.IsLoggedIn(), 250, 12000);

  StartXP := XPBar.Read();

  if StartXP < 1 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  Options.SetZoomLevel(Random(8, 20));
  Mouse.Speed := SRL.NormalRange(11, 18);

  Junk := ['Broken arrow', 'Broken glass', 'Iron dagger', 'Bowl', 'Pot', 'Bronze limbs',
           'Wooden stock', 'Coal', 'Tin ore', 'Copper ore', 'Mithril ore', 'Iron ore', 'Crushed gem'];
  Depositables := ['Pottery', 'Jewellery', 'Old chipped vase', 'Arrowheads'];

  if not TrainPrayer then
  begin
    Junk += 'Bones';
    Junk += 'Big bones';
    SafetyLimit += 1500000;
  end;

  if not TrainCrafting then
  begin
    Junk += 'Uncut jade';
    Junk += 'Uncut opal';
    SafetyLimit += 1500000;
  end else if not Inventory.ContainsItem('Chisel') then
    TerminateScript('You need a chisel to enable gem cutting!');

  with FindsPile do
  begin
    Finder.Colors += CTS2(3109251, 8, 0.06, 1.00);
    Setup(2, [[8444, 2664]]);
    SetupUpText(['rocks', 'Site s']);
  end;

  with FindsTable do
  begin
    Finder.Colors += CTS2(9675697, 11, 0.04, 0.62);
    Setup(2, [[8440, 2676]]);
    SetupUpText(['men t', 'table']);
  end;

  with MuseumBox do
  begin
    Finder.Colors += CTS2(12063, 2, 0.24, 0.01);
    Setup(2, [[8456, 2680]]);
    SetupUpText(['Storage', 'crate']);
  end;

  if not BlockInput then
  begin
    WriteDebug('Script started with real input enabled.');
    WriteDebug('If you face graphical issues, consider blocking real input.');
    WLSettings.RemoteInput.BlockInput := False;
  end;

  WriteDebug(ToStr('STARTING TO LAMP: ', LampHandler.Skill));
  WriteDebug(ToStr('STARTING TO LAMP: ', Skill));

  InactivityTimer.Start();
  ReportTimer.Start();
end;

function GetState(): EState;
begin
  if Inventory.ContainsItem('Antique lamp') then
    Exit(USE_LAMP);

  if TrainPrayer and Inventory.ContainsAny(['Bones', 'Big bones']) then
    Exit(BURY_BONES);

  if TrainCrafting and Inventory.ContainsAny(['Opal', 'Jade']) then
    Exit(CRAFT_TIPS);

  if TrainCrafting and Inventory.ContainsAny(['Uncut opal', 'Uncut jade']) then
    Exit(CUT_GEMS);

  if ShouldDeposit() then
    Exit(DEPOSIT);

  if Inventory.ContainsAny(Junk) then
    Exit(DROP_JUNK);

  if Inventory.ContainsItem('Uncleaned find') then
    if Inventory.IsFull() then
      Exit(CLEAN_FINDS);

  Exit(GET_FINDS);
end;

procedure UseLamp();
begin
  if LampHandler.Open() then
    LampHandler.SelectLampSkill();
end;

procedure Loop();
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if RSInterface.IsOpen() then
    RSInterface.Close();

  if HasGainedXP() then
    InactivityTimer.Reset()
  else if InactivityTimer.ElapsedTime() > SafetyLimit then
    TerminateScript('We have not gained XP in a while, shutting down.');

  if ReportTimer.ElapsedTime() > 120000 then
    PrintProgress();

  case GetState() of
    CLEAN_FINDS: CleanFinds();
    DROP_JUNK: Inventory.ShiftDrop(Junk, DROP_PATTERN_SNAKE);
    GET_FINDS: GatherFinds();
    USE_LAMP: UseLamp();
    DEPOSIT: DepositItems();
    BURY_BONES: BuryBones();
    CRAFT_TIPS: ProcessGems(['Jade', 'Opal']);
    CUT_GEMS: ProcessGems(['Uncut jade', 'Uncut opal']);
  end;

  Antiban.DoAntiban();
  WaitEx(325, 275);
end;

begin
  GUI.Run();
  Init();

  repeat
    Loop();
  until false;
end.
