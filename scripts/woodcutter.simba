program woodcutter;
{$I WaspLib/osr.simba}
{$I chores.simba}

type
  ETreeType = (OAK_TREE, WILLOW_TREE, MAPLE_TREE, YEW_TREE, MAGIC_TREE);
  EState = (PRINT_PROGRESS, TRAVEL_BANK, TRAVEL_ZONE, DEPOSIT_LOGS, BIRDHOUSE_RUN,
            RESET_TIMER, CLOSE_INTERFACE, HANDLE_LOGIN, RETURN_SEERS, DO_ANTIBAN,
            CHOP_TREE, PICK_NEST, CHOP_ROOTS);

  TWoodcutterGUI = record (TScriptForm)
    BlockInputCheckbox, BirdhouseCheckbox: TLabeledCheckBox;
    BreakForInput, BreakAfterInput: TLabeledEdit;
    TreeTypeInput: TLabeledCombobox;
  end;

var
  BreakFor, BreakAfter, StartXP, CurrentXP, GainedXP, Logs: Int32;
  InactivityTimer, ReportTimer: TStopwatch;
  BlockInput, DoBirdhouseRuns: Boolean;
  Trees: Array of TRSObjectV2;
  GUI: TWoodcutterGUI;
  ChoppingTime: Int32;
  Booth: TRSObjectV2;
  Zone, Merc: TBox;
  Tree: ETreeType;
  Log: TRSItem;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

procedure TWoodcutterGUI.StartScript(Sender: TObject); override;
begin
  DoBirdhouseRuns := Self.BirdhouseCheckbox.IsChecked();
  BreakFor := Self.BreakForInput.GetText().ExtractInteger();
  BlockInput := Self.BlockInputCheckbox.IsChecked();
  BreakAfter := Self.BreakAfterInput.GetText().ExtractInteger();
  Tree := ETreeType(Self.TreeTypeInput.GetItemIndex());
  inherited;
end;

procedure TWoodcutterGUI.Run(); override;
var
  Tab: TTabSheet;
begin
  Self.Setup('Woodcutter', Point(800, 500), False);
  Self.Start.SetOnClick(@Self.StartScript);
  Self.AddTab('Settings');

  Tab := Self.GetTab('Settings');
  Tab.SetTooltip('');

  with Self.BreakAfterInput do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(160));
    SetCaption('Break after:');
    SetText('45');
  end;

  with Self.BlockInputCheckbox do
  begin
    Create(Tab);
    SetCaption('Block Real Input?');
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(260));
  end;

  with Self.BreakForInput do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(220));
    SetCaption('Break for:');
    SetText('5');
  end;

  with Self.BirdhouseCheckbox do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(235));
    SetCaption('Do birdhouse runs?');
  end;

  with Self.TreeTypeInput do
  begin
    Create(Tab);
    SetCaption('Logs:');
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(160));
    AddItemArray(['Oak', 'Willow', 'Maple', 'Yew', 'Magic']);
  end;

  Self.CreateAccountManager(Tab);
  Self.CreateBirdhouseRunSettings();
  inherited;
end;

procedure PauseTimer(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Pause();
  T := Task;
end;

function ShouldStop(): Boolean;
begin
  Result := InactivityTimer.ElapsedTime() > 300000;
end;

procedure ResumeTimer(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Resume();
  T := Task;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(450, 2750));
end;

procedure SetupAntiban();
begin
  Antiban.AddTask(ONE_MINUTE * 3, @Antiban.RandomMouse, 1);
  Antiban.AddTask(ONE_MINUTE * 5, @Antiban.RandomRightClick, 1);
  Antiban.AddTask(ONE_MINUTE * 5, @Antiban.DoLoseFocus, 1);
  Antiban.AddTask(ONE_MINUTE * 7, @Antiban.RandomRotate, 1);

  Antiban.AddBreak(BreakAfter * ONE_MINUTE, BreakFor * ONE_MINUTE, 0.3, 1);

  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

function GetTilesNearby(): TPointArray;
var
  Pos: TPoint;
  i, j: Int32;
begin
  Pos := Map.Position();
  i := Pos.X - 12;
  j := Pos.Y - 12;

  while i <= Pos.X + 12 do
  begin

    while j < Pos.Y + 12 do
    begin
      Result += [i, j];
      Inc(j, 4);
    end;

    Result += [i, j];
    Inc(i, 4);
    j := Pos.Y - 12;
  end;

  Result.Sort(Map.Position());
end;

function CheckRectColors(Rect: TRectangle; Color: TCTS2Color; Amount: Int32): Boolean;
var
  TPA: TPointArray;
  Bounds: TBox;
  Pt: TPoint;
begin
  Bounds := Rect.Bounds();
  Bounds.LimitTo(Mainscreen.Bounds);

  if SRL.FindColors(TPA, Color, Bounds) < Amount then
    Exit(False);

  for Pt in TPA do
    if not SRL.PointInRect(Pt, Rect) then
      TPA.Remove(Pt);

  WriteLn('length in rect: ', Length(TPA));
  Result := Length(TPA) > Amount;
end;

function HasGainedXP(): Boolean;
var
  TempValue: Int32;
begin
  if not RSClient.IsLoggedIn() then
    Exit(False);

  CurrentXP := XPBar.Read();

  if CurrentXP < 1024 then
    Exit(False);

  TempValue := GainedXP;
  GainedXP  := CurrentXP - StartXP;

  Result := GainedXP > TempValue;
end;

function IsAnimating(): Boolean;
var
  Timer: TCountdown;
begin
  Timer.Init(SRL.NormalRange(1850, 2550));

  while not Timer.IsFinished() do
    if SRL.PercentShift(MainScreen.GetPlayerBox(), 325) > 10 then
      Exit(True);

  WriteDebug('Stopped animating.');
end;

function ClickHelper(UpTexts: TStringArray): Boolean;
begin
  if Mainscreen.IsUpText(UpTexts, 175) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Exit(True);
  end else
    ChooseOption.Open();

  if ChooseOption.HasOption(UpTexts) then
  begin
    ChooseOption.Select(UpTexts);
    Exit(True);
  end;
end;

function FindRoots(): TPoint;
var
  Tiles: TPointArray;
  Rect: TRectangle;
  Tile: TPoint;
begin
  Tiles := GetTilesNearby();

  for Tile in Tiles do
  begin
    Rect := Map.GetTileMS(Tile);

    if CheckRectColors(Rect, CTS2(7120461, 21, 0.02, 0.68), Mainscreen.NormalizeDistance(5)) then
    begin
      WriteDebug('Anima roots found.');
      RSClient.Image.DrawRect(Rect, clRed);
      Exit(Rect.Mean());
    end;

    if CheckRectColors(Rect, CTS2(2833216, 10, 0.02, 0.33), Mainscreen.NormalizeDistance(50)) then
    begin
      WriteDebug('Normal roots found.');
      RSClient.Image.DrawRect(Rect, clRed);
      RSClient.Image.DrawCrosshairs(Rect.Mean(), 4, clBlue);
      Exit(Rect.Mean());
    end;
  end;
end;

function GetChoppingAreaMMDots(DotType: ERSMinimapDot): TPointArray;
var
  Dots: TPointArray;
  Dot: TPoint;
  Ex: Int32;
begin
  Dots := Minimap.GetDots(DotType);

  if Length(Dots) = 0 then
    Exit(Dots);

  Dots.Sort(Minimap.Center);

  if DotType = ERSMinimapDot.ITEM then
    Ex := -2
  else
    Ex := 4;

  for Dot in Dots do
  begin
    if Zone.Expand(Ex).Contains(Map.Walker.MMToMap(Map.Position(), Dot)) then
    begin
      Result += Dot;
      RSClient.Image.DrawCrosshairs(Dot, 5, clPink);
    end;
  end;
end;

function FindNestMS(out Mean: TPoint; Tile: TPoint): Boolean;
var
  Rect: TRectangle;
  TPA: TPointArray;
  Angle: Double;
  Bounds: TBox;
begin
  Angle := Minimap.GetCompassAngle(False);
  Rect := Minimap.VectorToMSRect(Vec3(Tile.X + 2, Tile.Y + 2, 0), 1, 1, Angle);
  RSClient.Image.DrawRect(Rect, clRed);
  Bounds := Rect.Bounds().Expand(4);
  Bounds.LimitTo(Mainscreen.Bounds);

  SRL.FindColors(TPA, CTS2(3621962, 9, 0.19, 0.54), Bounds);

  if TPA.Len() = 0 then
    Exit(False);

  Mean := TPA.Mean();
  Result := TPA.Len() > 2;
end;

function HasNest(): Boolean;
var
  Dots: TPointArray;
  N, Dot: TPoint;
  Found: Boolean;
  Msg: String;
  i: Int32;
begin
  if ChatButtons.GetActive() <> ERSChatButton.ALL_CHAT then
    ChatButtons.Open(ERSChatButton.ALL_CHAT);

  if InRange(Chat.GetScrollPosition(), 1, 99) then
    Chat.SetScrollPosition(100);

  for i := 8 downto 6 do
  begin
    Msg := Chat.GetMessage(i, [CTS0(255, 0).Color]);

    if Msg.Contains('nest') then
      Found := True;
  end;

  if not Found then
    Exit(False);

  Dots := GetChoppingAreaMMDots(ERSMinimapDot.ITEM);

  if Length(Dots) = 0 then
    Exit(False);

  for Dot in Dots do
    if FindNestMS(N, Dot) then
      Exit(True);
end;

procedure PickNest();
var
  EmptySlots: Int32;
  Dots: TPointArray;
  Dot, Pt: TPoint;
begin
  Dots := GetChoppingAreaMMDots(ERSMinimapDot.ITEM);

  if Length(Dots) = 0 then
    Exit();

  EmptySlots := Inventory.CountEmptySlots();

  for Dot in Dots do
  begin
    if FindNestMS(Pt, Dot) then
      Mouse.HumanMove(Pt)
    else
      Continue();

    if not ClickHelper(['nest']) then
      Continue();

    WaitUntil(EmptySlots > Inventory.CountEmptySlots(), 250, 5000);
  end;
end;

function Fantiban(): Boolean;
begin
  Antiban.DoAntiban(False, False);

  if Inventory.IsFull() then
    Exit(True);

  if HasNest() then
    Exit(True);

  if FindRoots() <> Point(0, 0) then
    Exit(True);

  Result := (not IsAnimating());
end;

procedure WaitChopping();
var
  Rand, Time: Int32;
begin
  Time := ChoppingTime;
  Rand := Floor(SRL.SkewedRand(Time, Time * 0.7, Time * 1.3));

  WaitUntil(Fantiban(), 750, Rand);
end;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  Hours := GetTimeRunning() / 3600000;
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');

  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);

  ReportTimer.Reset();
end;

procedure SetupCatherbyBank();
begin
  Merc := [7128, 36666, 7152, 36678];

  with Booth do
  begin
    Size := Vec3(1, 1, 8);
    SetupCoordinates([[7140, 36662]]);
    Finder.Colors += CTS2(4214674, 18, 0.55, 2.07);
    SetupUpText('ooth');
    Rotations := [0];
    Walker := @Map.Walker;
  end;
end;

procedure SetupSeersBank();
begin
  Merc := [6788, 36458, 6824, 36474];

  with Booth do
  begin
    Size := Vec3(1, 1, 8);
    SetupCoordinates([[6800, 36454]]);
    Finder.Colors += CTS2(4214674, 18, 0.55, 2.07);
    SetupUpText('ooth');
    Rotations := [0];
    Walker := @Map.Walker;
  end;
end;

procedure SetupYews();
var
  Yews: TPointArray := [[6944, 36718], [6948, 36702], [6936, 36694], [6928, 36706], [6968, 36718]];
  i: Int32;
begin
  Zone := [6912, 36686, 6964, 36730];
  ChoppingTime := 95000;
  Log := 'Yew logs';

  SetupCatherbyBank();
  SetLength(Trees, Length(Yews));

  for i := 0 to Length(Trees) - 1 do
    with Trees[i] do
    begin
      Size := Vec3(2.5, 2.5, 8);
      SetupCoordinates([Yews[i]]);
      Finder.ColorClusters += [CTS2(1919809, 4, 0.52, 1.79), CTS2(1730145, 15, 0.08, 2.88), 3];
      SetupUpText('Yew');
      Rotations := [0];
      Walker := @Map.Walker;
    end;
end;

procedure SetupWillows();
var
  Willows: TPointArray := [[6742, 36388], [6754, 36396], [6750, 36384]];
  i: Int32;
begin
  Zone := Box([6748, 36390], 25, 25);
  ChoppingTime := 45000;
  Log := 'Willow logs';

  SetupSeersBank();
  SetLength(Trees, Length(Willows));

  for i := 0 to Length(Trees) - 1 do
    with Trees[i] do
    begin
      Size := Vec3(2, 2, 6);
      SetupCoordinates([Willows[i]]);
      Finder.ColorClusters += [CTS2(1794645, 6, 0.13, 1.49), CTS2(2904399, 17, 0.06, 0.90), 4];
      SetupUpText('Willow');
      Rotations := [0];
      Walker := @Map.Walker;
    end;
end;

procedure SetupOaks();
var
  Oaks: TPointArray := [[6784, 36502], [6788, 36514]];
  i: Int32;
begin
  Zone := Box([6780, 36510], 15, 15);
  ChoppingTime := 35000;
  Log := 'Oak logs';

  SetupSeersBank();
  SetLength(Trees, Length(Oaks));

  for i := 0 to Length(Trees) - 1 do
    with Trees[i] do
    begin
      Size := Vec3(2, 2, 6);
      SetupCoordinates([Oaks[i]]);
      Finder.ColorClusters += [CTS2(1794645, 6, 0.13, 1.49), CTS2(2904399, 17, 0.06, 0.90), 4];
      SetupUpText('Oak');
      Rotations := [0];
      Walker := @Map.Walker;
    end;
end;

procedure SetupMagics();
var
  Magics: TPointArray := [[6700, 36838], [6728, 36838], [6700, 36846], [6728, 36846]];
  i: Int32;
begin
  Zone := [6700, 36826, 6736, 36846];
  ChoppingTime := 95000;
  Log := 'Magic logs';

  SetupCatherbyBank();
  SetLength(Trees, Length(Magics));

  for i := 0 to Length(Trees) - 1 do
    with Trees[i] do
    begin
      Size := Vec3(2, 2, 8);
      SetupCoordinates([Magics[i]]);
      Finder.ColorClusters += [CTS2(3695708, 4, 0.27, 2.85), CTS2(8639705, 22, 0.01, 1.73), 4];
      SetupUpText('Magic');
      Rotations := [0];
      Walker := @Map.Walker;
    end;
end;

procedure SetupMaples();
var
  Maples: TPointArray := [[6790, 36424], [6814, 36424], [6826, 36424], [6834, 36432]];
  i: Int32;
begin
  Zone := [6780, 36414, 6840, 36438];
  ChoppingTime := 45000;
  Log := 'Maple logs';

  SetupSeersBank();
  SetLength(Trees, Length(Maples));

  for i := 0 to Length(Trees) - 1 do
    with Trees[i] do
    begin
      Size := Vec3(1.6, 1.6, 5);
      SetupCoordinates([Maples[i]]);
      Finder.ColorClusters += [CTS2(13908, 7, 0.37, 0.01), CTS2(23438, 3, 0.74, 0.01), 4];
      SetupUpText('Maple');
      Rotations := [0];
      Walker := @Map.Walker;
    end;
end;

procedure SetupTrees();
begin
  case Tree of
    YEW_TREE: SetupYews();
    OAK_TREE: SetupOaks();
    MAPLE_TREE: SetupMaples();
    MAGIC_TREE: SetupMagics();
    WILLOW_TREE: SetupWillows();
  end;
end;

procedure Init();
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if WaitUntil(RSClient.IsLoggedIn(), 250, 12000)  then
    StartXP := XPBar.Read();

  if StartXP < 1024 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  if DoBirdhouseRuns then
    BirdHouseRunner.Init();

  if Options.GetNPCAttackOption() <> ERSAttackOption.HIDDEN then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN);

  if not InRange(Options.GetZoomLevel(), 25, 35) then
    Options.SetZoomLevel(Random(25, 35));

  Mouse.Speed := SRL.NormalRange(25, 35);
  Map.SetupChunks([[[41, 55, 45, 52], [0]], [[56, 61, 60, 57], [0]]]);
  MM2MS.SetupZoom();
  SetupAntiban();

  if BlockInput then
  begin
    WriteDebug('Script started with real input disabled.');
    WLSettings.RemoteInput.BlockInput := True;
    RSClient.RemoteInput.DisableRealInput();
  end else
  begin
    WriteDebug('Script started with real input enabled.');
    WLSettings.RemoteInput.BlockInput := False;
    RSClient.RemoteInput.EnableRealInput();
  end;

  SetupTrees();

  InactivityTimer.Start();
  ReportTimer.Start();
end;

procedure ReturnSeers();
begin
  for 0 to 5 do
  begin
    if Magic.CastSpell(ERSSpell.CAMELOT_TELEPORT) then
    begin
      Wait(5000);
      Break();
    end else
      WriteDebug('Failed to cast return teleport');
  end;
end;

function TAntiban.TaskWaiting(): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Self.Tasks) do
    if Self.Tasks[i].Countdown.IsFinished() then
      Exit(True);
end;


function GetState(): EState;
begin
  if not RSClient.IsLoggedIn() then
    Exit(HANDLE_LOGIN);

  if RSInterface.IsOpen() then
    Exit(CLOSE_INTERFACE);

  if HasGainedXP() then
    Exit(RESET_TIMER);

  if ReportTimer.ElapsedTime() > 120000 then
    Exit(PRINT_PROGRESS);

  if Antiban.TaskWaiting() then
    Exit(DO_ANTIBAN);

  if Map.Position().InBox([10424, 34766, 11244, 35570]) then
    Exit(RETURN_SEERS);

  if DoBirdhouseRuns then
    if BirdhouseRunner.CanDoBirdHouseRun() then
      Exit(BIRDHOUSE_RUN);

  if Inventory.IsFull() then
  begin
    if Map.Position().InBox(Merc) then
      Exit(DEPOSIT_LOGS);

    Exit(TRAVEL_BANK);
  end;

  if Map.Position().InBox(Zone) then
  begin
    if HasNest() then
      Exit(PICK_NEST);

    if FindRoots() <> Point(0, 0) then
      Exit(CHOP_ROOTS);

    Exit(CHOP_TREE);
  end;

  Exit(TRAVEL_ZONE);
end;

procedure ChopRoots();
var
  Pt: TPoint;
begin
  Pt := FindRoots();

  if Pt = Point(0, 0) then
    Exit()
  else
    Mouse.HumanMove(Pt);

  if not ClickHelper(['oot']) then
    Exit();

  WaitUntil(not IsAnimating(), 500, 4500);
end;

procedure ChopTree();
var
  Tree: TRSObjectV2;
begin
  for Tree in Trees do
  begin
    if not Tree.IsVisible() then
      Continue()
    else
      Tree.Draw(RSClient.Image());

    if Tree.Click() then
    begin
      RSClient.Image.Clear();

      WaitEx(2500, 2000);
      WaitChopping();
      Exit();
    end;
  end;
end;

procedure DepositLogs();
begin
  if Booth.Click() then
    WaitUntil(Bank.IsOpen(), 500, 15000)
  else
    Antiban.RandomRotate();

  if not Bank.IsOpen() then
    Exit();

  Logs += Inventory.CountItem(Log);

  if Bank.DepositRandomItems(['Steel axe', 'Mithril axe', 'Rune axe', 'Adamant axe', 'Dragon axe']) then
    WaitEx(1600, 1200);

  if Bank.Close(50) then
    WaitEx(1575, 1225);

  WriteDebug(ToStr('Logs banked: ', Logs));
end;

procedure Loop();
var
  State: EState;
begin
  State := GetState();
  WriteDebug(ToStr(State));

  case State of
    BIRDHOUSE_RUN: BirdhouseRunner.DoBirdHouseRun();

    CLOSE_INTERFACE: RSInterface.Close(50);
    PRINT_PROGRESS: PrintProgress();
    RESET_TIMER: InactivityTimer.Reset();
    RETURN_SEERS: ReturnSeers();
    DO_ANTIBAN: Antiban.DoAntiban();
    HANDLE_LOGIN: Login.LoginPlayer();

    TRAVEL_ZONE: Map.Walker.WebWalk(Zone.Center());
    TRAVEL_BANK: Map.Walker.WebWalk(Merc.Center());

    DEPOSIT_LOGS: DepositLogs();

    PICK_NEST: PickNest();
    CHOP_TREE: ChopTree();
    CHOP_ROOTS: ChopRoots();
  end;

  WaitEx(175, 170);
end;

function TBirdHouseInclude.OnStart() : Boolean; override;
var
  RuneArray: TRSItemArray := ['Law rune', 'Air rune'];
  RuneBankItem: TRSBankItem;
  BankTimeout: TCountdown;
  Rune: TRSItem;
  i: Int32;
begin
  WriteDebug('Starting a birdhouse run');

  for i := 0 to High(Antiban.Tasks) do
    Antiban.Tasks[i].Countdown.Pause();

  BankTimeout.Init(68750);

  while not BankTimeOut.IsFinished() and not Bank.IsOpen() do
  begin
    if Booth.WalkClick() then
      WaitUntil(Bank.IsOpen(), 250, 8000);
  end;

  if not Bank.IsOpen() then
    Exit(False);

  if Inventory.CountEmptySlots() < 28 then
    Bank.DepositAll();

  WaitUntil(Inventory.CountEmptySlots() > 25, 150, 2000);

  if not Self.WithdrawNextRun() then
  begin
    Self.DebugLn("Failed to get bank items");
    Bank.DepositAll();
    Bank.Close();
    BirdhouseRunner.IsDisabled := True;
    Exit(False);
  end;

  for Rune in RuneArray do
  begin
    RuneBankItem := TRSBankItem.Setup(Rune, 10, False);
    Bank.WithdrawItem(RuneBankItem, False);
    WaitEx(500, 450);
  end;

  WaitEx(325, 250);

  Result := Bank.Close(50);
end;

procedure TBirdHouseInclude.OnComplete(); override;
  var
  i: Int32;
begin
  WriteDebug('Completed a birdhouse run');

  ReturnSeers();

  for i := 0 to High(Antiban.Tasks) do
    Antiban.Tasks[i].Countdown.Resume();
end;

begin
  GUI.Run();
  Init();

  repeat
    Loop();
  until ShouldStop();
end.
