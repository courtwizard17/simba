program woodcutter;
{$I WaspLib/osr.simba}
{$I ../Includes/BirdhouseInclude.simba}

type
  ETreeType = (NORMAL_TREE, OAK_TREE, WILLOW_TREE, MAPLE_TREE, YEW_TREE, MAGIC_TREE);
  EState = (GATHER_LOGS, DEPOSIT_LOGS, BIRDHOUSE_RUN, TERMINATE, LOGIN_PLAYER);

  TTree = record
    Finder: TRSObjectFinder;
    UpTexts: TStringArray;
    ChoppingArea: TBox;
    ChoppingTime: Int32;
    Bank: TRSObject;
    Log: TRSItem;
  end;

  TWoodcutterGUI = record (TScriptForm)
    BlockInputCheckbox, BirdhouseCheckbox: TLabeledCheckBox;
    BreakForInput, BreakAfterInput: TLabeledEdit;
    TreeTypeInput: TLabeledCombobox;
  end;

var
  InactivityTimer, ReportTimer: TStopwatch;
  BlockInput, DoBirdhouseRuns: Boolean;
  BreakFor, BreakAfter, StartXP, CurrentXP,
  GainedXP, LogsChopped: Int32;
  TreeType: ETreeType;
  GUI: TWoodcutterGUI;
  RSW: TRSWalker;
  Tree: TTree;

procedure TWoodcutterGUI.StartScript(Sender: TObject); override;
begin
  DoBirdhouseRuns := Self.BirdhouseCheckbox.IsChecked();
  BreakFor := Self.BreakForInput.GetText().ExtractInteger();
  BlockInput := Self.BlockInputCheckbox.IsChecked();
  BreakAfter := Self.BreakAfterInput.GetText().ExtractInteger();
  TreeType := ETreeType(Self.TreeTypeInput.GetItemIndex());
  inherited;
end;

procedure TWoodcutterGUI.Run(); override;
var
  Tab: TTabSheet;
begin
  Self.Setup('Woodcutter', Point(800, 500), False);
  Self.Start.SetOnClick(@Self.StartScript);
  Self.AddTab('Settings');

  Tab := Self.GetTab('Settings');

  with Self.BreakAfterInput do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(160));
    SetCaption('Break after:');
    SetText('60');
  end;

  with Self.BlockInputCheckbox do
  begin
    Create(Tab);
    SetCaption('Block Real Input');
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(310));
    SetChecked(True);
  end;

  with Self.BreakForInput do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(220));
    SetCaption('Break for:');
    SetText('10');
  end;

  with Self.BirdhouseCheckbox do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(270));
    SetCaption('Do birdhouse runs');
  end;

  with Self.TreeTypeInput do
  begin
    Create(Tab);
    SetCaption('Logs:');
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(160));
    AddItemArray(['Normal', 'Oak', 'Willow', 'Maple', 'Yew', 'Magic']);
    SetItemIndex(Ord(ETreeType.NORMAL_TREE));
  end;

  Self.CreateAccountManager(Tab);
  Self.CreateBirdhouseRunSettings();
  inherited;
end;

procedure PauseTimer(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Pause();
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Resume();
  T := Task;
end;

function MockAntiban(): Boolean;
begin
  Antiban.DoAntiban(False, False);
  Result := False;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(450, 2750));
end;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

procedure SetupAntiban();
begin
  Antiban.AddTask(ONE_MINUTE * 3, @Antiban.SmallRandomMouse, 1);
  Antiban.AddTask(ONE_MINUTE * 3, @Antiban.SmallCameraRotation, 1);
  Antiban.AddTask(ONE_MINUTE * 5, @Antiban.RandomRightClick, 1);
  Antiban.AddTask(ONE_MINUTE * 5, @Antiban.DoLoseFocus, 1);
  Antiban.AddTask(ONE_MINUTE * 7, @Antiban.RandomRotate, 1);
  Antiban.AddBreak(BreakAfter * ONE_MINUTE, BreakFor * ONE_MINUTE, 0.3, 1);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

function HasGainedXP(): Boolean;
var
  TempValue: Int32;
begin
  if RSClient.IsLoggedIn() then
    CurrentXP := XPBar.Read();

  TempValue := GainedXP;
  GainedXP  := CurrentXP - StartXP;

  Result := GainedXP > TempValue;
end;

procedure TerminateWoodcutter();
begin
  if not RSClient.IsLoggedIn() then
    TerminateScript('We were not logged in, terminating instantly.');

  if Logout.ClickLogout() then
    TerminateScript('Logged out successfully, terminating.');
end;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  Hours := GetTimeRunning()/3600000;
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');
  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);
  ReportTimer.Reset();
end;

procedure SetupTree();
begin
  case TreeType of
    NORMAL_TREE:
    begin
      Tree.Finder.ColorClusters += [CTS2(1794645, 6, 0.13, 1.49), CTS2(2904399, 17, 0.06, 0.90), 4];
      Tree.Finder.Grow := 8;
      Tree.Finder.ClusterDistance := 1;
      Tree.ChoppingArea := [6222, 2636, 6318, 2705];
      Tree.UpTexts := ['wn Tr', 'Tree'];
      Tree.Log := 'Logs';
      Tree.Bank.SetupUpText(['nk boo','Bank booth']);
      Tree.Bank.Setup(6, [[6288, 2471]]);
      Tree.Bank.Finder.Colors += CTS2(6980239, 12, 0.03, 0.78);
    end;

    OAK_TREE:
    begin
      Tree.Finder.ColorClusters += [CTS2(1794645, 6, 0.13, 1.49), CTS2(2904399, 17, 0.06, 0.90), 4];
      Tree.Finder.Grow := 8;
      Tree.Finder.ClusterDistance := 1;
      Tree.ChoppingArea := [6264, 2513, 6295, 2540];
      Tree.UpTexts := ['wn Oa', 'Oak'];
      Tree.Log := 'Oak logs';
      Tree.ChoppingTime := 15000;
      Tree.Bank.SetupUpText(['nk boo','Bank booth']);
      Tree.Bank.Setup(6, [[6288, 2471]]);
      Tree.Bank.Finder.Colors += CTS2(6980239, 12, 0.03, 0.78);
    end;

    WILLOW_TREE:
    begin
      Tree.Finder.ColorClusters += [CTS2(3630179, 5, 0.79, 1.37), CTS2(2970449, 2, 1.72, 4.01), 2];
      Tree.Finder.Grow := 6;
      Tree.Finder.ClusterDistance := 1;
      Tree.ChoppingArea := [6202, 2386, 6255, 2422];
      Tree.UpTexts := ['wn Wi', 'Willow'];
      Tree.Log := 'Willow logs';
      Tree.ChoppingTime := 40000;
      Tree.Bank.SetupUpText(['nk boo','Bank booth']);
      Tree.Bank.Setup(6, [[6288, 2471]]);
      Tree.Bank.Finder.Colors += CTS2(6980239, 12, 0.03, 0.78);
    end;

    MAPLE_TREE:
    begin
      Tree.Finder.ColorClusters += [CTS2(13908, 7, 0.37, 0.01), CTS2(23438, 3, 0.74, 0.01), 4];
      Tree.Finder.Grow := 8;
      Tree.Finder.ClusterDistance := 1;
      Tree.ChoppingArea := [6267, 2433, 6336, 2460];
      Tree.UpTexts := ['wn Map', 'Maple'];
      Tree.Log := 'Maple logs';
      Tree.ChoppingTime := 55000;
      Tree.Bank.SetupUpText(['nk boo','Bank booth']);
      Tree.Bank.Setup(6, [[6288, 2471]]);
      Tree.Bank.Finder.Colors += CTS2(6980239, 12, 0.03, 0.78);
    end;

    YEW_TREE:
    begin
      Tree.Finder.ColorClusters += [CTS2(1919809, 4, 0.52, 1.79), CTS2(1730145, 15, 0.08, 2.88), 3];
      Tree.Finder.Grow := 6;
      Tree.Finder.ClusterDistance := 1;
      Tree.ChoppingArea := [6400, 2708, 6468, 2748];
      Tree.UpTexts := ['wn Yew', 'Yew'];
      Tree.Log := 'Yew logs';
      Tree.ChoppingTime := 93000;
      Tree.Bank.SetupUpText(['nk boo','Bank booth']);
      Tree.Bank.Setup(6, [[6629, 2679]]);
      Tree.Bank.Finder.Colors := [CTS2(3234414, 8, 0.18, 5.08)];
    end;

    MAGIC_TREE:
    begin
      Tree.Finder.ColorClusters += [CTS2(3695708, 4, 0.27, 2.85), CTS2(8639705, 22, 0.01, 1.73), 4];
      Tree.Finder.Grow := 8;
      Tree.Finder.ClusterDistance := 1;
      Tree.ChoppingArea := [6136, 2720, 6193, 2760];
      Tree.UpTexts := ['wn Magic', 'Magic'];
      Tree.Log := 'Magic logs';
      Tree.ChoppingTime := 98750;
      Tree.Bank.SetupUpText(['nk boo','Bank booth']);
      Tree.Bank.Setup(6, [[6629, 2679]]);
      Tree.Bank.Finder.Colors := [CTS2(3234414, 8, 0.18, 5.08)];
    end;
  end;
end;

procedure Init();
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  WaitUntil(RSClient.IsLoggedIn(), 250, 12000);

  StartXP := XPBar.Read();

  if StartXP < 1024 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  if DoBirdhouseRuns then
    BirdHouseRunner.Init();

  if Options.GetNPCAttackOption() <> ERSAttackOption.HIDDEN then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN);

  if not InRange(Options.GetZoomLevel(), 0, 15) then
    Options.SetZoomLevel(Random(2, 10));

  if not BlockInput then
  begin
    WLSettings.RemoteInput.BlockInput := False;
    RSClient.RemoteInput.EnableRealInput();
  end;

  RSW.SetupRegion([6000, 2200, 8000, 5000], 4);

  SetupAntiban();
  SetupTree();

  InactivityTimer.Start();
  ReportTimer.Start();
end;

function ShouldDeposit(): Boolean;
begin
  if Inventory.ContainsAny(['Feather']) then
    Exit(True);

  if Inventory.IsFull() then
    Exit(True);

  Exit(False);
end;

function GetState(): EState;
begin
  if not RSClient.IsLoggedIn() then
    Exit(LOGIN_PLAYER);

  if InactivityTimer.ElapsedTime() > 300000 then
    Exit(TERMINATE);

  if DoBirdhouseRuns then
    if BirdhouseRunner.CanDoBirdHouseRun() then
      Exit(BIRDHOUSE_RUN);

  if ShouldDeposit() then
    Exit(DEPOSIT_LOGS);

  Exit(GATHER_LOGS);
end;

function HoverTree(TreeATPA: T2DPointArray): Boolean;
var
  TPA: TPointArray;
begin
  TreeATPA.SortByMiddle(Mainscreen.GetPlayerBox.Center());

  for TPA in TreeATPA do
  begin
    Mouse.HumanMove(TPA.Mean());
    if Mainscreen.IsUpText(Tree.UpTexts, 175) then
      Exit(True);
  end;

  Exit(False);
end;

function IsAnimating(): Boolean;
var
  Timer: TCountdown;
begin
  Timer.Init(SRL.NormalRange(1850, 2550));
  while not Timer.IsFinished() do
    if SRL.PercentShift(MainScreen.GetPlayerBox(), 325) > 8 then
      Exit(True);

  WriteDebug('Stopped animating.');
  Exit(False);
end;

procedure WaitChopping();
var
  RandomizedWaitTime: Int32;
begin
  RandomizedWaitTime := Floor(SRL.SkewedRand(Tree.ChoppingTime, Tree.ChoppingTime*0.7, Tree.ChoppingTime*1.3));
  WaitUntil(MockAntiban() or not IsAnimating() or Inventory.IsFull(), 250, RandomizedWaitTime);
end;

procedure ChopTree();
begin
  if not Mainscreen.IsUpText(Tree.UpTexts) then
    Exit()
  else
    Mouse.Click(MOUSE_LEFT);

  if TreeType = NORMAL_TREE then
    XPBar.WaitXp(15750)
  else if XPBar.WaitXP(Tree.ChoppingTime) then
    WaitChopping();
end;

procedure GatherLogs();
var
  Pos: TPoint := RSW.GetMyPos();
  ATPA: T2DPointArray;
  Hovered: Boolean;
begin
  if not Tree.ChoppingArea.Contains(Pos) then
    RSW.WalkBlind(Tree.ChoppingArea.Center, 2);

  ATPA := Mainscreen.FindObject(Tree.Finder);

  if ATPA.Len < 1 then
    Exit();

  ATPA.FilterSize(300, 7525);
  RSClient.Image.DrawATPA(ATPA);
  Hovered := HoverTree(ATPA);
  RSClient.Image.Clear();

  if not Hovered then
    Antiban.RandomRotate()
  else
    ChopTree();
end;

procedure DepositLogs();
begin
  WriteDebug('Walking to bank.');

  if Tree.Bank.WalkClick() then
    WaitUntil(Bank.IsOpen(), 250, 15000)
  else
    WriteDebug('Failed to WalkClick bank!');

  if not Bank.IsOpen() then
    Exit();

  LogsChopped += Inventory.CountItem(Tree.Log);

  if Bank.DepositAll() then
    WaitEx(575, 225);

  if Bank.Close(50) then
    WaitEx(575, 225);

  WriteDebug(ToStr('Logs banked: ', LogsChopped));
end;

procedure Loop();
var
  State: EState;
begin
  Antiban.DoAntiban();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if RSInterface.IsOpen() then
    RSInterface.Close();

  if HasGainedXP() then
    InactivityTimer.Reset();

  if ReportTimer.ElapsedTime() > 120000 then
    PrintProgress();

  State := GetState();
  WriteDebug(ToStr('State: ', State));

  case State of
    BIRDHOUSE_RUN: BirdhouseRunner.DoBirdHouseRun();
    LOGIN_PLAYER: Login.LoginPlayer();
    DEPOSIT_LOGS: DepositLogs();
    GATHER_LOGS: GatherLogs();
    TERMINATE: TerminateWoodcutter();
  end;

  WaitEx(75, 70);
end;

function TBirdHouseInclude.OnStart() : Boolean; override;
var
  RuneArray: TRSItemArray := ['Law rune', 'Air rune'];
  RuneBankItem: TRSBankItem;
  BankTimeout: TCountdown;
  Rune: TRSItem;
  i: Int32;
begin
  WriteDebug('Starting a birdhouse run');

  for i := 0 to High(Antiban.Tasks) do
    Antiban.Tasks[i].Countdown.Pause();

  BankTimeout.Init(68750);

  while not BankTimeOut.IsFinished() and not Bank.IsOpen() do
  begin
    Tree.Bank.WalkClick();
    WaitUntil(Bank.IsOpen(), 250, 8000);
  end;

  if not Bank.IsOpen() then
  begin
    Self.DebugLn("Failed to get to bank");
    Exit(False);
  end;

  if Inventory.CountEmptySlots() < 28 then
    Bank.DepositAll();

  WaitUntil(Inventory.CountEmptySlots() > 25, 150, 2000);

  if not Self.WithdrawNextRun() then
  begin
    Self.DebugLn("Failed to get bank items");
    Bank.DepositAll();
    Bank.Close();
    BirdhouseRunner.IsDisabled := True;
    Exit(False);
  end;

  for Rune in RuneArray do
  begin
    RuneBankItem := TRSBankItem.Setup(Rune, 10, False);
    Bank.WithdrawItem(RuneBankItem, False);
    WaitEx(500, 450);
  end;

  WaitEx(325, 250);
  Bank.Close(60);
  Result := True;
end;

procedure TBirdHouseInclude.OnComplete(); override;
var
  i: Int32;
begin
  WriteDebug('Completed a birdhouse run');

  for i:= 0 to 5 do
  begin
    if Magic.CastSpell(ERSSpell.CAMELOT_TELEPORT) then
    begin
      Wait(5000);
      Break();
    end else
      WriteDebug('Failed to cast return teleport!');
  end;

  for i := 0 to High(Antiban.Tasks) do
    Antiban.Tasks[i].Countdown.Resume();
end;

begin
  GUI.Run();
  Init();

  repeat
    Loop();
  until False;
end.
