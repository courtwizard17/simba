program smelter;
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 2;
  ItemFinder.Similarity := 0.999999;
end;

type
  EMode = (STEEL, CBALLS);

  TObj = record
    Tile: TPoint;
    UpText: String;
    WalkTile: TPoint;
    Color: TCTS2Color;
  end;

var
  Mode: EMode;
  RSW: TRSWalker;
  Booth, Furnace: TObj;
  Timer, ReportTimer: TStopwatch;
  StartXP, CurrentXP, GainedXP: Int32;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  if ReportTimer.ElapsedTime() < 60000 then
    Exit();

  Hours := (GetTimeRunning()/3600000);
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');
  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);

  ReportTimer.Reset();
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(800,3500));
end;

procedure CalculateXP();
var
  TempValue: Int32;
begin
  CurrentXP := XPBar.Read();
  TempValue := GainedXP;
  GainedXP  := (CurrentXP - StartXP);

  if GainedXP > TempValue then
    Timer.Reset();

  if Timer.ElapsedTime > 300000 then
    TerminateScript('No Gained XP in 5 mins, stopping!');
end;

procedure KeyboardRotate();
var
  a: Integer;
begin
  if SRL.Dice(50) then
    a := $25
  else
    a := $27;

  Keyboard.KeyDown(a);
  Sleep(SRL.NormalRange(250, 1550));
  Keyboard.KeyUp(a);
end;

procedure PauseTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  Timer.Pause();
  t := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  Timer.Resume();
  t := Task;
end;

procedure SetupAntiban();
begin
  Antiban.Skills := [ERSSKILL.SMITHING, ERSSKILL.TOTAL];
  Antiban.AddTask(ONE_MINUTE*2,   @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE*5,   @Antiban.HoverMSPlayers);
  Antiban.AddTask(ONE_MINUTE*3,   @Antiban.DoLoseFocus);
  Antiban.AddTask(ONE_MINUTE*7,   @KeyboardRotate);
  Antiban.AddTask(ONE_MINUTE*8,   @Antiban.HoverMSNPCs);
  Antiban.AddTask(ONE_MINUTE*25,  @Antiban.HoverSkills);
  Antiban.AddBreak(77 * ONE_MINUTE, 8 * ONE_MINUTE, 0.3, 1);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

procedure InitiateScript();
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  WaitUntil(RSClient.IsLoggedIn(), 250, 12000);
  StartXP := XPBar.Read();

  if StartXP < 1 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  Options.SetNPCAttackOption(ERSAttackOption.HIDDEN);
  Options.SetZoomLevel(Random(0, 6));
  RSW.Setup();
  SetupAntiban();

  if Inventory.ContainsAny(['Ammo mould', 'Double ammo mould']) then
    Mode := CBALLS
  else
    Mode := STEEL;

  with Booth do
  begin
    Tile := [7784, 2476];
    WalkTile := [7780, 2464];
    UpText := 'booth';
  end;

  with Furnace do
  begin
    Tile := [7834, 2452];
    WalkTile := [7808, 2452];
    UpText := 'Furnace';
    Color := CTS2(3426150, 7, 0.14, 0.25);
  end;

  Timer.Start();
  ReportTimer.Start();
end;

function GetTileBounds(Tile: TPoint; Height, Expansion: Int32): TBox;
var
  Rect: TRectangle;
  Bds: TBox;
begin
  Rect := RSW.GetTileMs(Tile, Height);
  Bds := Rect.Bounds().Expand(Expansion);
  Bds.LimitTo(Mainscreen.Bounds());
  Result := Bds;
end;

function HasOres(): Boolean;
begin
  if not Inventory.ContainsItem('Iron ore') then
    Exit(False);

  if Inventory.CountItem('Coal') < 2 then
    Exit(False);

  Exit(True);
end;

function HasMaterials(): Boolean;
begin
  case Mode of
    CBALLS: Result := Inventory.ContainsItem('Steel bar');
    STEEL: Result := HasOres();
  end;
end;

function WaitProcessing(): Boolean;
begin
  Antiban.DoAntiban(False, False);
  case Mode of
    STEEL: Result := Inventory.CountItem('Coal') < 2;
    CBALLS: Result := not Inventory.ContainsItem('Steel bar');
  end;
end;

function FindObject(Obj: TObj): Boolean;
var
  Bounds: TBox;
  TPA: TPointArray;
begin
  Bounds := GetTileBounds(Obj.Tile, 2, 2);

  if Obj.Color.Color <> 0 then
  begin
    SRL.FindColors(TPA, Obj.Color, Bounds);

    if TPA.Len() = 0 then
      Exit(False)
    else
      Mouse.HumanMove(TPA.Mean());
  end else
    Mouse.HumanMove(Bounds.Center());

  Result := Mainscreen.IsUpText(Obj.UpText, 275);
end;

procedure Process();
begin
  if FindObject(Furnace) then
  begin
    Mouse.Click(MOUSE_LEFT);

    if not WaitUntil(Make.IsOpen(), 200, 12750) then
      Exit();

    WaitEx(675, 666);

    case Mode of
      CBALLS: Make.Select(0, Make.QUANTITY_ALL, True);
      STEEL: Make.Select(4, Make.QUANTITY_ALL, True);
    end;

    WaitUntil(WaitProcessing(), 200, 175000);
  end else
  begin
    if SRL.Dice(50) then
      RSW.WalkBlind(Furnace.WalkTile)
    else
      Antiban.RandomRotate();
  end;
end;

procedure WithdrawSteelBars();
var
  Materials: TRSItemArray := ['Iron ore', 'Coal'];
  Amounts: TIntegerArray := [9, 18];
  BankItem: TRSBankItem;
  i: Int32;
begin
  WaitEx(500, 450);
  Bank.DepositAll();
  WaitEx(500, 450);

  if SRL.Dice(50) then
  begin
    for i := 0 to High(Materials) do
    begin
      BankItem := [Materials[i], Amounts[i], False];
      Bank.WithdrawItem(BankItem, False);
      WaitEx(500, 450);
    end;
  end else
  begin
    for i := High(Materials) downto 0 do
    begin
      BankItem := [Materials[i], Amounts[i], False];
      Bank.WithdrawItem(BankItem, False);
      WaitEx(500, 450);
    end;
  end;
end;

procedure WithdrawCannonballs();
var
  BankItem: TRSBankItem := ['Steel Bar', -1, False];
begin
  Bank.WithdrawItem(BankItem, False);
end;

procedure Restock();
begin
  if FindObject(Booth) then
  begin
    Mouse.Click(MOUSE_LEFT);

    if not WaitUntil(Bank.IsOpen(), 200, 12750) then
      Exit();

    WaitEx(675, 666);

    case Mode of
      STEEL: WithdrawSteelBars();
      CBALLS: WithdrawCannonballs();
    end;

    WaitEx(675, 666);

    Bank.Close(55);
  end else
  begin
    if SRL.Dice(50) then
      RSW.WalkBlind(Booth.WalkTile)
    else
      Antiban.RandomRotate();
  end;
end;

procedure Smelt();
begin
  Antiban.DoAntiban();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if RSInterface.IsOpen() then
    RSInterface.Close(50);

  if not Minimap.IsRunEnabled then
    if Minimap.GetRunEnergy > 30 then
      Minimap.EnableRun();

  CalculateXP();
  PrintProgress();

  if HasMaterials then
    Process()
  else
    Restock();

  WaitEx(775, 555);
end;

begin
  InitiateScript();
  repeat
    Smelt();
  until false;
end.