program guildminer;
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0;
end;

type
  EOre = (COAL, IRON);

const
  BREAKAFTER = 60;
  BREAKFOR   = 6;

  EXTRA_ANTIBAN = True; (* Adds longer wait times and short breaks, "non-focused player" *)

var
  RSW: TRSWalker;
  Ore: EOre = IRON;
  F: TRSObjectFinder;
  BankChest: TRSObject;
  UpText: TStringArray;
  OreTiles: TPointArray;
  Timer, ReportTimer: TStopwatch;
  StartXP, CurrentXP, GainedXP: Int32;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  if ReportTimer.ElapsedTime() < 60000 then
    Exit();

  Hours := (GetTimeRunning()/3600000);
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');
  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);

  ReportTimer.Reset();
end;

procedure CalculateXP();
var
  TempValue: Int32;
begin
  CurrentXP := XPBar.Read();
  TempValue := GainedXP;
  GainedXP  := (CurrentXP - StartXP);

  if GainedXP > TempValue then
    Timer.Reset();

  if Timer.ElapsedTime() > 300000 then
    TerminateScript('No Gained XP in 5 mins, stopping!');
end;

procedure KeyboardRotate();
var
  a: Integer;
begin
  if SRL.Dice(50) then
    a := $25
  else
    a := $27;

  Keyboard.KeyDown(a);
  Sleep(SRL.NormalRange(250, 1550));
  Keyboard.KeyUp(a);
end;

procedure PauseTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  Timer.Pause();
  t := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var
  t: PBreakTask;
begin
  Timer.Resume();
  t := Task;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(450, 2750));
end;

procedure SetupAntiban();
begin
  Antiban.Skills := [ERSSKILL.MINING, ERSSKILL.TOTAL];
  Antiban.AddTask(ONE_MINUTE * 2,  @Mouse.RandomMovement, 1);
  Antiban.AddTask(ONE_MINUTE * 10, @Antiban.HoverMSPlayers, 1);
  Antiban.AddTask(ONE_MINUTE * 10, @Antiban.DoLoseFocus, 1);
  Antiban.AddTask(ONE_MINUTE * 6,  @Antiban.RandomRotate, 1);
  Antiban.AddTask(ONE_MINUTE * 10, @KeyboardRotate, 1);
  Antiban.AddTask(ONE_MINUTE * 8,  @Antiban.HoverMSNPCs, 1);
  Antiban.AddTask(ONE_MINUTE * 25, @Antiban.HoverSkills, 1);
  Antiban.AddBreak(BREAKAFTER * ONE_MINUTE, BREAKFOR * ONE_MINUTE, 0.3, 1);

  if EXTRA_ANTIBAN then
    Antiban.AddBreak(ONE_SECOND * 100, ONE_SECOND * 5, 1, 0);

  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

function GetTileBounds(Tile: TPoint; Height, Expansion: Int32): TBox;
var
  Rect: TRectangle;
  Bds: TBox;
begin
  Rect := RSW.GetTileMs(Tile, Height);
  Bds := Rect.Bounds().Expand(Expansion);
  Bds.LimitTo(Mainscreen.Bounds());
  Result := Bds;
end;

procedure SetupIron();
begin
  OreTiles := [[6431, 596], [6435, 600]];
  UpText := ['Iron'];
  F.Colors += CTS2(2832212, 9, 0.06, 0.22);
  F.ClusterDistance := 10;
end;

procedure SetupCoal();
begin
  OreTiles := [[6411, 644], [6407, 640], [6399, 632],
               [6395, 612], [6411, 628], [6427, 636],
               [6431, 632], [6435, 624]];
  UpText := ['Coal'];
  F.Colors += CTS2(2833726, 10, 0.10, 0.51);
  F.ClusterDistance := 10;
end;

procedure InitiateScript();
begin
  RSW.Setup([[6000, 500, 6900, 800], [7100, 2900, 7850, 3400]], 2);

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  WaitUntil(RSClient.IsLoggedIn(), 250, 12000);
  StartXP := XPBar.Read();

  if StartXP < 69 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  Options.SetNPCAttackOption(ERSAttackOption.HIDDEN);
  Options.SetZoomLevel(Random(10, 20));

  case Ore of
    COAL: SetupCoal();
    IRON: SetupIron();
  end;

  BankChest.SetupUpText(['Bank']);
  BankChest.Setup(2, [[6383, 628]]);
  BankChest.Finder.Colors += CTS2(3948881, 11, 0.37, 1.05);

  Mouse.Speed := Random(14, 20);
  Mouse.Wind := Random(1, 3);
  RSW.AdaptiveWalk := True;

  SetupAntiban();

  Timer.Start();
  ReportTimer.Start();
end;

function TileHasOre(Tile: TPoint): Boolean;
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  Bounds: TBox;
begin
  Bounds := GetTileBounds(Tile, 1, 0);
  ATPA := Mainscreen.FindObject(F, Bounds);

  if ATPA.Len() = 0 then
    Exit(False);

  TPA := ATPA.Merge();
  Result := TPA.Len() > 10;
end;

function FindOre(out Tile: TPoint): Boolean;
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  Bounds: TBox;
  Pt: TPoint;
  i: Int32;
begin
  for i := 0 to High(OreTiles) do
  begin
    Tile := OreTiles[i];
    Bounds := GetTileBounds(Tile, 1, 0);
    ATPA := Mainscreen.FindObject(F, Bounds);

    if ATPA.Len() = 0 then
      Continue();

    TPA := ATPA.Merge();
    Pt := TPA.Mean();
    Mouse.HumanMove(Pt);

    if Mainscreen.IsUpText(UpText, 275) then
      Exit(True);
  end;

  Exit(False);
end;

procedure GatherOres();
var
  Pos, Tile: TPoint;
begin
  Pos := RSW.GetMyPos();
  OreTiles.Sort(Pos);

  if FindOre(Tile) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WaitUntil((not TileHasOre(Tile) or Inventory.IsFull()), 250, 12750);
  end else
  if SRL.Dice(50) then
    Antiban.RandomRotate()
  else
    RSW.WalkBlind(OreTiles[0]);
end;

procedure DepositOres();
begin
  if BankChest.Click() then
    WaitUntil(Bank.IsOpen(), 250, 12750)
  else
    RSW.WalkBlind(BankChest.Coordinates[0]);

  if not Bank.IsOpen() then
    Exit();

  Bank.DepositAll();
  WaitEx(555, 550);
  Bank.Close(55);
end;

procedure LoopScript();
begin
  Antiban.DoAntiban(False, False);

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if RSInterface.IsOpen() then
    RSInterface.Close(50);

  CalculateXP();
  PrintProgress();

  if Inventory.IsFull() then
    DepositOres()
  else
    GatherOres();

  WaitEx(444, 333);
end;

begin
  InitiateScript();
  repeat
    LoopScript();
  until false;
end.