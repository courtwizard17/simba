program wyrmcourse;
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0;
end;

const
  BREAK_AFTER   = 40;
  BREAK_FOR     = 10;

  BLOCK_INPUT   = False;
  EXTRA_ANTIBAN = True;

type
  TObstacle = record
    Height, Experience: Int32;
    UpText: TStringArray;
    Tile: TPoint;
    Area: TBox;
  end;

var
  Step, StartXP, CurrentXP, GainedXP: Int32;
  InactivityTimer, ReportTimer: TStopwatch;
  LadderFinder: TRSObjectFinder;
  Obstacles: Array of TObstacle;
  RSW: TRSWalker;

procedure AddObstacle(i: Int32; Tile: TPoint; UpText: TStringArray; Area: TBox; Height, Experience: Int32);
begin
  SetLength(Obstacles, i + 1);

  Obstacles[i].Tile := Tile;
  Obstacles[i].UpText := UpText;
  Obstacles[i].Area := Area;
  Obstacles[i].Experience:= Experience;

  if Height <> 0 then
    Obstacles[i].Height := Height;
end;

procedure SetupObstacles();
begin
  AddObstacle(0, [298, 98], ['Climb', 'Ladder'], [90, 5, 535, 263], 6, 35);
  AddObstacle(1, [900, 310], ['Cross', 'Tightrope'], [883, 272, 915, 312], 6, 72);
  AddObstacle(2, [872, 374], ['Climb', 'Ladder'], [860, 356, 886, 374], 2, 60);
  AddObstacle(3, [440, 608], ['Jump', 'Edge'], [439, 595, 466, 619], 0, 60);
  AddObstacle(4, [388, 604], ['Cross', 'Tightrope'], [377, 593, 407, 622], 0, 120);
  AddObstacle(5, [360, 504], ['Slide', 'Zipline'], [343, 496, 371, 520], 6, 320);
end;

function TRSWalker.GetTileMSEx(Me, Loc: TPoint; Height:Double=0; Offx,Offy:Double=0): TRectangle; override;
var
  angle: Double;
  vec: Vector3;
begin
  Loc   := Minimap.Center() + (Loc - Me);
  angle := Minimap.GetCompassAngle(False);
  vec   := Vec3(Loc.X,loc.Y).RotateXY(angle, Minimap.Center.X, Minimap.Center.Y);

  Result := Minimap.VectorToMSRect(vec + [-offx, -offy, height], 1, 1, angle);
end;

procedure PauseTimer(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Pause();
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Resume();
  T := Task;
end;

procedure RandomWait();
begin
  if SRL.Dice(10) then
    WaitEx(4000, 3850)
  else
    WaitEx(1000, 850);
end;

function HasGainedXP(): Boolean;
var
  TempValue: Int32;
begin
  if RSClient.IsLoggedIn() then
    CurrentXP := XPBar.Read();

  TempValue := GainedXP;
  GainedXP  := CurrentXP - StartXP;
  Result := GainedXP > TempValue;
end;

function TRectangle.RandomMean(): TPoint;
var
  Width, Height, Radius, Angle, Distance, RandX, RandY: Single;
  CenterX, CenterY: Single;
begin
  Width := Self.Right.X - Self.Left.X;
  Height := Self.Btm.Y - Self.Top.Y;
  CenterX := Self.Mean().X;
  CenterY := Self.Mean().Y;

  Radius := Min(Width, Height) / 2;
  Angle := Random * 2 * Pi;
  Distance := Power(Random, 2) * Radius;

  RandX := CenterX + Distance * Cos(Angle);
  RandY := CenterY + Distance * Sin(Angle);

  Result.X := Round(Max(Self.Left.X, Min(Self.Right.X, RandX)));
  Result.Y := Round(Max(Self.Top.Y, Min(Self.Btm.Y, RandY)));
end;

procedure CalculateXP();
var
  TempValue: Int32;
begin
  CurrentXP := XPBar.Read();
  TempValue := GainedXP;
  GainedXP  := (CurrentXP - StartXP);

  if GainedXP > TempValue then
    InactivityTimer.Reset();

  if InactivityTimer.ElapsedTime() > 300000 then
    TerminateScript('No Gained XP in 5 mins, stopping!');
end;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  Hours := GetTimeRunning()/3600000;
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');
  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);
  ReportTimer.Reset();
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(250, 1900));
end;

procedure SetupAntiban();
begin
  Antiban.AddTask(ONE_MINUTE * 2, @Antiban.RandomMouse, 1);
  Antiban.AddTask(ONE_MINUTE * 5, @Antiban.DoLoseFocus, 1);
  Antiban.AddTask(ONE_MINUTE * 6, @Antiban.RandomRotate, 1);
  Antiban.AddTask(ONE_MINUTE * 6, @Antiban.RandomRightClick, 1);

  Antiban.AddBreak(BREAK_AFTER * ONE_MINUTE, BREAK_FOR * ONE_MINUTE, 0.3, 1);

  if EXTRA_ANTIBAN then
    Mouse.Speed := Random(11, 15)
  else
    Mouse.Speed := Random(20, 26);

  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

procedure Init();
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if WaitUntil(RSClient.IsLoggedIn(), 250, 12000) then
    StartXP := XPBar.Read();

  if StartXP < 1024 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  if Options.GetNPCAttackOption() <> ERSAttackOption.HIDDEN then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN);

  RSW.SetupFromURL('https://i.imgur.com/y3GRqXP.png', 'wyrm.png', 4);
  RSW.AdaptiveWalk := True;

  if BLOCK_INPUT then
  begin
    WriteDebug('Script started with real input disabled.');
    WLSettings.RemoteInput.BlockInput := True;
    RSClient.RemoteInput.DisableRealInput();
  end else
  begin
    WriteDebug('Script started with real input enabled.');
    WLSettings.RemoteInput.BlockInput := False;
    RSClient.RemoteInput.EnableRealInput();
  end;

  with LadderFinder do
  begin
    Colors += CTS2(6330555, 8, 0.10, 1.64);
    Grow := 3;
    Erode := 1;
    ClusterDistance := 25;
  end;

  SetupObstacles();
  SetupAntiban();

  InactivityTimer.Start();
  ReportTimer.Start();
end;

function GetStep(): Int32;
var
  Pos: TPoint := RSW.GetMyPos();
  i: Int32;
begin
  for i := 0 to High(Obstacles) do
    if Obstacles[i].Area.Contains(Pos) then
      Exit(i);

  Exit(-1);
end;

function HoverLadder(): Boolean;
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  Rect: Trectangle;
  Bounds: TBox;
begin
  Rect := RSW.GetTileMS(Obstacles[0].Tile, 10);
  Bounds := Rect.Bounds().Expand(12);

  if not Mainscreen.Bounds().Contains(Bounds) then
    Exit(False);

  ATPA := Mainscreen.FindObject(LadderFinder, Bounds);

  if ATPA.Len() = 0 then
    Exit(False)
  else
    TPA := ATPA.Merge();

  Mouse.HumanMove(TPA.Mean());

  WaitEx(175, 150);

  Result := Mainscreen.IsUpText('Ladder');
end;

function FindObstacle(Obs: TObstacle): Boolean;
var
  Rect: TRectangle;
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  Rect := RSW.GetTileMS(Obs.Tile, Obs.Height);

  if not Mainscreen.Bounds.Contains(Rect) then
    Exit(False);

  for 0 to SRL.NormalRange(1, 3) do
  begin
    Mouse.HumanMove(Rect.RandomMean());
    WaitEx(150, 125);

    if Mainscreen.IsUpText(Obs.UpText, 175) then
      Exit(True);
  end;
end;

procedure GroundStep();
var
  Experience: Int32;
  Found: Boolean;
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  if RSW.GetMyPos().DistanceTo(Obstacles[0].Tile) < 10 then
    Found := FindObstacle(Obstacles[0])
  else
    Found := HoverLadder();

  if Found then
  begin
    Experience := XPBar.Read();
    Mouse.Click(MOUSE_LEFT);
    WaitUntil((Experience + Obstacles[0].Experience) < XPBar.Read(), 575, 22775);
    Wait(200);
    Exit();
  end;

  if SRL.Dice(50) then
    Antiban.RandomRotate()
  else
    RSW.WalkBlind(Obstacles[0].Tile);
end;

procedure NormalStep(Step: Int32);
var
  Experience: Int32;
  Found: Boolean;
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  Experience := XPBar.Read();
  Found := FindObstacle(Obstacles[Step]);

  if Found then
  begin
    Mouse.Click(MOUSE_LEFT);
    WaitUntil((Experience + Obstacles[Step].Experience) < XPBar.Read(), 575, 22775);

    if EXTRA_ANTIBAN then
      RandomWait()
    else
      WaitEx(250, 245);
  end else
  begin
    if not RSW.GetMypos().InBox(Obstacles[Step].Area) then
      Exit();

    if SRL.Dice(50) then
      RSW.WalkBlind(Obstacles[Step].Tile)
    else
      Antiban.RandomRotate();
  end;
end;

procedure Loop();
begin
  Antiban.DoAntiban();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if RSInterface.IsOpen() then
    RSInterface.Close(50);

  if HasGainedXP() then
    InactivityTimer.Reset();

  if ReportTimer.ElapsedTime() > 120000 then
    PrintProgress();

  Step := GetStep();

  case Step of
    -1: Wait(2000);
     0: GroundStep();
  else
    NormalStep(Step);
  end;

  WaitEx(250, 225);
end;

begin
  Init();

  repeat
    Loop();
  until False;
end.
