program pickpocketer;
{$I WaspLib/osr.simba}
{$I chores.simba}

begin
  Login.PlayerIndex := 0;
end;

const
  BREAKAFTER  = 45;
  BREAKFOR    = 5;
  FOODAMOUNT  = 12;
  FOODNAME    = 'Bass';

  BIRDHOUSES  = True;
  INTERVAL    = 40 * ONE_MINUTE;
  SEED        = 'Potato';

var
  StartXP, CurrentXP, GainedXP, MinHP: Int32;
  InactivityTimer, ReportTimer: TStopwatch;
  ThievArea, BankArea: TPointArray;
  ReturnSpell: ERSSpell;
  Runes: TRSItemArray;
  Booth: TRSObject;
  Logs: ERSLogType;
  CityArea: TBox;
  RSW: TRSWalker;
  Food: TRSItem;

procedure OnBreakEnd(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Resume();
  T := Task;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(450, 2750));
end;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

function HasGainedXP(): Boolean;
var
  TempValue: Int32;
begin
  CurrentXP := XPBar.Read();
  TempValue := GainedXP;
  GainedXP  := CurrentXP - StartXP;
  Result := GainedXP > TempValue;
end;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  Hours := GetTimeRunning()/3600000;
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');
  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);
  ReportTimer.Reset();
end;

procedure OnBreakStart(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Pause();
  T := Task;
end;

procedure SetupAntiban();
begin
  Antiban.AddTask(ONE_MINUTE  * 4, @Antiban.RandomRightClick, 1);
  Antiban.AddTask(ONE_MINUTE  * 2, @Antiban.RandomMouse, 1);
  Antiban.AddTask(ONE_MINUTE  * 5, @Antiban.RandomRotate, 1);
  Antiban.AddTask(ONE_MINUTE  * 4, @Antiban.DoLoseFocus, 1);

  Antiban.AddBreak(ONE_MINUTE * 6, ONE_SECOND * 5, 1, 0);
  Antiban.AddBreak(BREAKAFTER * ONE_MINUTE, BREAKFOR * ONE_MINUTE, 0.3, 1);

  Antiban.OnStartBreak := @OnBreakStart;
  Antiban.OnFinishBreak := @OnBreakEnd;
end;

procedure Init();
var
  ArdougneBank: TPointArray := [[5987, 3297], [6015, 3297], [6015, 3330], [5987, 3330]];
  ArdougneBankBoothTile: TPoint := [6016, 3304];
  ArdougneCityArea: TBox := [5888, 3166, 6112, 3391];
  DraynorBank: TPointArray := [[7754, 3463], [7784, 3462], [7784, 3490], [7754, 3489]];
  DraynorBankBoothTile: TPoint := [7758, 3468];
  DraynorCityArea: TBox := [7700, 3200, 8500, 3800];
  DraynorMarketArea: TPointArray := [[7686, 3425], [7740, 3428], [7741, 3472], [7685, 3473]];
  Pos: TPoint;
begin
  if BIRDHOUSES then
  begin
    Logs := BirdHouseRunner.GetLogForHunterLevel(Stats.GetLevel(ERSSkill.HUNTER, False));
    WriteDebug(ToStr('Logtype for birdhouses based on level: ', Logs));
    BirdHouseRunner.Setup(Logs, SEED, False, INTERVAL, False);
    BirdHouseRunner.Init();
  end;

  Mouse.Speed := SRL.NormalRange(22, 28);

  RSW.Setup();
  SetupAntiban();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  WaitUntil(RSClient.IsLoggedIn(), 250, 12000);

  StartXP := XPBar.Read();

  if StartXP < 1 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  if Options.GetNPCAttackOption() <> ERSAttackOption.HIDDEN then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN);

  if not InRange(Options.GetZoomLevel(), 10, 25) then
    Options.SetZoomLevel(Random(10, 25));

  MinHP := Floor(Minimap.GetHPLevel() * 0.5);
  WriteDebug(ToStr('Will eat at HP: ', MinHP));

  Pos := RSW.GetMyPos();

  if ArdougneCityArea.Contains(Pos) then
  begin
    WriteDebug('Setting up at Ardougne Knights.');
    BankArea := ArdougneBank;
    ThievArea := ArdougneBank;
    CityArea := ArdougneCityArea;
    Booth.SetupUpText(['Bank','Bank booth']);
    Booth.Setup(6, [ArdougneBankBoothTile]);
    Booth.Finder.Colors += CTS2(6251367, 1, 1.67, 1.48);
    Runes := ['Law rune', 'Water rune'];
    ReturnSpell := ERSSpell.ARDOUGNE_TELEPORT;
  end
  else if DraynorCityArea.Contains(Pos) then
  begin
    WriteDebug('Setting up at Draynor farmer.');
    BankArea := DraynorBank;
    ThievArea := DraynorMarketArea;
    CityArea := DraynorCityArea;
    Booth.SetupUpText(['Bank','Bank booth']);
    Booth.Setup(6, [DraynorBankBoothTile]);
    Booth.Finder.Colors += CTS2(6251367, 1, 1.67, 1.48);
    Runes := ['Air rune', 'Law rune', 'Earth rune'];
    ReturnSpell := ERSSpell.LUMBRIDGE_TELEPORT;
  end;

  Food := FOODNAME;
  InactivityTimer.Start();
  ReportTimer.Start();
end;

procedure Restock();
var
  Item: TRSBankItem := [Food, FOODAMOUNT, False];
begin
  if not Bank.IsOpen() then
    if Booth.WalkClick(True, 3) then
      WaitUntil(Bank.IsOpen(), 250, 5750);

  if not Bank.IsOpen() then
    Exit();

  if Bank.DepositAll() then
    WaitEx(500, 495);

  if Bank.WithdrawItem(Item, False) then
    WaitEx(500, 495);

  if Bank.Close(60) then
    WaitEx(1500, 1495);
end;

procedure Steal();
var
  Experience: Int32;
begin
  Experience := XPBar.Read();

  Mouse.Click(MOUSE_LEFT);

  if Mainscreen.DidRedClick() then
    WaitUntil(Experience < XPBar.Read(), 250, SRL.NormalRange(4500, 4750));
end;

procedure Pickpocket();
var
  TPA: TPointArray;
begin
  if Mainscreen.IsUpText('cket') then
  begin
    Steal();
    Exit();
  end;

  if not RSW.InPoly(ThievArea) then
    RSW.WebWalk(ThievArea.Mean());

  SRL.FindColors(TPA, CTS2(16711935, 1, 0.01, 0.01), Mainscreen.Bounds());

  if TPA.Len() = 0 then
    Exit();

  Mouse.HumanMove(TPA.Mean());

  if Mainscreen.IsUpText('cket') then
    Steal();
end;

procedure HandlePouches();
var
  Item: TRSItem := 'Coin pouch';
  Pouches: Int32;
begin
  Pouches := Inventory.CountItemStack(Item);

  if Pouches < 5 then
    Exit();

  if Pouches < 20 then
    if SRL.Dice(95) then
      Exit();

  Inventory.ClickItem(Item);
end;

procedure Loop();
begin
  Antiban.DoAntiban();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if RSInterface.IsOpen() then
    RSInterface.Close();

  if Minimap.GetHPLevel() < MinHP then
    if not Inventory.ClickItem(Food) then
      TerminateScript('Could not eat food, possible out of it?');

  if HasGainedXP() then
    InactivityTimer.Reset();

  if InactivityTimer.ElapsedTime() > 300000 then
    TerminateScript('No XP gained in 5 minutes.');

  if ReportTimer.ElapsedTime() > 120000 then
    PrintProgress();

  if BIRDHOUSES then
    if BirdHouseRunner.CanDoBirdHouseRun() then
      BirdHouseRunner.DoBirdHouseRun();

  HandlePouches();

  if ((Inventory.CountEmptySlots() < 2) or (Inventory.CountItem(Food) = 0)) then
  begin
    Restock();
    Exit();
  end;

  if InactivityTimer.ElapsedTime() > 30000 then
    Antiban.RandomRotate();

  Pickpocket();

  WaitEx(500, 450);
end;

function TBirdHouseInclude.OnStart(): Boolean; override;
var
  BankTimeout: TCountdown;
  Item: TRSBankItem;
  i, j: Int32;
begin
  WriteDebug('Starting a Birdhouse Run');

  for i := 0 to High(Antiban.Tasks) do
    Antiban.Tasks[i].Countdown.Pause();

  BankTimeout.Init(45000);

  while not BankTimeOut.IsFinished() and not Bank.IsOpen() do
  begin
    Booth.WalkClick();
    WaitUntil(Bank.IsOpen(), 250, 7500);
  end;

  if not Bank.IsOpen() then
    Exit(False);

  if Inventory.CountEmptySlots() < 28 then
  begin
    Bank.DepositAll();
    WaitUntil(Inventory.CountEmptySlots() > 25, 150, 2000);

    if not Self.WithdrawNextRun() then
    begin
      Self.DebugLn("Failed to get bank items");
      Bank.DepositAll();
      Bank.Close();
      BirdhouseRunner.IsDisabled := True;
      Exit(False);
    end;

    for j := 0 to High(Runes) do
    begin
      Item := TRSBankItem.Setup(Runes[j], 10, False);
      Bank.WithdrawItem(Item, False);
      WaitEx(500, 450);
    end;
    Bank.Close(60);
  end;

  Result := True;
end;

procedure TBirdHouseInclude.OnComplete(); override;
var
  i: Int32;
begin
  WriteDebug('Birdhouse run completed');

  Magic.CastSpell(ReturnSpell);
  WaitEx(5750, 750);

  for i := 0 to High(Antiban.Tasks) do
    Antiban.Tasks[i].Countdown.Resume();
end;

begin
  Init();

  repeat
    Loop();
  until False;
end.
