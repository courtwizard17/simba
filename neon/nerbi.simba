program villisika;
{$I WaspLib/osr.simba}

{$IFHASFILE Includes/chores.simba}
  {$I chores.simba}
{$ELSE}
  begin
    WriteLn('Chore include not found, downloading it now.');
    DownloadToFile('https://raw.githubusercontent.com/courtwizard17/simba/refs/heads/main/chores.simba', 'Includes/chores.simba');
    TerminateScript('Chore include downloaded, restart the script.');
  end;
{$ENDIF}

type
  EState = (PRINT_PROGRESS, RESET_TIMER, CLOSE_INTERFACE, HANDLE_LOGIN, ROTATE,
            TERMINATE_SCRIPT, DO_ANTIBAN, DO_BREAK, DEPOSIT_LOOT, BIRDHOUSE_RUN,
            HARVEST, INSPECT, SMALL_MOVE, TO_OBJECT, RE_LOG, TO_START);

  THerbiGUI = record (TScriptForm)
    BlockInputCheckbox, BirdhouseCheckbox: TLabeledCheckBox;
    BreakForInput, BreakAfterInput: TLabeledEdit;
    ProfileInfo, ProfileTitle: TLabel;
  end;

var
  BreakFor, BreakAfter, StartXP, CurrentXP, GainedXP: Int32;
  InactivityTimer, ReportTimer: TStopwatch;
  BlockInput, DoBirdhouseRuns: Boolean;
  Objecter: TRSObjectFinder;
  Chest: TRSObject;
  GUI: THerbiGUI;
  RSW: TRSWalker;

procedure THerbiGUI.StartScript(Sender: TObject); override;
begin
  DoBirdhouseRuns := Self.BirdhouseCheckbox.IsChecked();
  BreakFor := Self.BreakForInput.GetText().ExtractInteger();
  BlockInput := Self.BlockInputCheckbox.IsChecked();
  BreakAfter := Self.BreakAfterInput.GetText().ExtractInteger();
  inherited;
end;

procedure THerbiGUI.Run(); override;
var
  Tab: TTabSheet;
begin
  Self.Setup('Herbi', Point(800, 500), False);
  Self.Start.SetOnClick(@Self.StartScript);
  Self.AddTab('Settings');

  Tab := Self.GetTab('Settings');
  Tab.SetTooltip('');

  with Self.BreakAfterInput do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(160));
    SetCaption('Break after:');
    SetText('60');
  end;

  with Self.BlockInputCheckbox do
  begin
    Create(Tab);
    SetCaption('Block Real Input?');
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(260));
  end;

  with Self.BreakForInput do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(30));
    SetTop(TControl.AdjustToDPI(220));
    SetCaption('Break for:');
    SetText('10');
  end;

  with Self.BirdhouseCheckbox do
  begin
    Create(Tab);
    SetLeft(TControl.AdjustToDPI(380));
    SetTop(TControl.AdjustToDPI(235));
    SetCaption('Do birdhouse runs?');
  end;

  with ProfileTitle do
  begin
    Create(Tab);
    SetFontSize(11);
    SetCaption('Get the RuneLite Profile here:');
    SetLeft(380);
    SetTop(360);
    SetWidth(200);
  end;

  with ProfileInfo do
  begin
    Create(Tab);
    SetCaption('https://github.com/courtwizard17/nimba/blob/main/neon.properties');
    SetFontColor($FF0000);
    SetLeft(380);
    SetTop(385);
    SetWidth(200);
    setOnClick(@OpenLink);
    setCursor(crHandPoint);
  end;

  Self.CreateAccountManager(Tab);

  {$IFHASFILE Includes/chores.simba}
    Self.CreateBirdhouseRunSettings();
  {$ENDIF}
  inherited;
end;

procedure WriteDebug(Message: String);
begin
  WriteLn(SRL.TimeStamp(), ':[Script]: ', Message);
end;

procedure PauseTimer(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Pause();
  T := Task;
end;

function TAntiban.HasBreakWaiting(): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Self.Breaks) do
    if GetTimeRunning() > Self.Breaks[i].NextAtTime then
      Exit(True);
end;

procedure ResumeTimer(Task: PBreakTask);
var
  T: PBreakTask;
begin
  InactivityTimer.Resume();
  T := Task;
end;

procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(450, 2750));
end;

function ClickHelper(UpTexts: TStringArray): Boolean;
begin
  if Mainscreen.IsUpText(UpTexts, 275) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Exit(True);
  end else
    ChooseOption.Open();

  if ChooseOption.HasOption(UpTexts) then
  begin
    ChooseOption.Select(UpTexts);
    Exit(True);
  end;
end;

procedure SetupAntiban();
begin
  Antiban.AddTask(ONE_MINUTE * 3, @Antiban.RandomMouse, 1);
  Antiban.AddTask(ONE_MINUTE * 5, @Antiban.RandomRightClick, 1);
  Antiban.AddTask(ONE_MINUTE * 5, @Antiban.DoLoseFocus, 1);
  Antiban.AddTask(ONE_MINUTE * 2, @Antiban.RandomRotate, 1);

  Antiban.AddBreak(BreakAfter * ONE_MINUTE, BreakFor * ONE_MINUTE, 0.3, 1);

  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

function HasGainedXP(): Boolean;
var
  TempValue: Int32;
begin
  CurrentXP := XPBar.Read();

  if CurrentXP < 1024 then
    Exit(False);

  TempValue := CurrentXP - StartXP;

  if TempValue <= 0 then
    Exit(False);

  Result := Tempvalue > GainedXP;

  if Result then
    GainedXP := TempValue;
end;

procedure PrintProgress();
var
  Hours: Double;
  Total, Hourly: String;
begin
  Hours := GetTimeRunning() / 3600000;
  Total := ToStr(Round((GainedXP/1000), 0), ' k ');
  Hourly := ToStr('(', Round((GainedXP/(Hours*1000)), 1), ' k / hr)');

  WriteLn(SRL.TimeStamp(), ':[Experience]: ', Total, Hourly);

  ReportTimer.Reset();
end;

function FindMainscreenHerbi(): TPoint;
var
  TPA: TPointArray;
begin
  if SRL.FindColors(TPA, CTS2(16776960, 1, 0.01, 0.01), Mainscreen.Bounds()) = 0 then
    Exit(Point(0, 0));

  Exit(TPA.Mean());
end;

function FindMinimapArrow(): TPoint;
var
  TPA: TPointArray;
begin
  if SRL.FindColors(TPA, CTS2(16776960, 1, 0.01, 0.01), Minimap.Bounds()) = 0 then
    Exit(Point(0, 0));

  Exit(TPA.Mean());
end;

function FindMainscreenObject(): TPoint;
var
  ATPA: T2DPointArray;
  Area: TBox;
  Pt: TPoint;
begin
  ATPA := Mainscreen.FindObject(Objecter);

  if ATPA.Len() = 0 then
    Exit(Point(0, 0))
  else
    Pt := ATPA.SortFrom(Mainscreen.Center())[0].Mean();

  Area := Box(Pt, 20, 20);
  Area.LimitTo(Mainscreen.Bounds());

  if SRL.CountColor(CTS2(0, 1, 0.01, 0.01), Area) > 10 then
  begin
    WriteDebug('Black color found near object, walking to it instead.');

    if SRL.Dice(50) then
      Antiban.RandomRotate();

    Exit(Point(0, 0));
  end;

  Exit(Pt);
end;

function IsHerbiVisible(): Boolean;
begin
  Result := FindMainscreenHerbi() <> Point(0, 0);
end;

function IsObjectVisible(): Boolean;
begin
  Result := FindMainscreenObject() <> Point(0, 0);
end;

function IsMinimapArrowVisible(): Boolean;
begin
  Result := FindMinimapArrow() <> Point(0, 0);
end;

procedure MinimapMove(Arrow: TPoint);
var
  Weighted, WorldPoint: TPoint;
begin
  Weighted.X := Round((0.8 * Arrow.X) + (0.2 * Minimap.Center().X));
  Weighted.Y := Round((0.8 * Arrow.Y) + (0.2 * Minimap.Center().Y));
  WorldPoint := RSW.MMToWorld(Weighted);

  Mouse.Click(Weighted, MOUSE_LEFT);
  WaitUntil(RSW.GetMyPos().DistanceTo(WorldPoint) < 12, 500, SRL.NormalRange(4750, 6000));
end;

procedure MoveTowardsObject();
var
  Arrow: TPoint;
begin
  Arrow := FindMinimapArrow();

  if Arrow = Point(0, 0) then
    Exit();

  if SRL.Dice(8) then
    RSW.WalkBlind(RSW.MMToWorld(Arrow))
  else
    MinimapMove(Arrow);
end;

function ShouldDeposit(Limit: Int32 = 5): Boolean;
begin
  if not Inventory.IsOpen() then
    Inventory.Open();

  Result := Inventory.CountEmptySlots() < Limit;
end;

procedure Init();
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if WaitUntil(RSClient.IsLoggedIn(), 250, 12000)  then
    StartXP := XPBar.Read();

  if StartXP < 1024 then
    TerminateScript('Failed to read XP, make sure XPBar is set up!');

  if Options.GetNPCAttackOption() <> ERSAttackOption.HIDDEN then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN);

  if ChatButtons.GetState(ERSChatButton.GAME_CHAT) <> ERSChatButtonState.ENABLED then
    ChatButtons.ChangeState(ERSChatButton.GAME_CHAT, ERSChatButtonState.ENABLED);

  if not InRange(Options.GetZoomLevel(), 12, 18) then
    Options.SetZoomLevel(Random(12, 18));

  Mouse.Speed := SRL.NormalRange(25, 35);

  RSW.SetupRegion([8000, 500, 10200, 1800]);
  RSW.AdaptiveWalk := True;

  MM2MS.SetupZoom();
  SetupAntiban();

  with Objecter do
  begin
    Colors += CTS2(15008229, 5, 0.02, 0.18);
    ClusterDistance := 10;
  end;

  Chest.Setup(2, [[9366, 1076]]);
  Chest.SetupUpText(['Bank']);
  Chest.Finder.Colors += CTS2(530531, 10, 0.18, 1.69);

  if BlockInput then
  begin
    WriteDebug('Script started with real input disabled.');
    WLSettings.RemoteInput.BlockInput := True;
    RSClient.RemoteInput.DisableRealInput();
  end else
  begin
    WriteDebug('Script started with real input enabled.');
    WLSettings.RemoteInput.BlockInput := False;
    RSClient.RemoteInput.EnableRealInput();
  end;

  {$IFHASFILE Includes/chores.simba}
    if DoBirdhouseRuns then
      BirdHouseRunner.Init();
  {$ENDIF}

  if not Inventory.IsOpen() then
    Inventory.Open();

  if not Inventory.ContainsItem('Open herb sack') then
    WriteDebug('NO OPEN HERB SACK FOUND, HAVING ONE IS VERY RECOMMENDED!');

  InactivityTimer.Start();
  ReportTimer.Start();
end;

function InspectFinished(Experience: Int32; S: String): Boolean;
begin
  if XPBar.Read() > Experience then
    Exit(True);

  if Chat.GetMessage(7) <> S then
    Exit(True);

  Exit(False);
end;

function IsInBankArea(): Boolean;
begin
  Result := SRL.PointInPoly(RSW.GetMyPos(), [[9275, 1037], [9375, 1039], [9376, 1104], [9275, 1097]]);
end;

function TAntiban.HasTaskWaiting(): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Self.Tasks) do
    if Self.Tasks[i].Countdown.IsFinished() then
      Exit(True);
end;

procedure HarvestHerbi();
var
  Experience: Int32;
  Pt: TPoint;
begin
  Pt := FindMainscreenHerbi();

  if Pt = Point(0, 0) then
    Exit();

  Experience := XPBar.Read();

  Mouse.HumanMove(Pt);

  WaitUntil(Mainscreen.IsUpText('arvest'), 100, 1250);

  if ClickHelper(['Harvest', 'Herbi', 'rves']) then
    if WaitUntil(XPBar.Read() > Experience, 500, 7500) then
      WaitUntil(not IsHerbiVisible(), 500, 5000);
end;

procedure InspectObject();
var
  Experience: Int32;
  Pt: TPoint;
  S: String;
begin
  Pt := FindMainscreenObject();

  if Pt = Point(0, 0) then
    Exit();

  Mouse.HumanMove(Pt);
  S := Chat.GetMessage(7);
  Experience := XPBar.Read();

  if SRL.Dice(33) then
    ClickHelper(['spect', 'Ins', 'Attac', 'tack'])
  else
    Mouse.Click(MOUSE_LEFT);

  if not Mainscreen.DidRedClick() then
      Exit();

  WaitUntil(InspectFinished(Experience, S), 625, SRL.NormalRange(6500, 10500));
end;

procedure MoveToStart();
var
  StartTiles: TPointArray := [[9138, 816], [9206, 1052]];
  Tile, Pos: TPoint;
begin
  Pos := RSW.GetMyPos();
  WriteDebug('moving to a start position');
  Tile := StartTiles.Sorted(Pos)[0];
  RSW.WalkBlind(Tile);
end;

procedure SmallRandomMove();
var
  Pos: TPoint;
begin
  Pos := RSW.GetMyPos();
  WriteDebug('less than 20s of no xp gained, walking a small dist');
  RSW.WalkBlind([Pos.X + Random(-20, 20), Pos.Y + Random(-20, 20)]);
end;

function DepositItems(): Boolean;
begin
  if not Bank.IsOpen() then
    Exit(False);

  if Inventory.ContainsItem('Open herb sack') then
    Inventory.ClickItem('Open herb sack', 'Empty');

  Result := Bank.DepositRandomItems(['Open herb sack', 'Secateurs', 'Numulite']);
end;

procedure DepositLoot();
begin
  if not Chest.WalkClick() then
    Exit();

  if not WaitUntil(Bank.IsOpen(), 1000, 6500) then
    Exit();

  DepositItems();

  if not Inventory.ContainsItem('Open herb sack') then
    Bank.WithdrawItem('Open herb sack', False);

  if Bank.IsOpen() then
    Bank.Close(50);

  InactivityTimer.Reset();
end;

function GetState(): EState;
begin
  if not RSClient.IsLoggedIn() then
    Exit(HANDLE_LOGIN);

  if RSInterface.IsOpen() then
    Exit(CLOSE_INTERFACE);

  if HasGainedXP() then
    Exit(RESET_TIMER);

  if InactivityTimer.ElapsedTime() > 300000 then
    Exit(TERMINATE_SCRIPT);

  if ReportTimer.ElapsedTime() > 120000 then
    Exit(PRINT_PROGRESS);

  if Antiban.HasTaskWaiting() then
    Exit(DO_ANTIBAN);

  if IsInBankArea() then
  begin
    if Antiban.HasBreakWaiting() then
      Exit(DO_BREAK);

    {$IFHASFILE Includes/chores.simba}
      if DoBirdhouseRuns then
        if BirdhouseRunner.CanDoBirdHouseRun() then
          Exit(BIRDHOUSE_RUN);
    {$ENDIF}

    if ShouldDeposit(15) then
      Exit(DEPOSIT_LOOT);
  end;

  if ShouldDeposit() then
    Exit(DEPOSIT_LOOT);

  if Chat.GetMessage(7).Contains('harvest count') then
  begin
    if ShouldDeposit(10) then
      Exit(DEPOSIT_LOOT);

    {$IFHASFILE Includes/chores.simba}
      if DoBirdhouseRuns then
        if BirdhouseRunner.CanDoBirdHouseRun() then
          Exit(BIRDHOUSE_RUN);
    {$ENDIF}
  end;

  if SRL.Dice(30) then
    if InactivityTimer.ElapsedTime() > 60000 then
    begin
      if SRL.Dice(50) then
        Exit(ROTATE);

      if SRL.Dice(50) then
        Exit(SMALL_MOVE);

      if SRL.Dice(50) then
        Exit(TO_START);

      Exit(RE_LOG);
    end;

  if IsHerbiVisible() then
    Exit(HARVEST);

  if IsObjectVisible() then
    Exit(INSPECT);

  if IsMinimapArrowVisible() then
    Exit(TO_OBJECT);

  if InactivityTimer.ElapsedTime() < 20000 then
    Exit(SMALL_MOVE);

  Exit(TO_START);
end;

procedure Loop();
var
  State: EState;
begin
  State := GetState();
  WriteDebug(ToStr(State));

  case State of
    DO_ANTIBAN: Antiban.DoAntiban(False, False);
    DO_BREAK: Antiban.DoAntiban();
    RE_LOG: Logout.ClickLogout();

    TERMINATE_SCRIPT: TerminateScript();
    CLOSE_INTERFACE: RSInterface.Close(50);
    PRINT_PROGRESS: PrintProgress();
    RESET_TIMER: InactivityTimer.Reset();
    HANDLE_LOGIN: Login.LoginPlayer();

    HARVEST: HarvestHerbi();
    DEPOSIT_LOOT: DepositLoot();
    INSPECT: InspectObject();
    TO_OBJECT: MoveTowardsObject();
    TO_START: MoveToStart();
    SMALL_MOVE: SmallRandomMove();
    ROTATE: Antiban.RandomRotate();

    {$IFHASFILE Includes/chores.simba}
      BIRDHOUSE_RUN: BirdhouseRunner.DoBirdHouseRun();
    {$ENDIF}
  end;

  WaitEx(350, 325);
end;

{$IFHASFILE Includes/chores.simba}
  function TBirdHouseInclude.OnStart(): Boolean; override;
  var
    BankTimeout: TCountdown;
    i: Int32;
  begin
    WriteDebug('Starting a birdhouse run');

    for i := 0 to High(Antiban.Tasks) do
      Antiban.Tasks[i].Countdown.Pause();

    BankTimeout.Init(68750);

    while not BankTimeOut.IsFinished() and not Bank.IsOpen() do
    begin
      if Chest.WalkClick() then
        WaitUntil(Bank.IsOpen(), 250, 8000);
    end;

    if not Bank.IsOpen() then
      Exit(False);

    DepositItems();

    WaitUntil(Inventory.CountEmptySlots() > 20, 150, 2000);

    if not Self.WithdrawNextRun() then
    begin
      Self.DebugLn("Failed to get bank items");
      Bank.DepositRandomItems(['Open herb sack', 'Secateurs', 'Numulite']);
      Bank.Close();
      BirdhouseRunner.IsDisabled := True;
      Exit(False);
    end;

    WaitEx(325, 250);

    Result := Bank.Close(50);
  end;

  procedure TBirdHouseInclude.OnComplete(); override;
  var
    i: Int32;
  begin
    WriteDebug('Completed a birdhouse run');

    for i := 0 to High(Antiban.Tasks) do
      Antiban.Tasks[i].Countdown.Resume();
  end;
{$ENDIF}

begin
  GUI.Run();
  Init();

  repeat
    Loop();
  until False;
end.
