(* Farming run include for Simba | Credit: ClubXJ, Student | Modified by n0ll *)

{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  EFarmPatch = (WEISS_HERB, STRONGHOLD_HERB, CATHERBY_HERB, CATHERBY_FLOWER, CATHERBY_ALLOT_N,
                CATHERBY_ALLOT_S, ARDY_HERB, ARDY_FLOWER, HOSIDIOUS_HERB, HOSIDIOUS_FLOWER,
                FALLY_HERB, FALLY_FLOWER, PHASMATYS_HERB, GUILD_HERB, GUILD_FLOWER,
                GUILD_ALLOT_N, GUILD_ALLOT_S, GUILD_BUSH, GUILD_CACTUS, MONESTARY_BUSH,
                GIANT_SEAWEED_NORTH, GIANT_SEAWEED_SOUTH);

  ETravelMethod = (ICY_BASALT, STONY_BASALT, CATHERBY_TABLET, CATHERBY_TELEPORT, CAMELOT_TELEPORT,
                   CAMELOT_TABLET, ARDY_CLOAK_2, ARDY_CLOAK_3, ARDY_CLOAK_4, ARDY_CLOAK_1_BUSH,
                   ARDY_CLOAK_2_BUSH, ARDY_CLOAK_3_BUSH, ARDY_CLOAK_4_BUSH, XERICS_TALISMAN,
                   HOSIDIOUS_TABLET, HOUSE_TELEPORT, CON_CAPE_HOSIDIUS, EXPLORERS_RING_2,
                   EXPLORERS_RING_3, EXPLORERS_RING_4, FENKENSTRAIN_TELEPORT, ECTOPHIAL,
                   FARMING_CAPE, SKILLS_NECKLACE, NONE, DIGSITE_TO_SEAWEED,
                   CON_CAPE_SPIRIT_TREE_GUILD, HOUSE_TAB_SPIRIT_TREE_GUILD, HOUSE_TELE_SPIRIT_TREE_GUILD);

  ECompostMethod = (REGULAR, SUPER, ULTRA, BOTTOMLESS, FERTILE_SOIL);
  EPatchType = (HERB, FLOWER, BUSH, ALLOTMENT, CACTUS, SEAWEED);

  EPatchState = (TELEPORT_TO, DEAD, DISEASED, HARVEST, PLANT, COMPOST, NOTE_ITEMS,
                 FAILED, COMPLETE, SKIP, HARVEST_WHITEBERRIES, HARVEST_CACTUS, HARVEST_SEAWEED);

  TPatchData = record
    BorderColor, SoilColor, LeprechaunColor: TCTS2Color;
    Coords, LeprechaunCoords: TPoint;
    PatchType: EPatchType;
    MapCoords: TBox;
    Name: String;
  end;

  TFarmPatch = record
    EmptyUpText, PlantedUpText, HarvestUpText: String;
    TravelMethod: ETravelMethod;
    Data: TPatchData;
    TPA: TPointArray;
    SearchBox: TBox;
    Seed: TRSItem;
    Complete, Skip: Boolean;
  end;

  TFarmRun = record
    PatchesCompleted, PatchesSkipped, MaxRuns, RunsComplete, XPGained, LastXPRead: Int32;
    ResurrectCrop, DoReport, DoBreak, CleanHerbs: Boolean;
    BoatyShore, BoatyIsland, BargeAttendant: TRSObject;
    InactivityTimer, ReadyTimer: TCountdown;
    HarvestQuantities: TIntegerArray;
    LeprechaunItems: TRSItemArray;
    CompostMethod: ECompostMethod;
    Patches: array of TFarmPatch;
    CurrentPatch: TFarmPatch;
    Runtime: TStopWatch;
  end;

const
  GRIMY_HERBS: TRSItemArray := ['Grimy guam leaf', 'Grimy marrentill', 'Grimy tarromin', 'Grimy harralander',
                                'Grimy ranarr weed', 'Grimy toadflax', 'Grimy irit leaf', 'Grimy avantoe',
                                'Grimy kwuarm', 'Grimy snapdragon', 'Grimy cadantine', 'Grimy lantadyme',
                                'Grimy dwarf weed', 'Grimy torstol'];

var
  PatchData: array of TPatchData;

begin
  PatchData += [
    CTS2(6520971, 8, 0.05, 0.27),
    CTS2(408653, 7, 0.11, 2.64),
    CTS2(3108159, 13, 0.08, 1.39),
    [6787, 710],
    [6785, 728],
    EPatchType.HERB,
    [6500, 600, 7000, 800],
    'Weiss herb'
  ];

  PatchData += [
    CTS2(5927804, 9, 0.05, 0.11),
    CTS2(408653, 7, 0.11, 2.64),
    CTS2(3830139, 13, 0.03, 0.44),
    [6699, 1670],
    [6697, 1704],
    EPatchType.HERB,
    [6550, 1550, 6850, 1800],
    'Stronghold herb'
  ];

  PatchData += [
    CTS2(5927804, 9, 0.05, 0.11),
    CTS2(2970201, 11, 0.05, 0.25),
    CTS2(3108159, 13, 0.08, 1.39),
    [6646, 2594],
    [6653, 2583],
    EPatchType.HERB,
    [6286, 2351, 6910, 2850],
    'Catherby herb'
  ];

  PatchData += [
    CTS2(5927804, 9, 0.05, 0.11),
    CTS2(2970201, 11, 0.05, 0.25),
    CTS2(3108159, 13, 0.08, 1.39),
    [6626, 2594],
    [6653, 2583],
    EPatchType.FLOWER,
    [6286, 2351, 6910, 2850],
    'Catherby flower'
  ];

  PatchData += [
    CTS2(5927804, 9, 0.05, 0.11),
    CTS2(3431524, 12, 0.05, 0.16),
    CTS2(3108159, 13, 0.08, 1.39),
    [6644, 2578],
    [6653, 2583],
    EPatchType.ALLOTMENT,
    [6286, 2351, 6910, 2850],
    'Catherby north allotment'
  ];

  PatchData += [
    CTS2(5927804, 9, 0.05, 0.11),
    CTS2(3431524, 12, 0.05, 0.16),
    CTS2(3108159, 13, 0.08, 1.39),
    [6646, 2609],
    [6653, 2583],
    EPatchType.ALLOTMENT,
    [6286, 2351, 6910, 2850],
    'Catherby south allotment'
  ];

  PatchData += [
    CTS2(5927804, 9, 0.05, 0.11),
    CTS2(2970201, 11, 0.05, 0.25),
    CTS2(3108159, 13, 0.08, 1.39),
    [6075, 2949],
    [6080, 2923],
    EPatchType.HERB,
    [5855, 2792, 6286, 3070],
    'Ardy herb'
  ];

  PatchData += [
    CTS2(5927804, 9, 0.05, 0.11),
    CTS2(2970201, 11, 0.05, 0.25),
    CTS2(3108159, 13, 0.08, 1.39),
    [6058, 2949],
    [6080, 2923],
    EPatchType.FLOWER,
    [5855, 2792, 6286, 3070],
    'Ardy flower'
  ];

  PatchData += [
    CTS2(6127499, 6, 0.10, 0.71),
    CTS2(2970201, 11, 0.05, 0.25),
    CTS2(3108159, 13, 0.08, 1.39),
    [2346, 2258],
    [2357, 2252],
    EPatchType.HERB,
    [2150, 2050, 2600, 2600],
    'Hosidious herb'
  ];

  PatchData += [
    CTS2(5927804, 9, 0.05, 0.11),
    CTS2(2970201, 11, 0.05, 0.25),
    CTS2(3108159, 13, 0.08, 1.39),
    [2331, 2242],
    [2357, 2252],
    EPatchType.FLOWER,
    [2150, 2050, 2600, 2600],
    'Hosidious flower'
  ];

  PatchData += [
    CTS2(5927804, 9, 0.05, 0.11),
    CTS2(2970201, 11, 0.05, 0.25),
    CTS2(3108159, 13, 0.08, 1.39),
    [7626, 3202],
    [7604, 3228],
    EPatchType.HERB,
    [7500, 3100, 7700, 3450],
    'Fally herb'
  ];

  PatchData += [
    CTS2(5927804, 9, 0.05, 0.11),
    CTS2(2970201, 11, 0.05, 0.25),
    CTS2(3108159, 13, 0.08, 1.39),
    [7610, 3218],
    [7604, 3228],
    EPatchType.FLOWER,
    [7500, 3100, 7700, 3450],
    'Fally flower'
  ];

  PatchData += [
    CTS2(2646105, 4, 0.14, 0.45),
    CTS2(2970201, 11, 0.05, 0.25),
    CTS2(2385461, 9, 0.09, 1.08),
    [9814, 2330],
    [9780, 2360],
    EPatchType.HERB,
    [9385, 2036, 10384, 2680],
    'Port Phasmatys herb'
  ];

  PatchData += [
    CTS2(5332322, 17, 0.14, 0.10),
    CTS2(2972511, 10, 0.53, 0.59),
    CTS2(2782782, 5, 0.13, 1.58),
    [346, 1554],
    [336, 1532],
    EPatchType.HERB,
    [45, 1263, 648, 1721],
    'Farming Guild herb'
  ];

  PatchData += [
    CTS2(5332322, 17, 0.14, 0.10),
    CTS2(2972511, 10, 0.53, 0.59),
    CTS2(2782782, 5, 0.13, 1.58),
    [434, 1558],
    [440, 1536],
    EPatchType.FLOWER,
    [45, 1263, 648, 1721],
    'Farming Guild herb'
  ];

  PatchData += [
    CTS2(5332322, 17, 0.14, 0.10),
    CTS2(2972511, 10, 0.53, 0.59),
    CTS2(2782782, 5, 0.13, 1.58),
    [461, 1530],
    [440, 1536],
    EPatchType.ALLOTMENT,
    [45, 1263, 648, 1721],
    'Farming Guild north allotment'
  ];

  PatchData += [
    CTS2(5332322, 17, 0.14, 0.10),
    CTS2(2972511, 10, 0.53, 0.59),
    CTS2(2782782, 5, 0.13, 1.58),
    [463, 1552],
    [440, 1536],
    EPatchType.ALLOTMENT,
    [45, 1263, 648, 1721],
    'Farming Guild south allotment'
  ];

  PatchData += [
    CTS2(5332322, 17, 0.14, 0.10),
    CTS2(2972511, 10, 0.53, 0.59),
    CTS2(2782782, 5, 0.13, 1.58),
    [434, 1527],
    [440, 1536],
    EPatchType.BUSH,
    [45, 1263, 648, 1721],
    'Farming Guild bush'
  ];

  PatchData += [
    CTS2(5332322, 17, 0.14, 0.10),
    CTS2(2972511, 10, 0.53, 0.59),
    CTS2(2782782, 5, 0.13, 1.58),
    [450, 1470],
    [440, 1536],
    EPatchType.CACTUS,
    [45, 1263, 648, 1721],
    'Farming Guild cactus'
  ];

  PatchData += [
    CTS2(6127499, 7, 0.08, 0.61),
    CTS2(3497831, 7, 0.07, 0.20),
    CTS2(2782782, 5, 0.13, 1.58),
    [5864, 3546], [5846, 3544],
    EPatchType.BUSH,
    [5650, 3350, 6050, 3750],
    'Monestary bush'
  ];

  PatchData += [
    CTS2(4745297, 4, 1.30, 2.30),
    CTS2(5926241, 4, 0.92, 0.38),
    CTS2(6189902, 6, 0.52, 0.52),
    [1282, 5616],
    [1276, 5630],
    EPatchType.SEAWEED,
    [1129, 5407, 1769, 5824],
    'Giant seaweed north'
  ];

  PatchData += [
    CTS2(4745297, 4, 1.30, 2.30),
    CTS2(5926241, 4, 0.92, 0.38),
    CTS2(6189902, 6, 0.52, 0.52),
    [1282, 5640],
    [1276, 5630],
    EPatchType.SEAWEED,
    [1129, 5407, 1769, 5824],
    'Giant seaweed south'
  ];
end;

procedure TerminateScript(Reason: String); override;
begin
  WriteLn(Reason);
  TerminateScript();
end;

procedure TRSItemArray.Add(Items: TRSItemArray);
var
  Item: TRSItem;
begin
  for Item in Items do
    Self += Item;
end;

function TFarmRun.GetNextTime(): Int32;
begin
  if Length(Self.Patches) = 2 then
    if ('seaweed' in Self.Patches[0].Data.Name) and ('seaweed' in Self.Patches[1].Data.Name) then
      Exit(Random(46*ONE_MINUTE, 55*ONE_MINUTE));

  Exit(Random(86*ONE_MINUTE, 97*ONE_MINUTE));
end;

function TRSInventory.Count(): Int32; override;
var
  Slot: Int32;
begin
  if not Self.Open() then
    Exit();

  for Slot := 0 to 27 do
    if Self.IsSlotUsed(Slot) then
      Inc(Result)
end;

procedure TFarmRun.AddPatch(Patch: EFarmPatch; Travel: ETravelMethod; Seed: TRSItem);
var
  EmptyUpText: TStringArray := ['Herb', 'Flower', 'Bush', 'Allotment', 'Cactus', 'Seaweed patch'];
  HarvestUpText: TStringArray := ['ick', 'ick', 'ick', 'arves', 'ick', 'ick'];
  Data: TPatchData := PatchData[Patch];
  TPA: TPointArray;
  SearchBox: TBox;
  Empty: String := EmptyUpText[Data.PatchType];
  Planted: String := ToStr(Seed).Before(' ');
  Harvest: String := HarvestUpText[Data.PatchType];
begin
  if Data.PatchType = EPatchType.HERB then
    Planted := 'Herb';

  Self.Patches += [Empty, Planted, Harvest, Travel, Data, TPA, SearchBox, Seed];
end;

function TFarmPatch.Find(Retry: Boolean = True): Boolean;
var
  Attempts: Int32;

  function F(): Boolean
  var
    FilterPt: TPoint := ScriptWalker^.GetTileMS(Self.Data.Coords).Mean();
    BorderTPA, SearchFiltered: TPointArray;
    BorderATPA: T2DPointArray;
    SearchPt: TPoint;
    i: Int32;
  begin
    if not (FilterPt in Mainscreen.Bounds()) then
      Exit(False);

    if SRL.FindColors(BorderTPA, Self.Data.BorderColor, MainScreen.Bounds()) = 0 then
      Exit(False);

    BorderATPA := BorderTPA.Cluster(Mainscreen.NormalizeDistance(32));
    for i := 0 to High(borderATPA) do
    begin
      Self.TPA := BorderATPA[i].ConvexHull.Connect();

      if SRL.PointInPoly(FilterPt, Self.TPA) then
      begin
        Self.TPA := Self.TPA.SortFrom(MainScreen.Center());
        SearchFiltered := Self.TPA.FilterDist(0, MainScreen.NormalizeDistance(140), Self.TPA[0].X, Self.TPA[0].Y);
        SearchFiltered := SearchFiltered.SortFrom(MainScreen.Center);
        SearchPt := SearchFiltered.Mean();
        Self.SearchBox := Box(SearchPt, MainScreen.NormalizeDistance(14), MainScreen.NormalizeDistance(14));
        Self.SearchBox.LimitTo(MainScreen.Bounds);
        RSClient.Image.Clear();

        //RSClient.Image.DrawRect(Self.TPA.MinAreaRect, CHAT_COLOR_LIGHT_PURPLE);
        //RSClient.Image.DrawBox(Self.SearchBox, CHAT_COLOR_MAROON);

        Exit(True);
      end;
    end;
    Self.SearchBox := [0, 0, 0, 0];
    Self.TPA := [];
    Result := False;
  end;

begin
  if not Retry then
    Exit(F());

  Result := False;
  for Attempts := 0 to 3 do
  begin
    if F() then
      Exit(True);

    try
    case attempts of
      0:
      begin
        if not ScriptWalker^.MakePointVisible(Self.Data.Coords) then
        begin
          ScriptWalker^.WebWalk([Self.Data.Coords.X + 4, Self.Data.Coords.Y + 4]);
          ScriptWalker^.MakePointVisible(Self.Data.Coords);
        end
      end;

      1: Antiban.RandomRotate();
      2:
      begin
        ScriptWalker^.WebWalk([Self.Data.Coords.X + 4, Self.Data.Coords.Y + 4]);
        ScriptWalker^.MakePointVisible(Self.Data.Coords);
      end;
      3:
      begin
        WriteLn('Failed to find patch.');
        Exit();
      end;
    end;
    except
      Exit();
    end;
  end;
end;

function TFarmPatch.IsDead(): Boolean;
var
  ColorCount: Int32;
begin
  ColorCount := SRL.CountColor(CTS2(6050153, 7, 2.73, 0.61), Self.SearchBox);
  Result := ColorCount > MainScreen.NormalizeDistance(24);

  if ColorCount > 0 then
    WriteLn('Found dead patch colors. Count: ', ColorCount);
end;

function TFarmPatch.IsDiseased(): Boolean;
var
  ColorCount: Int32;
begin
  ColorCount := SRL.CountColor(CTS2(1272942, 14, 0.03, 2.31), Self.SearchBox);
  Result := ColorCount > MainScreen.NormalizeDistance(40);

  if ColorCount > 0 then
    WriteLn('Found diseased patch colors. Count: ', ColorCount);
end;

function TFarmPatch.IsEmpty(): Boolean;
var
  ColorCount: Int32;
begin
  ColorCount := SRL.CountColor(Self.Data.SoilColor, Self.SearchBox);
  Result := ColorCount = Self.SearchBox.Area;
end;

function TFarmPatch.FindLeprechaun(out Point: TPoint; Retry: Boolean = True): Boolean;
var
  Attempts: Int32;

  function F(): Boolean;
  var
    SearchTPA, LeprechaunTPA: TPointArray;
    Cuboids: TCuboidExArray;
    FindBox: TBox;
  begin
    Cuboids := ScriptWalker^.GetCuboidArrayMS([Self.Data.LeprechaunCoords], [1.5, 1.5, 8], [0, 0]);

    if Length(Cuboids) = 0 then
      Exit();

    FindBox := Cuboids[0].Bounds();
    FindBox.LimitTo(MainScreen.Bounds());

    if SRL.FindColors(SearchTPA, Self.Data.LeprechaunColor, FindBox) = 0 then
      Exit();

    LeprechaunTPA := Cuboids[0].Filter(SearchTPA);

    if LeprechaunTPA.Len = 0 then
      Exit();

    Point := LeprechaunTPA.Mean();
    Result := True;
  end;

begin
  if not Retry then
    Exit(F());

  for Attempts := 0 to 3 do
  begin
    if F() then
      Exit(True);

    case Attempts of
      0, 2:
      begin
        if not ScriptWalker^.MakePointVisible(Self.Data.LeprechaunCoords) then
        begin
          ScriptWalker^.WebWalk([Self.Data.LeprechaunCoords.X + 4, Self.Data.LeprechaunCoords.Y + 4]);
          ScriptWalker^.MakePointVisible(Self.Data.LeprechaunCoords);
        end
      end;
      1: Antiban.RandomRotate();
      3: WriteLn('Failed to find leprechaun.');
    end;
  end;
end;

function TFarmPatch.GetState(): EPatchState;
label
  Inspect;
var
  Message: String;
  i: Int32;
begin
  if not RSClient.IsLoggedIn() then
    Exit(EPatchState.FAILED);

  RSInterface.Close();
  Inventory.SetSelectedSlot(-1);

  if Self.Complete then
    Exit(EPatchState.COMPLETE);
  if Self.Skip then
    Exit(EPatchState.SKIP);

  if Minimap.InPOH then
    Exit(EPatchState.TELEPORT_TO);

  if not (ScriptWalker^.GetMyPos in Self.Data.MapCoords) then
    Exit(EPatchState.TELEPORT_TO);

  if not Self.Find then
    Exit(EPatchState.FAILED);

  if Self.Data.PatchType = EPatchType.BUSH then
    Exit(EPatchState.HARVEST_WHITEBERRIES);

  if Self.Data.PatchType = EPatchType.CACTUS then
    Exit(EPatchState.HARVEST_CACTUS);

  if Self.IsEmpty then
    Exit(EPatchState.PLANT);

  if Self.IsDiseased then
    Exit(EPatchState.DISEASED);

  if Self.IsDead then
    Exit(EPatchState.DEAD);

  if Inventory.IsFull then
    Exit(EPatchState.NOTE_ITEMS);

  if SRL.Dice(65) then
    Mouse.HumanMove(SRL.RandomPoint(Self.SearchBox))
  else
    Mouse.Move(Self.SearchBox);

  if Mainscreen.IsUpText(Self.HarvestUpText) then
    Exit(EPatchState.HARVEST);

  if Mainscreen.IsUpText('Dead') then
    Exit(EPatchState.DEAD);

  if Mainscreen.IsUpText('Cure') then
    Exit(EPatchState.DISEASED);

  if MainScreen.IsUpText('Inspect') then
  begin
    Mouse.Click(MOUSE_LEFT);
    goto Inspect;
  end;

  Mouse.Click(MOUSE_RIGHT);

  if ChooseOption.HasOption('Dead', True, False) then
    Exit(EPatchState.DEAD);

  if ChooseOption.HasOption(Self.HarvestUpText, True, False) then
    Exit(EPatchState.HARVEST);

  if ChooseOption.HasOption('Cure', True, False) then
    Exit(EPatchState.DISEASED);

  if ChooseOption.Select('Inspect') then
      goto inspect
  else
    Exit(EPatchState.FAILED);

  Inspect:
  if not WaitUntil(Chat.FindMessage('The soil'), 15, 10000) then
    Exit(EPatchState.FAILED);

  for i := 5 to 8 do
    Message += Chat.GetMessage(i);

  if Message.Contains('is empty') then
    Exit(EPatchState.PLANT);

  if Message.Contains('not been') then
    Exit(EpatchState.COMPOST);

  if Message.Contains('fully grown') then
    Exit(EPatchState.HARVEST);

  if Message.ContainsAll(['has been', 'growing in it']) then
    Exit(EPatchState.COMPLETE);

  if Message.Contains('dead') then
    Exit(EPatchState.DEAD);

  if Message.Contains('diseas') then
    Exit(EPatchState.DISEASED);

  Exit(EPatchState.FAILED);
end;

procedure TFarmRun.OnStart(); begin

end;

procedure TFarmRun.OnComplete(); begin

end;

function TRSChat.ChatUntilOptions(): Boolean;
var
  Timeout: TCountdown;
begin
  Timeout.Init(10000);

  while (not Timeout.IsFinished) and (not ('Select' in Self.GetChatTitle())) and Self.ClickContinue() do
    Wait(0, 2500, wdLeft);

  Result := 'Select' in Self.GetChatTitle();
end;

function TFarmRun.GetFarmRunesNeeded(): TRSItemArray;
var
  CanSBS, NeedsSBS: Boolean;
  SpellBook: ERSSpellBook;
  TmpRunes: TRSItemArray;
  i: Int32;
begin
  WriteLn('Getting runes needed for farm run.');
  WriteLn('Spellbook detected: ', SpellBook := Magic.GetSpellBook());

  CanSBS := (SpellBook = ERSSpellBook.LUNAR) and (Stats.GetLevel(ERSSkill.MAGIC) >= 96);

  if Self.CompostMethod = ECompostMethod.FERTILE_SOIL then
  begin
    if SpellBook <> ERSSpellBook.LUNAR then
      TerminateScript('Cannot use Fertile Spoil with your current spellbook.');

    if Stats.GetLevel(ERSSkill.MAGIC, True) < 83 then
      TerminateScript('You don''t have the required magic level for fertile soil.');

    TmpRunes += ['Nature rune', 'Astral rune', 'Earth rune'];
  end;

  if Self.ResurrectCrop then
  begin
    if not ((SpellBook = ERSSpellBook.ARCEUUS) or CanSBS) then
      TerminateScript('Cannot use Resurrect Crop with your current spellbook. Arceuss or Lunars and 96 magic required.');

    TmpRunes += ['Soul rune', 'Nature rune', 'Blood rune', 'Earth rune'];
    NeedsSBS := SpellBook = ERSSpellBook.LUNAR;
  end;

  for i := 0 to High(Self.Patches) do
  begin
    case Self.Patches[i].TravelMethod of
      ETravelMethod.CATHERBY_TELEPORT:
      begin
        if SpellBook <> ERSSpellBook.LUNAR then
          TerminateScript('Cannot use Catherby teleport with your current spellbook. Lunars required.');
        TmpRunes += ['Law rune', 'Astral rune', 'Water rune'];
      end;

      ETravelMethod.CAMELOT_TELEPORT:
      begin
        if not ((SpellBook = ERSSpellBook.STANDARD) or CanSBS) then
          TerminateScript('Cannot use Camelot teleport with your current spellbook. Standard or Lunars and 96 magic required.');

       TmpRunes += ['Law rune', 'Air rune'];
       NeedsSBS := SpellBook = ERSSpellBook.LUNAR;
      end;

      ETravelMethod.FENKENSTRAIN_TELEPORT:
      begin
        if not ((SpellBook = ERSSpellBook.ARCEUUS) or CanSBS) then
          TerminateScript('Cannot use Fenkenstrain teleport with your current spellbook. Arceuss or Lunars and 96 magic required.');

        TmpRunes += ['Law rune', 'Soul rune', 'Earth rune'];
        NeedsSBS := SpellBook = ERSSpellBook.LUNAR;
      end;

      ETravelMethod.HOUSE_TELEPORT:
      begin
        if not ((SpellBook = ERSSpellBook.STANDARD) or CanSBS) then
          TerminateScript('Cannot use House teleport with your current spellbook. Standard or Lunars and 96 magic required.');

        TmpRunes += ['Law rune', 'Air rune', 'Earth rune'];
        NeedsSBS := SpellBook = ERSSpellBook.LUNAR;
      end;
    end;
  end;

  if NeedsSBS then
    TmpRunes += ['Astral rune', 'Cosmic rune', 'Law rune'];

  Sort(TmpRunes);
  Result += TmpRunes[0];

  for i := 1 to High(TmpRunes) do
    if TmpRunes[i] <> Result[High(Result)] then
      Result += TmpRunes[i];
end;

procedure TFarmRun.TravelToGiantSeaweed();
var
  T: TCountdown;
  MyPos: TPoint;
  Attempts: int32;
  Item: TRSItem;
  B: TBox;
begin
  T.Init(ONE_MINUTE);

  while not (MyPos := ScriptWalker^.GetMyPos).InBox([1129, 5407, 1769, 5824]) and not T.IsFinished() do
  begin
    MyPos := ScriptWalker^.GetMyPos();

    if MyPos.InBox([8448, 2342, 9273, 2895]) then
    begin
      for Attempts := 1 to 3 do
      begin
        if not ScriptWalker^.AtTile([8840,2672], 16) then
          ScriptWalker^.WebWalk([8832,2672]);

        BargeAttendant.SelectOption(['Quick-Travel'], 10);

        if WaitUntil(ScriptWalker^.GetMyPos().InBox([9113, 908, 9467, 1266]), 15, 5000) then
          Break();
      end;
    end
    else
    if MyPos.InBox([9113, 908, 9467, 1266]) then
    begin
      for attempts := 1 to 3 do
      begin
        Wait(750,1000);
        BoatyShore.WalkSelectOption(['Travel '], 10);

        if WaitUntil(Chat.FindOption('Row out to sea', [CHAT_COLOR_BLACK]), 15, 5000) then
        begin
          B := ([146,431,371,435]);
          Mouse.Click(B, MOUSE_LEFT);

          if WaitUntil(ScriptWalker^.GetMyPos().InBox([9303, 530, 9657, 888]), 15, 5000) then
            Break();
        end;
      end;
    end
    else
    if MyPos.InBox([9303, 530, 9657, 888]) then
    begin
      for Attempts := 1 to 3 do
      begin
        Wait(750,1000);
        BoatyIsland.WalkSelectOption(['Dive '], 10);
        WaitUntil(Chat.FindOption('Dive and walk', [CHAT_COLOR_BLACK]) or Chat.FindOption('it would be easier', [CHAT_COLOR_BLACK]) or (MyPos := ScriptWalker^.GetMyPos()).InBox([1129, 5407, 1769, 5824]), 15, 10000);

        if Chat.FindOption('Dive and walk', [CHAT_COLOR_BLACK]) then begin
          B := ([67,399,442,403]);
          Mouse.Click(B, MOUSE_LEFT);
          WaitUntil(ScriptWalker^.GetMyPos().InBox([1129, 5407, 1769, 5824]) or Chat.FindOption('it would be easier', [CHAT_COLOR_BLACK]), 15, 10000);
        end;

        if (ScriptWalker^.GetMyPos()).InBox([1129, 5407, 1769, 5824]) then
          Break();

        if Chat.FindOption('it would be easier', [CHAT_COLOR_BLACK])then
          Chat.ClickContinue(True);

        if Chat.FindOption('dive anyway', [CHAT_COLOR_BLACK]) then
        begin
          B := ([120,412,401,421]);
          Mouse.Click(B, MOUSE_LEFT);

          if Chat.FindOption('airin', [CHAT_COLOR_BLACK])then
            Chat.ClickContinue(True);

          if WaitUntil(ScriptWalker^.GetMyPos().InBox([1129, 5407, 1769, 5824]), 15, 5000) then
            Break();
        end;
      end;
    end
    else
    begin
      Item := 'Digsite pendant (5)';
      Wait(250,500);
      if Inventory.ClickItem(Item, 'Rub') and WaitUntil(Chat.FindOption('Digsite', [CHAT_COLOR_BLACK]), 10, 10000) then
      begin
        B := ([241,396,279,406]);
        Mouse.Click(B, MOUSE_LEFT);
      end
      else
        Equipment.ClickItem(Item, 'Digsite');

      WaitUntil(ScriptWalker^.GetMyPos().InBox([8448, 2342, 9273, 2895]), 15, 10000);
    end;
  end;
end;

procedure TFarmRun.CleanGrimyHerbs();
var
  Slots: TIntegerArray;
  Slot: Int32;
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  if not Inventory.FindItems(GRIMY_HERBS, Slots) then
    Exit();

  for Slot in Slots do
  begin
    Mouse.Move(Inventory.GetSlotBox(slot));
    Mouse.Click(MOUSE_LEFT);

    if ('You need level' in Chat.GetMessage(7)) then
    begin
      Self.CleanHerbs := False;
      Self.LeprechaunItems.Add(GRIMY_HERBS);
      SetLength(Self.HarvestQuantities, Length(Self.LeprechaunItems));
      Exit();
    end;
  end;
end;

procedure TFarmRun.NoteItems();
var
  Slots, LepItems: TIntegerArray;
  Count, Slot, i: Int32;
  Items: TRSItemArray;
  PlayerBox: TBox;
  Item: TRSItem;
  LepPt: TPoint;
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  if Self.CleanHerbs then
    Self.CleanGrimyHerbs();

  WriteLn('Noting items at ', Self.CurrentPatch.Data.Name);

  for i := 0 to High(LeprechaunItems) do
  begin
    if Inventory.FindItem(item := LeprechaunItems[i], slot) then
    begin
      Slots += Slot;
      Items += Item;
      LepItems += i;
    end
  end;

  if Slots.Len() < 1 then
    Exit();

  for i := 0 to High(Slots) do
  begin
    RSInterface.Close();

    if ScriptWalker^.GetMyPos = Self.CurrentPatch.Data.LeprechaunCoords then
    begin
      PlayerBox := Mainscreen.GetPlayerBox();
      PlayerBox.Y1 := PlayerBox.Y1 - Floor(PlayerBox.Height / 2);
      LepPT := PlayerBox.Middle;
    end
    else if not Self.CurrentPatch.FindLeprechaun(LepPT) then
      Exit();

    Count := Inventory.CountItem(Items[i]);
    Inventory.SetSelectedSlot(Slots[i]);

    if SRL.Dice(65) then
      Mouse.HumanMove(LepPT)
    else
      Mouse.Move(LepPT);

    if Mainscreen.IsUpText('Tool') then
      Mouse.Click(MOUSE_LEFT)
    else if not ChooseOption.Select('Tool') then
    begin
      WriteLn('Failed to choose option leprechaun.');
      Inventory.SetSelectedSlot(-1);
      Exit();
    end;

    if not Mainscreen.DidRedClick() then
    begin
      WriteLn('Failed to find red click.');
      Inventory.SetSelectedSlot(-1);
      Exit();
    end;

    if SRL.Dice(65) and (i <> High(Slots)) then
    begin
      Wait(187, 317);
      Mouse.Move(Inventory.GetSlotBox(Slots[i+1]));
    end
    else if SRL.Dice(65) then
      Mouse.RandomMovement();

    if WaitUntil((Inventory.CountItem(Items[i]) = 0), 15, 10000) then
      Self.HarvestQuantities[LepItems[i]] += Count;

    Minimap.WaitPlayerMoving();
  end;
  Inventory.SetSelectedSlot(-1);
end;

procedure TFarmRun.HandleDeadPatch(); begin
  if not RSClient.IsLoggedIn() then
    Exit();

  if Self.ResurrectCrop then
  begin
    case Magic.GetSpellBook of
      ERSSpellBook.ARCEUUS:
        begin
          Magic.ClickSpell(ERSSpell.RESURRECT_CROPS);
          if Chat.FindMessage('to cast') then
          begin
            Self.ResurrectCrop := False;
            WriteLn('Out of runes for resurrect crop. Disabling.');
          end
        end;
    end;
  end;

  if Self.ResurrectCrop then
    Wait(100);

  if SRL.Dice(65) then
    Mouse.HumanMove(SRL.RandomPoint(Self.CurrentPatch.TPA.Mean, MainScreen.NormalizeDistance(15)))
  else
    Mouse.Move(SRL.RandomPoint(Self.CurrentPatch.TPA.Mean, MainScreen.NormalizeDistance(15)));

  if MainScreen.IsUpText('Dead') then
    Mouse.Click(MOUSE_LEFT)
  else if not ChooseOption.Select('Dead') then
  begin
    Mouse.RandomMovement();
    Exit();
  end;

  if not MainScreen.DidRedClick() then
    Exit();

  Wait(600, 800);
  Minimap.WaitPlayerMoving();
  Wait(600, 800);

  if not Self.CurrentPatch.Find(False) then
    Exit();

  if not WaitUntil((Chat.FindMessage('restore') or Chat.HasContinue() or Self.CurrentPatch.IsEmpty), 15, 15000) then
    Exit();

  if Chat.HasContinue then
  begin
    if SRL.Dice(65) then
      Mouse.HumanMove(SRL.RandomPoint(Self.CurrentPatch.TPA.Mean, Mainscreen.NormalizeDistance(15)))
    else
      Mouse.Move(SRL.RandomPoint(Self.CurrentPatch.TPA.Mean, Mainscreen.NormalizeDistance(15)));

    if MainScreen.IsUpText('Dead') then
      Mouse.Click(MOUSE_LEFT)
    else if not ChooseOption.Select('Dead') then
    begin
      Mouse.RandomMovement();
      Exit();
    end;

    if not MainScreen.DidRedClick() then
      Exit();

    Wait(600, 800);
    Minimap.WaitPlayerMoving();
    Wait(600, 800);

    if not Self.CurrentPatch.Find(False) then
      Exit();

    WaitUntil((Chat.FindMessage('restore') or Chat.HasContinue() or Self.CurrentPatch.IsEmpty), 15, 15000);
  end;

  Wait(250, 1000);
end;

procedure TFarmRun.HandleDiseasedPatch();
begin
  Self.CurrentPatch.Skip := True;
end;

procedure TFarmRun.WithdrawCompost();
var
  Boxes: TBoxArray := [[160, 210, 245, 245], [275, 210, 360, 245], [390, 210, 475, 245], [390, 210, 475, 245], [0, 0, 0, 0]];
  WithdrawAmt: Int32 := Round(Inventory.CountEmptySlots * 0.2) + 1;
  LeprechaunPt: TPoint;
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  if not Self.CurrentPatch.FindLeprechaun(leprechaunPt) then
    Exit();

  Mouse.Move(leprechaunPt);

  if not ChooseOption.Select('Exchange') then
    Exit();

  if not WaitUntil(RSInterface.IsOpen(), 15, 15000) then
    Exit();

  if BankPin.IsOpen() then
    BankPin.Enter(Login.GetPlayer.Pin);

  if SRL.CountColor(CTS2(2154272, 1, 0.01, 0.01), Boxes[Self.CompostMethod]) = 0 then
  begin
    //TODO no green = no items
    //downgrade compost?
  end;

  Mouse.Move(boxes[Self.CompostMethod]);

  if WithdrawAmt = 1 then
    ChooseOption.Select('Remove-1')
  else if WithdrawAmt = 5 then
    ChooseOption.Select('Remove-5')
  else
  begin
    ChooseOption.Select('Remove-X');
    Chat.AnswerQuery('Enter amount', ToStr(WithdrawAmt), 5000);
  end;

  RSInterface.Close(True);
end;

procedure TFarmRun.DropBuckets();
var
  Tmp, Slots: TIntegerArray;
  i : Int32;
begin
  if not Inventory.FindItems(['Bucket'], Tmp) then
    Exit();

  for i := 0 to High(Tmp) do
  begin
    if SRL.CountColor(CTS2(4087132, 1, 3.61, 4.36), Inventory.GetSlotBox(Tmp[I])) > 2 then
      Continue()
    else
      Slots += Tmp[i];
  end;

  if Slots.Len < 1 then
    Exit();

  Inventory.ShiftDrop(Slots);
end;

procedure TFarmRun.CompostPatch();
var
  CompostArray: TStringArray := ['Compost', 'Supercompost', 'Ultracompost', 'Bottomless compost bucket', ''];
  CompostItem: TRSItem := CompostArray[Self.CompostMethod];
  Slot, Attempts: Int32;
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  if not Self.CurrentPatch.Find then
  begin
    WriteLn('Could not find patch to compost!');
    Exit();
  end;

  WriteLn('Composting at ' + Self.CurrentPatch.Data.Name + ' patch.');

  if (Self.CompostMethod <> ECompostMethod.FERTILE_SOIL) and (Inventory.GetSelectedSlot = -1) then
  begin
    if (not Inventory.FindItem(CompostItem, Slot)) and (Self.CompostMethod <> ECompostMethod.BOTTOMLESS) then
    begin
      WithdrawCompost();
      Inventory.FindItem(CompostItem, Slot);
      if not Self.CurrentPatch.Find then
      begin
        WriteLn('Could not find patch to compost!');
        Exit();
      end;
    end;

    if (Slot = -1) and (not (Inventory.FindItem(CompostItem, Slot))) then
      TerminateScript('Out of compost! Terminating.');
  end;

  if Self.CompostMethod = ECompostMethod.FERTILE_SOIL then
  begin
    if Magic.GetSpellBook <> ERSSpellBook.LUNAR then
    begin
      if SRL.Dice(80) then
        Antiban.LoseFocus
      else if SRL.Dice(50) then
        Antiban.RandomMouse
      else
        Magic.Open;

      Wait(130*ONE_SECOND);

      if Magic.GetSpellBook <> ERSSpellBook.LUNAR then
        TerminateScript('Not on the correct spellbook for fertilize soil!');
    end;

    Magic.ClickSpell(ERSSpell.FERTILE_SOIL);
  end else if (Inventory.GetSelectedSlot = -1) and (not Inventory.SetSelectedSlot(slot)) then
  begin
    WriteLn('Failed to select compost in inventory.');
    Exit();
  end;

  Wait(300, 500);

  for Attempts := 0 to 2 do
  begin
    if Attempts = 2 then
    begin
      WriteLn('Failed to find correct patch uptext while composting.');
      Antiban.RandomMouse();
      Wait(200, 500);
      Exit();
    end;

    if not Self.CurrentPatch.Find then
      Continue();

    if not Mainscreen.IsUpText(Self.CurrentPatch.PlantedUpText) then
    begin
      if SRL.Dice(65) then
        Mouse.HumanMove(SRL.RandomPoint(Self.CurrentPatch.SearchBox))
      else
        Mouse.Move(Self.CurrentPatch.SearchBox);
    end;

    if MainScreen.IsUpText(Self.CurrentPatch.PlantedUpText) then
    begin
      Mouse.Click(MOUSE_LEFT);
      Break();
    end
    else if ChooseOption.Select(Self.CurrentPatch.PlantedUpText) then
      Break();
    Mouse.RandomMovement();
  end;

  if MainScreen.DidYellowClick then
  begin
    WriteLn('FOUND YELLOW CLICK!');
    Exit();
  end;

  if not WaitUntil((Chat.FindMessage('trea') or Chat.FindMessage('ming 2')), 50, 10000) then
  begin
    WriteLn('WaitUntil failed in composting step.');
    Exit();
  end;
  if SRL.Dice(40) and Self.CleanHerbs then
  begin
    Self.CleanGrimyHerbs();

  if SRL.Dice(80) then
    Self.NoteItems;
  end;

  Wait(600, 750);
  Self.DropBuckets;

  Wait(200, 400);
  Self.CurrentPatch.Complete := True;
end;

procedure TFarmRun.Plant();
var
  CompostArray: TStringArray := ['Compost', 'Supercompost', 'Ultracompost', 'Bottomless compost bucket', ''];
  CompostItem: TRSItem := compostArray[Self.CompostMethod];
  Slot, Attempts: Int32;
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  if not Self.CurrentPatch.Find() then
    Exit();

  if (Self.CurrentPatch.Data.PatchType = EPatchType.ALLOTMENT) and (Inventory.CountItemStack(Self.CurrentPatch.Seed) < 3) then
  begin
    Self.CurrentPatch.Skip := True;
    Exit();
  end;

  WriteLn('Planting ' + ToStr(Self.CurrentPatch.Seed) + ' at ' + Self.CurrentPatch.Data.Name + ' patch.');

  if Inventory.GetSelectedSlot = -1 then
  begin
    if not Inventory.FindItem(Self.CurrentPatch.Seed, Slot) then
    begin
      WriteLn('Couldn''t find seed in inventory.');
      Self.CurrentPatch.Skip := True;
      Exit();
    end;

    if not Inventory.SetSelectedSlot(Slot) then
    begin
      WriteLn('Failed to select seed in inventory.');
      Exit();
    end;
  end;

  for Attempts := 0 to 2 do
  begin
    if Attempts = 2 then
    begin
      WriteLn('Failed to find correct patch uptext or choose option while planting.');
      Inventory.SetSelectedSlot(-1);
      Antiban.RandomMouse();
      Wait(200, 400);
      Exit();
    end;

    if not Self.CurrentPatch.Find() then
      Continue();

    if not MainScreen.IsUpText(Self.CurrentPatch.EmptyUpText) or (Self.CurrentPatch.Data.PatchType = EPatchType.SEAWEED) then
    begin
      if SRL.Dice(65) then
        Mouse.HumanMove(SRL.RandomPoint(Self.CurrentPatch.SearchBox))
      else
        Mouse.Move(Self.CurrentPatch.SearchBox);
    end;

    if (Self.CurrentPatch.Data.PatchType <> EPatchType.HERB) and (Self.CurrentPatch.PlantedUpText in MainScreen.GetUpText.After('>')) then
    begin
      if MainScreen.IsUpText(Self.CurrentPatch.HarvestUpText) then
        Self.Harvest()
      else
        Self.CompostPatch();

      Exit();
    end;

    if MainScreen.IsUpText(Self.CurrentPatch.EmptyUpText) then
    begin
      Mouse.Click(MOUSE_LEFT);
      Break();
    end
    else if ChooseOption.Select(Self.CurrentPatch.EmptyUpText) then
      Break();

    Mouse.RandomMovement();
  end;

  if not MainScreen.DidRedClick() then
    Exit();

  if WaitUntil(Minimap.IsPlayerMoving, 17, Random(713, 809)) then
    while Minimap.IsPlayerMoving do
      Wait(75);

  if Chat.HasContinue() then
  begin
    if Self.CurrentPatch.Data.PatchType <> EPatchType.FLOWER then
      Self.CompostPatch
    else
      Self.CurrentPatch.Complete := True;
    Exit();
  end;

  if not Self.CurrentPatch.Find(False) then
    Exit();

  if Self.CurrentPatch.Data.PatchType <> EPatchType.FLOWER then
  begin
    if (Self.CompostMethod <> ECompostMethod.FERTILE_SOIL) then
    begin
      if Inventory.FindItem(CompostItem, Slot) then
        Inventory.SetSelectedSlot(Slot);

      Wait(78, 208);

      if SRL.Dice(95) then
        Mouse.HumanMove(SRL.RandomPoint(Self.CurrentPatch.SearchBox))
      else
        Mouse.Move(Self.CurrentPatch.SearchBox);
    end;
  end;

  XPBar.EarnedXP();

  if WaitUntil(((not Self.CurrentPatch.IsEmpty) or XPBar.EarnedXP), 15, 10000) then
  begin
    Wait(338, 562);

    if Self.CurrentPatch.Data.PatchType <> EPatchType.FLOWER then
      Self.CompostPatch
    else
      Self.CurrentPatch.Complete := True;
  end;
end;

procedure TFarmRun.HarvestWait();
var
  T: TCountdown;
begin
  T.Init(300);

  if not (ScriptWalker^.GetMyPos in PatchData[EFarmPatch.PHASMATYS_HERB].MapCoords) then
  begin
    Wait(T.TimeRemaining);
    Exit();
  end;

  repeat
    if (Length(MainScreen.FindHitsplats(MainScreen.GetPlayerBox)) > 0) then
    begin
      WriteLn('Combat detected in Port Phasmatys. Running away.');
      T.Init(ONE_MINUTE);

      repeat
        ScriptWalker^.WebWalk([10030, 2320], 50);
      until (ScriptWalker^.GetMyPos.DistanceTo([10030, 2320]) <= 50) or T.IsFinished();

      Self.CurrentPatch.Skip := True;
      Break();
    end;
  until T.IsFinished();
end;

procedure TFarmRun.Harvest();
var
  HarvestTimer: TCountdown;
  Slot: Int32;
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  WriteLn('Harvesting at ' + Self.CurrentPatch.Data.Name + ' patch.');

  if Inventory.IsFull or (Self.CurrentPatch.Data.PatchType = EPatchType.FLOWER) then
    Self.NoteItems();

  Minimap.WaitPlayerMoving();

  if not Self.CurrentPatch.Find() then
    Exit();

  if not Mainscreen.IsUpText(Self.CurrentPatch.HarvestUpText) or (Self.CurrentPatch.Data.PatchType = EPatchType.SEAWEED) then
  begin
    if SRL.Dice(65) then
      Mouse.HumanMove(SRL.RandomPoint(Self.CurrentPatch.SearchBox))
    else
      Mouse.Move(Self.CurrentPatch.SearchBox);
  end;

  if Mainscreen.IsUpText(Self.CurrentPatch.HarvestUpText) then
  begin
    Mouse.Click(MOUSE_LEFT);
  end
  else if not ChooseOption.Select(Self.CurrentPatch.HarvestUpText) then
  begin
    WriteLn('Failed to find harvest uptext or choose option.');
    Antiban.RandomRotate();
    Exit();
  end;

  if not Mainscreen.DidRedClick() then
  begin
    WriteLn('Failed to find red click.');
    Exit();
  end;

  if WaitUntil(Minimap.IsPlayerMoving, 17, Random(707, 803)) then
    while Minimap.IsPlayerMoving() do
      Wait(30);

  if not Self.CurrentPatch.Find(False) then
    Exit();

  if SRL.Dice(35) and Inventory.FindItem(Self.CurrentPatch.Seed, Slot) then
  begin
    Inventory.SetSelectedSlot(Slot);

    if SRL.Dice(65) then
      Mouse.HumanMove(SRL.RandomPoint(Self.CurrentPatch.SearchBox))
    else
      Mouse.Move(Self.CurrentPatch.SearchBox);
  end;

  HarvestTimer.Init(4000);

  while not HarvestTimer.IsFinished() do
  begin

    if XPBar.EarnedXP() then
      HarvestTimer.Restart();

    if Inventory.IsFull() then
    begin
      Inventory.SetSelectedSlot(-1);
      Wait(532, 718);
      Self.NoteItems();
      Exit();
    end;

    if HarvestTimer.IsFinished() or Self.CurrentPatch.IsEmpty() then
    begin
      Plant();
      Exit();
    end;

    HarvestWait();

    if Self.CurrentPatch.Skip = True then
      Break();
  end;
end;

procedure TFarmRun.HarvestWhiteBerries();
var
  HarvestTimer: TCountdown;
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  WriteLn('Harvesting whiteberries at ' + Self.CurrentPatch.Data.Name + ' patch.');

  if Inventory.IsFull() then
    Self.NoteItems();

  if WaitUntil(Minimap.IsPlayerMoving, 17, 600) then
    while Minimap.IsPlayerMoving do
      Wait(175);

  if not Self.CurrentPatch.Find() then
    Exit();

  if not Mainscreen.IsUpText('Pick') then
  begin
    if SRL.Dice(65) then
      Mouse.HumanMove(SRL.RandomPoint(Self.CurrentPatch.SearchBox))
    else
      Mouse.Move(Self.CurrentPatch.SearchBox);
  end;

  if Mainscreen.IsUpText('Clear') then
  begin
    Self.CurrentPatch.Complete := True;
    Exit();
  end;

  if Mainscreen.IsUpText('Inspect') then
  begin
    Self.CurrentPatch.Complete := True;
    Exit();
  end;

  if Mainscreen.IsUpText('Check-health') then
  begin
    Mouse.Click(MOUSE_LEFT);
    WaitUntil(XPBar.EarnedXP(), 15, 2600);
  end;

  if Mainscreen.IsUpText('Pick') then
    Mouse.Click(MOUSE_LEFT)
  else if not ChooseOption.Select('Pick', MOUSE_LEFT, True, False) then
  begin
    if ChooseOption.HasOption('Clear', True, False) then
      Self.CurrentPatch.Complete := True
    else
      WriteLn('Failed to find harvest uptext or choose option.');
  end;

  if not Mainscreen.DidRedClick() then
  begin
    WriteLn('Failed to find red click.');
    Exit();
  end;

  if WaitUntil(Minimap.IsPlayerMoving, 17, 600) then
    while Minimap.IsPlayerMoving do
      Wait(13, 199);

  if not Self.CurrentPatch.Find(False) then
    Exit();

  if SRL.Dice(65) then
    Mouse.HumanMove(SRL.RandomPoint(Self.CurrentPatch.SearchBox))
  else
    Mouse.Move(Self.CurrentPatch.SearchBox);

  HarvestTimer.Init(4000);
  while not HarvestTimer.IsFinished do
  begin
    if XPBar.EarnedXP() then
      HarvestTimer.Restart();

    if Mainscreen.IsUpText('ear') then
    begin
      Self.CurrentPatch.Complete := True;
      Exit();
    end else if Inventory.IsFull then
    begin
      Inventory.SetSelectedSlot(-1);
      Self.NoteItems();
      HarvestWhiteBerries();
    end;
    Wait(300);
  end;
end;

procedure TFarmRun.HarvestCactus();
var
  HarvestTimer: TCountdown;
begin
  if not RSClient.IsLoggedIn() then
    Exit();

  WriteLn('Harvesting cactus at ' + Self.CurrentPatch.Data.Name + ' patch.');

  if Inventory.IsFull() then
    Self.NoteItems();

  if WaitUntil(Minimap.IsPlayerMoving, 17, 600) then
    while Minimap.IsPlayerMoving() do
      Wait(13, 199);

  if not Self.CurrentPatch.Find() then
    Exit();

  if not Mainscreen.IsUpText('Pick') then
  begin
    if SRL.Dice(65) then
      Mouse.HumanMove(SRL.RandomPoint(Self.CurrentPatch.TPA.Mean, Mainscreen.NormalizeDistance(15)))
    else
      Mouse.Move(SRL.RandomPoint(Self.CurrentPatch.TPA.Mean, Mainscreen.NormalizeDistance(15)));
  end;

  if Mainscreen.IsUpText('Clear') then
  begin
    Self.CurrentPatch.Complete := True;
    Exit();
  end;

  if Mainscreen.IsUpText('Inspect') then
  begin
    Self.CurrentPatch.Complete := True;
    Exit();
  end;

  if Mainscreen.IsUpText('Check-health') then
  begin
    Mouse.Click(MOUSE_LEFT);
    WaitUntil(XPBar.EarnedXP(), 15, 2600);
  end;

  if Mainscreen.IsUpText('Pick') then
    Mouse.Click(MOUSE_LEFT)
  else if MainScreen.IsUpText('Clear') then
  begin
    Self.CurrentPatch.Complete := True;
    Exit();
  end
  else if not ChooseOption.Select('Pick', MOUSE_LEFT, True, False) then
  begin
    if ChooseOption.HasOption('Clear', True, False) then
      Self.CurrentPatch.Complete := True
    else
      WriteLn('Failed to find harvest uptext or choose option.');
    Exit();
  end;

  if not Mainscreen.DidRedClick() then
  begin
    WriteLn('Failed to find red click.');
    Exit();
  end;

  if WaitUntil(Minimap.IsPlayerMoving, 17, 600) then
    while Minimap.IsPlayerMoving do
      Wait(13, 199);

  if not Self.CurrentPatch.Find(False) then
    Exit();

  if SRL.Dice(65) then
    Mouse.HumanMove(SRL.RandomPoint(Self.CurrentPatch.TPA.Mean, Mainscreen.NormalizeDistance(15)))
  else
    Mouse.Move(SRL.RandomPoint(Self.CurrentPatch.TPA.Mean, Mainscreen.NormalizeDistance(15)));

  HarvestTimer.Init(4000);
  while not HarvestTimer.IsFinished do
  begin
    if XPBar.EarnedXP() then
      HarvestTimer.Restart();

    if Mainscreen.IsUpText('ear') then
    begin
      Self.CurrentPatch.Complete := True;
      Exit();
    end
    else if Inventory.IsFull() then
    begin
      Inventory.SetSelectedSlot(-1);
      Self.NoteItems();
      HarvestCactus();
    end;
    Wait(300);
  end;
end;

procedure TFarmRun.UsePOHSpiritTree(Location: String);
var
  Primary, Secondary, TPA: TPointArray;
  ATPA: T2DPointArray;
  Attempts: Int32;
begin

  if not WaitUntil(Minimap.InPOH, 15, 15000) then
  begin
    WriteLn('Not in POH!');
    Exit();
  end;

  for Attempts := 1 to 3 do
  begin
    if (SRL.FindColors(Primary, CTS2(1649718, 5, 0.15, 1.14), MainScreen.Bounds) = 0) or (SRL.FindColors(Secondary, CTS2(1720892, 10, 0.21, 1.42), MainScreen.Bounds) = 0) then
    begin
      if SRL.Dice(50) then
        MiniMap.SetCompassAngle(Random(106, 153))
      else
        MiniMap.SetCompassAngle(Random(209, 248));
      Continue();
    end;

    TPA := Primary.PointsInRangeOf(Secondary, 0, MainScreen.NormalizeDistance(38));
    TPA.Grow(MainScreen.NormalizeDistance(8));
    TPA.Erode(MainScreen.NormalizeDistance(6));

    if TPA = [] then
    begin
      if SRL.Dice(50) then
        MiniMap.SetCompassAngle(Random(106, 153))
      else
        MiniMap.SetCompassAngle(Random(209, 248));
    end;
  end;

  if TPA = [] then
  begin
    WriteLn('Failed to find spirit tree. Skipping.');
    Self.CurrentPatch.Skip := True;
    Exit();
  end;

  ATPA := TPA.Cluster(MainScreen.NormalizeDistance(18));
  ATPA.SortBySize();

  if SRL.Dice(65) then
    Mouse.HumanMove(SRL.RandomPoint(ATPA[0].Mean, MainScreen.NormalizeDistance(20)))
  else
    Mouse.Move(SRL.RandomPoint(ATPA[0].Mean, MainScreen.NormalizeDistance(20)));

  if MainScreen.IsUpText('Spirit') then
    Mouse.Click(MOUSE_LEFT)
  else if not ChooseOption.Select('Travel') then
  begin
    WriteLn('Failed to find spirit tree uptext!');
    Self.CurrentPatch.Skip := True;
    Exit();
  end;

  if SRL.Dice(66) then
  begin
    Wait(718, 2168);
    case Location of
      'guild': KeyBoard.KeyDown(VK_B);
    end;
  end;

  if not WaitUntil(RSInterface.IsOpen(), 15, 10000) then
  begin
    WriteLn('Timed out waiting for spirit tree interface.');
    Exit();
  end;

  if not KeyBoard.IsKeyDown(VK_B) then
    KeyBoard.PressKey(VK_B);

  WaitUntil((not Minimap.InPOH), 15, 10000);
  KeyBoard.KeyUp(VK_B);
end;

procedure TFarmRun.TeleportTo(TravelMethod: ETravelMethod; ConfirmPos: Boolean);
label
  TELEPORT_COMPLETE;
var
  Spell: ERSSpell := ERSSpell.BAKE_PIE;
  Items: TRSItemArray;
  Item: TRSItem;
  B: TBox;
begin
  WriteLn('Teleporting to ' + Self.CurrentPatch.Data.Name);

  if not RSClient.IsLoggedIn() then
    Exit();

  Inventory.SetSelectedSlot(-1);

  if Minimap.InPOH then
  begin
    case TravelMethod of
      ETravelMethod.HOUSE_TAB_SPIRIT_TREE_GUILD,
      ETravelMethod.HOUSE_TELE_SPIRIT_TREE_GUILD,
      ETravelMethod.CON_CAPE_SPIRIT_TREE_GUILD:
        begin
          Self.UsePOHSpiritTree('guild');
          goto TELEPORT_COMPLETE;
        end;
    end;
  end;

  if ScriptWalker^.GetMyPos in Self.CurrentPatch.Data.MapCoords then
    Exit();

  case TravelMethod of
    ETravelMethod.ICY_BASALT:
      begin
        Item := 'Icy basalt';
        Wait(250,500);
        Inventory.ClickItem(Item, 'Weiss');
      end;
    ETravelMethod.STONY_BASALT:
      begin
        Item := 'Stony basalt';
        Wait(250,500);
        Inventory.ClickItem(Item, 'Stronghold');
      end;
    ETravelMethod.CATHERBY_TABLET:
      begin
        Item := 'Catherby teleport';
        Wait(250,500);
        Inventory.ClickItem(Item, 'Break');
      end;
    ETravelMethod.CATHERBY_TELEPORT:
      begin
        Spell := ERSSpell.CATHERBY_TELEPORT;
        Wait(250,500);
        Magic.CastSpell(Spell, 'Cast');
      end;
    ETravelMethod.CAMELOT_TELEPORT:
      begin
        Spell := ERSSpell.CAMELOT_TELEPORT;
        Wait(250,500);
        Magic.CastSpell(Spell, 'Cast');
      end;
    ETravelMethod.CAMELOT_TABLET:
      begin
        Item := 'Camelot teleport';
        Wait(250,500);
        Inventory.ClickItem(Item, 'Break');
      end;
    ETravelMethod.FENKENSTRAIN_TELEPORT:
      begin
        Spell := ERSSpell.FENKENSTRAINS_CASTLE_TELEPORT;
        Wait(250,500);
        Magic.ClickSpell(Spell);
      end;
    ETravelMethod.ECTOPHIAL:
      begin
        Item := 'Ectophial';
        Wait(250,500);
        Inventory.ClickItem(Item, 'Empty');
        Wait(4000,5000);
      end;
    ETravelMethod.XERICS_TALISMAN:
      begin
        Item := 'Xeric''s talisman';
        Wait(250,500);
        if Inventory.ContainsItem('Xeric''s talisman') then
        begin
          Inventory.ClickItem(Item, 'Rub');
          WaitUntil(RSInterface.IsOpen(), 10, 5000);
          B := ([219,92,293,101]);
          Mouse.Click(B, MOUSE_LEFT);
        end
        else
          Equipment.ClickItem(Item, 'Xeric''s Glade');
      end;
    ETravelMethod.HOSIDIOUS_TABLET:
      begin
        Item := 'Hosidius teleport';
        Wait(250,500);
        Inventory.ClickItem(Item, 'Break');
      end;
    ETravelMethod.HOUSE_TELEPORT:
      begin
        Item := 'Teleport to house';
        Wait(250,500);
        if Inventory.ContainsItem('Teleport to house') then
        begin
          Inventory.ClickItem(Item, 'Outside');
        end
        else
          Magic.CastSpell(ERSSpell.TELEPORT_TO_HOUSE, 'Outside');
      end;
     ETravelMethod.CON_CAPE_HOSIDIUS:
    begin
        Items := (['Construct. cape', 'Construct. cape(t)']);
        for Item in Items do
        Wait(250,500);
        if not Inventory.ClickItem(Item, 'Teleport') then
          Equipment.ClickItem(Item, 'Teleport');
        WaitUntil(RSInterface.IsOpen(), 10, 5000);
        B := ([235,144,278,148]);
        Mouse.Click(B, MOUSE_LEFT);
      end;
    ETravelMethod.FARMING_CAPE:
      begin
        Items := (['Farming cape', 'Farming cape(t)']);
        for Item in Items do
        Wait(250,500);
        if not Inventory.ClickItem(Item, 'Teleport') then
          Equipment.ClickItem(Item, 'Teleport');
      end;
    ETravelMethod.EXPLORERS_RING_2:
      begin
        Item := 'Explorer''s ring 2';
        Wait(250,500);
        if not Inventory.ClickItem(Item, 'Teleport') then
          Equipment.ClickItem(Item, 'Teleport');
      end;
    ETravelMethod.EXPLORERS_RING_3:
      begin
        Item := 'Explorer''s ring 3';
        Wait(250,500);
        if not Inventory.ClickItem(Item, 'Teleport') then
          Equipment.ClickItem(Item, 'Teleport');
      end;
    ETravelMethod.EXPLORERS_RING_4:
      begin
        Item := 'Explorer''s ring 4';
        Wait(250,500);
        if not Inventory.ClickItem(Item, 'Teleport') then
          Equipment.ClickItem(Item, 'Teleport');
      end;
    ETravelMethod.ARDY_CLOAK_1_BUSH:
      begin
        Item := 'Ardougne cloak 1';
        Wait(250,500);
        if not Inventory.ClickItem(Item, 'Monastery Teleport') then
          Equipment.ClickItem(Item, 'Kandarin Monastery');
      end;
    ETravelMethod.ARDY_CLOAK_2:
      begin
        Item := 'Ardougne cloak 2';
        Wait(250,500);
        if not Inventory.ClickItem(Item, 'Farm Teleport') then
          Equipment.ClickItem(Item, 'Ardougne Farm');
      end;
    ETravelMethod.ARDY_CLOAK_2_BUSH:
      begin
        Item := 'Ardougne cloak 2';
        Wait(250,500);
        if not Inventory.ClickItem(Item, 'Monastery Teleport') then
          Equipment.ClickItem(Item, 'Kandarin Monastery');
      end;
    ETravelMethod.ARDY_CLOAK_3:
      begin
        Item := 'Ardougne cloak 3';
        Wait(250,500);
        if not Inventory.ClickItem(Item, 'Farm Teleport') then
          Equipment.ClickItem(Item, 'Ardougne Farm');
      end;
    ETravelMethod.ARDY_CLOAK_3_BUSH:
      begin
        Item := 'Ardougne cloak 3';
        Wait(250,500);
        if not Inventory.ClickItem(Item, 'Monastery Teleport') then
          Equipment.ClickItem(Item, 'Kandarin Monastery');
      end;
    ETravelMethod.ARDY_CLOAK_4:
      begin
        Item := 'Ardougne cloak 4';
        Wait(250,500);
        if not Inventory.ClickItem(Item, 'Farm Teleport') then
          Equipment.ClickItem(Item, 'Ardougne Farm');
      end;
    ETravelMethod.ARDY_CLOAK_4_BUSH:
      begin
        Item := 'Ardougne cloak 4';
        Wait(250,500);
        if not Inventory.ClickItem(Item, 'Monastery Teleport') then
          Equipment.ClickItem(Item, 'Kandarin Monastery');
      end;
    ETravelMethod.SKILLS_NECKLACE:
      begin
        Item := 'Skills necklace(6)';
        Wait(250,500);
        if Inventory.ContainsItem(item) then
        begin
          Inventory.ClickItem(Item, 'Rub');
          WaitUntil(RSInterface.IsOpen(), 10, 5000);
          B := ([219,155,295,165]);
          Mouse.Click(B, MOUSE_LEFT);
        end
        else
          Equipment.ClickItem(Item, 'Farming Guild');
      end;
    ETravelMethod.DIGSITE_TO_SEAWEED:
      begin
          Self.TravelToGiantSeaweed();
          Exit();
      end;
    ETravelMethod.HOUSE_TAB_SPIRIT_TREE_GUILD:
      begin
        Item := 'Teleport to house';
        Wait(250,500);
        Inventory.ClickItem(Item, 'Break');
      end;
    ETravelMethod.HOUSE_TELE_SPIRIT_TREE_GUILD:
      begin
        Spell := ERSSpell.TELEPORT_TO_HOUSE;
        Wait(250,500);
        Magic.CastSpell(Spell);
      end;
     ETravelMethod.CON_CAPE_SPIRIT_TREE_GUILD:
      begin
        Items := (['Construct. cape', 'Construct. cape(t)']);
        Wait(250,500);
        if not Inventory.ClickItem(Item, 'Tele to POH') then
          Equipment.ClickItem(Item, 'Tele to POH');
      end;
  end;

  Wait(800, 1000);

  if ('Ardougne' in Item) then
  begin
    if Chat.FindMessage('cape has recharged') then
    begin
      WriteLn('Out of ardy cape charges. Skipping patch.');
      Self.CurrentPatch.Skip := True;
      Exit();
    end;
  end
  else if ('Explorer' in Item) then
  begin
    if Chat.FindMessage('ring recharges') then
    begin
      WriteLn('Out of explorer''s ring charges. Skipping patch.');
      Self.CurrentPatch.Skip := True;
      Exit();
    end;
  end
  else if TravelMethod = ETravelMethod.XERICS_TALISMAN then
  begin
    if Equipment.ContainsItem('Xeric''s talisman (inert)') then
    begin
      WriteLn('Out of xeric''s talisman charges. Skipping patch.');
      Self.CurrentPatch.Skip := True;
      Exit();
    end
    else if ((not Equipment.ContainsItem('Xeric''s talisman')) and (not Inventory.ContainsItem('Xeric''s talisman'))) then
    begin
      WriteLn('No xeric''s talisman equipped. Skipping patch.');
      Self.CurrentPatch.Skip := True;
      Exit();
    end;
  end
  else if spell <> ERSSpell.BAKE_PIE then
  begin
    if Chat.FindMessage('to cast') then
    begin
      WriteLn('Out of runes for ' + ToStr(spell) + '. Skipping patch.');
      Self.CurrentPatch.Skip := True;
      Exit();
    end;
  end;

  if (TravelMethod = ETravelMethod.HOUSE_TAB_SPIRIT_TREE_GUILD) or (TravelMethod = ETravelMethod.HOUSE_TELE_SPIRIT_TREE_GUILD) or (TravelMethod = ETravelMethod.CON_CAPE_SPIRIT_TREE_GUILD) then
    Self.UsePOHSpiritTree('guild');

  TELEPORT_COMPLETE:
  if not ConfirmPos then
    Exit();

  if not WaitUntil((ScriptWalker^.GetMyPos in Self.CurrentPatch.Data.MapCoords), 10, 10000) then
    Exit();

  if Inventory.IsFull() then
    Self.NoteItems;
end;

procedure TFarmRun.Report();
begin
  WriteLn('Finished a farm run.');
end;

operator in(Left: TBox; Right: TBoxArray): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Right) do
    if Left = Right[i] then
      Exit(True);
end;

procedure TFarmRun.Init(StartWithRun: Boolean = False);
var
  RSW: TRSWalker;
  Tmp: TBoxArray;
  i: Int32;
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  for i := 0 to High(Self.Patches) do
    if not (Self.Patches[i].Data.MapCoords in Tmp) then
      Tmp += Self.Patches[i].Data.MapCoords;

  LeprechaunItems := ['Guam leaf', 'Marrentill', 'Tarromin', 'Harralander', 'Ranarr weed', 'Toadflax',
                      'Irit leaf', 'Avantoe', 'Kwuarm', 'Snapdragon', 'Cadantine', 'Lantadyme',
                      'Dwarf weed', 'Torstol', 'Limpwurt root', 'Potato', 'Onion', 'Cabbage', 'Tomato', 'Sweetcorn',
                      'Strawberry', 'Watermelon', 'Snape grass', 'White berries', 'Potato cactus', 'Cactus spine', 'Giant seaweed'];

  if not Self.CleanHerbs then
    LeprechaunItems.Add(GRIMY_HERBS);

  if ScriptWalker = nil then
  begin
    RSW.SetupRegions(Tmp);
    RSW.AdaptiveWalk := True;
  end
  else
    ScriptWalker^.AddRegions(tmp);

  BoatyShore.SetupCoordinates([[9294,1075]]);
  BoatyShore.SetupUpText(['ravel']);
  BoatyShore.Finder.Colors += CTS2(6124929, 5, 0.15, 0.13);

  BoatyIsland.SetupCoordinates([[9463,704]]);
  BoatyIsland.SetupUpText(['ravel']);
  BoatyIsland.Finder.Colors += CTS2(5401465, 20, 0.02, 0.23);

  BargeAttendant.ShapeArray += [[2, 2, 7], 0];
  BargeAttendant.SetupCoordinates([[8840, 2663]]);
  BargeAttendant.SetupUpText(['uard']);
  BargeAttendant.Finder.Colors += CTS2(1911645, 6, 0.08, 0.27);

  Self.InactivityTimer.Init(6 * ONE_MINUTE);

  if StartWithRun then
    Self.ReadyTimer.Init(Random(86*ONE_MINUTE, 97*ONE_MINUTE))
  else
    Self.ReadyTimer.Init(Self.GetNextTime());

  SetLength(Self.HarvestQuantities, Length(LeprechaunItems));
end;

procedure TFarmRun.Run();
var
  AntibanMinZ, AntibanMaxZ: Int32;
  State: EPatchState;
  FailedCount: Int32;
begin
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  Antiban.DebugLn('Starting farm run.');
  Self.Runtime.Start();

  AntibanMinZ := Antiban.MinZoom;
  AntibanMaxZ := Antiban.MaxZoom;
  Antiban.MinZoom := 17;
  Antiban.MaxZoom := 23;
  Mainscreen.SetHighestPitch;
  Options.SetZoomLevel(Random(17, 23));

  Self.OnStart();

  Self.LastXPRead := XPBar.Read();
  Self.InactivityTimer.Restart();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  for Self.CurrentPatch in Self.Patches do
  begin
    if not RSClient.IsLoggedIn() then
      Login.LoginPlayer();

    repeat
      State := Self.CurrentPatch.GetState();

      if FailedCount = 8 then
        State := EPatchState.SKIP;

      if State <> EPatchState.FAILED then
        FailedCount := 0;

      case State of
        EPatchState.HARVEST_WHITEBERRIES: Self.HarvestWhiteBerries;
        EPatchState.HARVEST_CACTUS: Self.HarvestCactus;
        EPatchState.HARVEST: Self.Harvest;
        EPatchState.PLANT: Self.Plant;
        EPatchState.COMPOST: Self.CompostPatch;
        EPatchState.DISEASED: Self.HandleDiseasedPatch;
        EPatchState.DEAD: Self.HandleDeadPatch;
        EPatchState.TELEPORT_TO: Self.TeleportTo(Self.CurrentPatch.TravelMethod, True);
        EPatchState.NOTE_ITEMS: Self.NoteItems;
        EPatchState.FAILED: Inc(failedCount);
        EPatchState.COMPLETE:
        begin
          WriteLn('Patch complete.');
          Inc(Self.PatchesCompleted);
          Break();
        end;
        EPatchState.SKIP:
        begin
          WriteLn('Skipping patch.');
          Inc(Self.PatchesSkipped);
          Break();
        end;
      end;

      if XPBar.EarnedXP() then
        InactivityTimer.Restart();

    until InactivityTimer.IsFinished();

    Self.CurrentPatch.Skip := Self.CurrentPatch.Complete := False;

    if Self.DoReport then
      Self.Report();
  end;

  if InactivityTimer.IsFinished() then
    TerminateScript('Terminating due to inactivity.');

  Inc(Self.RunsComplete);

  Antiban.MinZoom := AntibanMinZ;
  Antiban.MaxZoom := AntibanMaxZ;

  Self.OnComplete();

  Self.Runtime.Pause();

  Self.XPGained += XPBar.Read() - Self.LastXPRead;
  Self.Report();
end;

procedure TerminateScript(Reason: String); override; begin
  WriteLn(Reason);
  TerminateScript();
end;

procedure TFarmRun.DoFarmRun();
begin
  if not ReadyTimer.IsFinished() then
    Exit();

  Self.Run();

  ReadyTimer.Init(Self.GetNextTime());
end;
